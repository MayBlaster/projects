{"version":3,"sources":["fipp/visit.cljc"],"mappings":"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","names":["fipp$visit$IVisitor$visit_unknown$dyn","x__4428__auto__","m__4429__auto__","fipp.visit/visit-unknown","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","fipp$visit$IVisitor$visit_nil$dyn","fipp.visit/visit-nil","fipp$visit$IVisitor$visit_boolean$dyn","fipp.visit/visit-boolean","fipp$visit$IVisitor$visit_string$dyn","fipp.visit/visit-string","fipp$visit$IVisitor$visit_character$dyn","fipp.visit/visit-character","fipp$visit$IVisitor$visit_symbol$dyn","fipp.visit/visit-symbol","fipp$visit$IVisitor$visit_keyword$dyn","fipp.visit/visit-keyword","fipp$visit$IVisitor$visit_number$dyn","fipp.visit/visit-number","fipp$visit$IVisitor$visit_seq$dyn","fipp.visit/visit-seq","fipp$visit$IVisitor$visit_vector$dyn","fipp.visit/visit-vector","fipp$visit$IVisitor$visit_map$dyn","fipp.visit/visit-map","fipp$visit$IVisitor$visit_set$dyn","fipp.visit/visit-set","fipp$visit$IVisitor$visit_tagged$dyn","fipp.visit/visit-tagged","fipp$visit$IVisitor$visit_meta$dyn","fipp.visit/visit-meta","fipp$visit$IVisitor$visit_var$dyn","fipp.visit/visit-var","fipp$visit$IVisitor$visit_pattern$dyn","fipp.visit/visit-pattern","fipp$visit$IVisitor$visit_record$dyn","fipp.visit/visit-record","fipp.visit/IVisitor","this","x","meta","fipp.visit/visit*","visitor","fipp.ednize/override?","fipp.util/boolean?","fipp.util/char?","cljs.core/Symbol","cljs.core/Keyword","cljs.core/seq?","cljs.core/vector?","cljs.core/record?","cljs.core/map?","cljs.core/set?","cljs.core/tagged-literal?","cljs.core/var?","fipp.util/regexp?","fipp.visit/value-meta","fipp.util/value-obj?","cljs.core/meta","fipp.visit/visit","temp__5733__auto__","m"],"sourcesContent":["(ns fipp.visit\n  \"Convert to and visit edn structures.\"\n  (:require [fipp.util :as util]\n            [fipp.ednize :refer [override?]]))\n\n;;;TODO Stablize public interface\n\n(defprotocol IVisitor\n\n  (visit-unknown [this x])\n\n  (visit-nil [this])\n  (visit-boolean [this x])\n  (visit-string [this x])\n  (visit-character [this x])\n  (visit-symbol [this x])\n  (visit-keyword [this x])\n  (visit-number [this x])\n  (visit-seq [this x])\n  (visit-vector [this x])\n  (visit-map [this x])\n  (visit-set [this x])\n  (visit-tagged [this x])\n\n  ;; Not strictly Edn...\n  (visit-meta [this meta x])\n  (visit-var [this x])\n  (visit-pattern [this x])\n  (visit-record [this x])\n  )\n\n(defn visit*\n  \"Visits objects, ignoring metadata.\"\n  [visitor x]\n  (cond\n    (nil? x) (visit-nil visitor)\n    (override? x) (visit-unknown visitor x)\n    (util/boolean? x) (visit-boolean visitor x)\n    (string? x) (visit-string visitor x)\n    (util/char? x) (visit-character visitor x)\n    (symbol? x) (visit-symbol visitor x)\n    (keyword? x) (visit-keyword visitor x)\n    (number? x) (visit-number visitor x)\n    (seq? x) (visit-seq visitor x)\n    (vector? x) (visit-vector visitor x)\n    (record? x) (visit-record visitor x)\n    (map? x) (visit-map visitor x)\n    (set? x) (visit-set visitor x)\n    (tagged-literal? x) (visit-tagged visitor x)\n    (var? x) (visit-var visitor x)\n    (util/regexp? x) (visit-pattern visitor x)\n    :else (visit-unknown visitor x)))\n\n(defn value-meta [x]\n  (when (util/value-obj? x)\n    (meta x)))\n\n(defn visit [visitor x]\n  (if-let [m (value-meta x)]\n    (visit-meta visitor m x)\n    (visit* visitor x)))\n"]}