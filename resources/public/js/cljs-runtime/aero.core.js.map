{"version":3,"sources":["aero/core.cljc"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k28288","else__4383__auto__","G__28292","cljs.core/Keyword","delegate","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__28293","vec__28294","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__28287","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this28289","other28290","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__28297","cljs.core/keyword-identical?","expr__28298","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","aero.core/Deferred","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__28291","extmap__4419__auto__","G__28300","cljs.core/record?","aero.core/->Deferred","aero.core/map->Deferred","js/aero","js/aero.core","js/aero.core.reader","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__28304","cljs.core/MultiFn","cljs.core.symbol","aero.core/reader","opts","tag","value","_","cljs.tools.reader/*data-readers*","fexpr__28305","cljs.tools.reader/default-data-readers","fexpr__28306","cljs.core.ex_info","goog.string/format","aero.core/get-env","s","goog.object/get","js/process.env","vec__28307","seq__28308","first__28309","cljs.core/first","cljs.core/next","fmt","args","cljs.core.apply","p1__28301#","cljs.core.map","js/parseInt","js/parseFloat","cljs.core.keyword","p__28310","map__28311","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","resolver","source","G__28313","G__28314","aero.core/read-config","cljs.core/map?","cljs.core/str","G__28315","cljs.tools.reader.edn.read_string","values","cljs.core/merge","aero.core/adaptive-resolver","include","fl","js/module$node_modules$path_browserify$index.isAbsolute","js/module$node_modules$path_browserify$index.join","js/shadow$empty.existsSync","cljs.tools.reader.reader_types.source_logging_push_back_reader","cljs.core.pr_str","aero.core/default-opts","aero.core/realize-deferreds","config","aero.impl.walk/postwalk","x","cljs.core/deref","aero.core/ref-meta-to-tagged-literal","v","cljs.core/tagged-literal?","cljs.core/tagged-literal","G__28316","cljs.core/meta","aero.core/read-pr-into-tagged-literal","pr","cljs.tools.reader.edn.read","p__28317","vec__28318","p1__28302#","k","cljs.core.merge","aero.core/read-config-into-tagged-literal","cljs.tools.reader.reader-types/source-logging-reader?","js/shadow$empty.readFileSync","aero.core/rewrap","tl","aero.alpha.core/eval-tagged-literal","env","ks","map__28322","incomplete?","expansion","aero.alpha.core/expand","cljs.core.update","p1__28303#","map__28324","incomplete","or__4126__auto__","cljs.core/pop","aero.alpha.core/expand-case","p__28326","map__28327","hostname","js/module$node_modules$os_browserify$browser.hostname","p__28329","map__28330","user","map__28332","aero.alpha.core/expand-scalar-repeatedly","G__28337","vec__28338","seq__28339","first__28340","vec__28346","seq__28347","first__28348","xs","idx","map__28349","cljs.core.conj","cljs.core/cons","cljs.core/not","aero.core/assoc-in-kv-seq","vec__28351","seq__28352","first__28353","steps","cljs.core/with-meta","this","queue","map__28354","form","aero.alpha.core/kv-seq","aero.alpha.core/reassemble","p__28356","vec__28357","stepk","stepv","kv","cljs.core.not_EQ_","cljs.core/rest","G__28360","G__28361","G__28362","aero.core/dissoc-in-kv-seq","vec__28363","seq__28364","first__28365","cljs.core.filter","p__28366","vec__28367","map__28370","p__28372","vec__28373","G__28376","G__28377","aero.core/resolve-tagged-literals","wrapped-config","map__28378","attempts","map__28383","*out*-orig-val__28385","*out*-temp-val__28386","cljs.core/*out*","cljs.core.println","cljs.core/last","var_args","G__28389","js/Error","given-opts","aero.core.read_config"],"sourcesContent":[";; Copyright \u00a9 2015-2017, JUXT LTD.\n\n(ns aero.core\n  (:require\n    [aero.alpha.core :refer\n     [expand expand-scalar-repeatedly expand-case eval-tagged-literal\n      reassemble kv-seq]]\n    [aero.impl.walk :refer [postwalk]]\n    #?@(:clj [[clojure.edn :as edn]\n              [aero.impl.macro :as macro]]\n        :cljs [[cljs.tools.reader.edn :as edn]\n               [cljs.tools.reader :refer [default-data-readers *data-readers*]]\n               [cljs.tools.reader.reader-types\n                :refer [source-logging-push-back-reader]\n                :as tools.reader.reader-types]])\n    #?@(:clj [[clojure.java.io :as io]]\n        :cljs [[goog.string :as gstring]\n               goog.string.format\n               [goog.object :as gobj]\n               [\"fs\" :as fs]\n               [\"path\" :as path] [\"os\" :as os]]))\n  #?(:clj (:import (java.io StringReader)))\n  #?(:cljs (:require-macros [aero.impl.macro :as macro])))\n\n(defrecord Deferred [delegate])\n\n(macro/usetime\n(declare read-config)\n\n(defmulti reader (fn [opts tag value] tag))\n\n(defmethod reader :default\n  [_ tag value]\n  (cond\n    ;; Given tagification, we now must check data-readers\n    (contains? *data-readers* tag)\n    ((get *data-readers* tag) value)\n\n    (contains? default-data-readers tag)\n    ((get default-data-readers tag) value)\n    :else\n    (throw (ex-info (#?(:clj format :cljs gstring/format) \"No reader for tag %s\" tag) {:tag tag :value value}))))\n\n(defn- get-env [s]\n  #?(:clj (System/getenv (str s)))\n  #?(:cljs (gobj/get js/process.env s)))\n\n(defmethod reader 'env\n  [opts tag value]\n  (get-env value))\n\n(defmethod reader 'envf\n  [opts tag value]\n  (let [[fmt & args] value]\n    (apply #?(:clj format :cljs gstring/format) fmt\n           (map #(str (get-env (str %))) args))))\n\n(defmethod reader 'prop\n   [opts tag value]\n   #?(:clj (System/getProperty (str value))\n      :cljs nil))\n\n(defmethod reader 'long\n  [opts tag value]\n  #?(:clj (Long/parseLong (str value)))\n  #?(:cljs (js/parseInt (str value))))\n\n(defmethod reader 'double\n  [opts tag value]\n  #?(:clj (Double/parseDouble (str value)))\n  #?(:cljs (js/parseFloat (str value))))\n\n(defmethod reader 'keyword\n  [opts tag value]\n  (if (keyword? value)\n    value\n    (keyword (str value))))\n\n(defmethod reader 'boolean\n  [opts tag value]\n  #?(:clj (Boolean/parseBoolean (str value)))\n  #?(:cljs (= \"true\" (.toLowerCase (str value)))))\n\n(defmethod reader 'include\n  [{:keys [resolver source] :as opts} tag value]\n  (read-config\n    (if (map? resolver)\n      (get resolver value)\n      (resolver source value))\n    opts))\n\n(defmethod reader 'join\n  [opts tag value]\n  (apply str value))\n\n(defmethod reader 'read-edn\n  [opts tag value]\n  (some-> value str edn/read-string))\n\n(defmethod reader 'merge\n  [opts tag values]\n  (apply merge values))\n\n#?(:clj\n   (defn relative-resolver [source include]\n     (let [fl\n           (if (.isAbsolute (io/file include))\n             (io/file include)\n             (when-let [source-file\n                        (try (io/file source)\n                             ;; Handle the case where the source isn't file compatible:\n                             (catch java.lang.IllegalArgumentException _ nil))]\n               (io/file (.getParent ^java.io.File source-file) include)))]\n       (if (and fl (.exists fl))\n         fl\n         (StringReader. (pr-str {:aero/missing-include include}))))))\n\n#?(:clj\n   (defn resource-resolver [_ include]\n     (or\n       (io/resource include)\n       (StringReader. (pr-str {:aero/missing-include include})))))\n\n#?(:clj\n   (defn root-resolver [_ include]\n     include))\n\n#?(:clj\n   (defn adaptive-resolver [source include]\n     (let [include (or (io/resource include)\n                       include)]\n       (if (string? include)\n         (relative-resolver source include)\n         include)))\n   :cljs\n   (defn adaptive-resolver [source include]\n     (let [fl (if (path/isAbsolute include)\n                include\n                (path/join source \"..\" include))]\n       (if (fs/existsSync fl)\n         fl\n         (source-logging-push-back-reader\n           (pr-str {:aero/missing-include include}))))))\n\n\n(def default-opts\n  {:profile :default\n   :resolver adaptive-resolver})\n\n;; The rationale for deferreds is to realise some values after the\n;; config has been read. This allows certain expensive operations to\n;; be performed only after #profile has had a chance to filter out all\n;; other environments. For example, a :prod profile my do some\n;; expensive decryption of secrets (which may not be cheap to run for\n;; all environments which don't need them, and probably won't be\n;; possible to decrypt, therefore you want to defer until needed).\n\n(defn- realize-deferreds\n  [config]\n  (postwalk (fn [x] (if (instance? Deferred x) @(:delegate x) x)) config))\n\n(defn- ref-meta-to-tagged-literal\n  [config]\n  (postwalk\n    (fn [v]\n      (cond\n        (tagged-literal? v)\n        (tagged-literal (:tag v) (ref-meta-to-tagged-literal (:form v)))\n\n        (contains? (meta v) :ref)\n        (tagged-literal 'ref v)\n\n        :else\n        v))\n    config))\n\n(defn- read-pr-into-tagged-literal\n  [pr]\n  (ref-meta-to-tagged-literal\n    (edn/read\n      {:eof nil\n       ;; Make a wrapper of all known readers, this permits mixing of\n       ;; post-processed tags with declared data readers\n       :readers (into\n                  {}\n                  (map (fn [[k v]] [k #(tagged-literal k %)])\n                       (merge default-data-readers *data-readers*)))\n       :default tagged-literal}\n      pr)))\n\n(defn read-config-into-tagged-literal\n  [source]\n  #?(:clj\n     (with-open [pr (-> source io/reader clojure.lang.LineNumberingPushbackReader.)]\n       (try\n         (read-pr-into-tagged-literal pr)\n         (catch Exception e\n           (let [line (.getLineNumber pr)]\n             (throw (ex-info (#?(:clj format :cljs gstring/format) \"Config error on line %s\" line) {:line line} e))))))\n     :cljs\n     (read-pr-into-tagged-literal\n       (cond\n         (tools.reader.reader-types/source-logging-reader? source)\n         source\n\n         (implements? tools.reader.reader-types/Reader source)\n         (source-logging-push-back-reader source)\n\n         :else\n         (source-logging-push-back-reader\n           (fs/readFileSync source \"utf-8\")\n           1\n           source)))))\n\n(defn- rewrap\n  [tl]\n  (fn [v]\n    (tagged-literal (:tag tl) v)))\n\n(defmethod eval-tagged-literal :default\n  [tl opts env ks]\n  (let [{:keys [:aero.core/incomplete?] :as expansion}\n        (expand (:form tl) opts env ks)]\n    (if incomplete?\n      (update expansion ::value (rewrap tl))\n      (update expansion ::value #(reader opts (:tag tl) %)))))\n\n(defmethod eval-tagged-literal 'ref\n  [tl opts env ks]\n  (let [{:keys [:aero.core/incomplete? :aero.core/env :aero.core/value\n                :aero.core/incomplete]\n         :or {env env}\n         :as expansion} (expand (:form tl) opts env ks)]\n    (if (or incomplete? (not (contains? env value)))\n      (-> expansion\n          (assoc ::incomplete? true)\n          (update ::value (rewrap tl))\n          (assoc ::incomplete (or incomplete\n                                  {::path (pop ks)\n                                   ::value tl})))\n      (assoc expansion ::value (get env value)))))\n\n(defmethod eval-tagged-literal 'profile \n  [tl opts env ks]\n  (expand-case (:profile opts) tl opts env ks))\n\n(defmethod eval-tagged-literal 'hostname\n  [tl {:keys [hostname] :as opts} env ks]\n  (expand-case (or hostname #?(:clj (env \"HOSTNAME\")\n                               :cljs (os/hostname)))\n               tl opts env ks))\n\n(defmethod eval-tagged-literal 'user\n  [tl {:keys [user] :as opts} env ks]\n  (expand-case (or user (get-env \"USER\"))\n               tl opts env ks))\n\n(defmethod eval-tagged-literal 'or\n  [tl opts env ks]\n  (let [{:keys [:aero.core/incomplete? :aero.core/value] :as expansion}\n        (expand-scalar-repeatedly (:form tl) opts env ks)]\n    (if incomplete?\n      (update expansion ::value rewrap)\n      (loop [[x & xs] value\n             idx 0]\n        (let [{:keys [:aero.core/incomplete? :aero.core/value]\n               :as expansion}\n              (expand x opts env (conj ks idx))]\n          (cond\n            ;; We skipped a value, we cannot be sure whether it will be true in the future, so return with the remainder to check (including the skipped)\n            incomplete?\n            {::value (tagged-literal (:tag tl) (cons value xs))\n             ::incomplete? true\n             ::incomplete (::incomplete expansion)}\n\n            ;; We found a value, and it's truthy, and we aren't skipped (because order), we successfully got one!\n            value\n            expansion\n\n            ;; Run out of things to check\n            (not (seq xs))\n            nil\n\n            :else\n            ;; Falsey value, but not skipped, recur with the rest to try\n            (recur xs (inc idx))))))))\n\n(defn- assoc-in-kv-seq\n  [x ks v]\n  (let [[k & ks] ks]\n    (let [steps (if (tagged-literal? x)\n                  (with-meta\n                    [[:tag (:tag x)]\n                     [:form (:form x)]]\n                    {`reassemble (fn [this queue]\n                                   (let [{:keys [tag form]} (into {} queue)]\n                                     (tagged-literal tag form)))})\n                  (kv-seq x))]\n      (reassemble\n        steps\n        (map (fn [[stepk stepv :as kv]]\n               (cond\n                 (and (not= (first ks) ::k)\n                      (= stepk k))\n                 (if (seq ks)\n                   [stepk (assoc-in-kv-seq stepv ks v)]\n                   [stepk v])\n\n                 (and (= (first ks) ::k)\n                      (= stepk k))\n                 (if (seq (rest ks))\n                   [(assoc-in-kv-seq stepk (rest ks) v) stepv]\n                   [v stepv])\n\n                 :else\n                 kv))\n             steps)))))\n\n(defn- dissoc-in-kv-seq\n  [x ks]\n  (let [[k & ks] ks]\n    (if\n      (or (not (seq ks))\n          (= [::k] ks))\n      (let [steps (kv-seq x)]\n        (reassemble\n          steps\n          (filter (fn [[stepk stepv :as kv]]\n                    (not= stepk k))\n                  steps)) )\n\n      (let [steps (if (tagged-literal? x)\n                    (with-meta\n                      [[:tag (:tag x)]\n                       [:form (:form x)]]\n                      {`reassemble (fn [this queue]\n                                     (let [{:keys [tag form]} (into {} queue)]\n                                       (tagged-literal tag form)))})\n                    (kv-seq x))]\n        (reassemble\n          steps\n          (map (fn [[stepk stepv :as kv]]\n                 (cond\n                   (and (not= (first ks) ::k)\n                        (= stepk k))\n                   (if (seq ks)\n                     [stepk (dissoc-in-kv-seq stepv ks)]\n                     [stepk stepv])\n\n                   (and (= (first ks) ::k)\n                        (= stepk k))\n                   (if (seq (rest ks))\n                     [(dissoc-in-kv-seq stepk (rest ks)) stepv]\n                     [stepk stepv])\n\n                   :else\n                   kv))\n               steps))))))\n\n(defn resolve-tagged-literals\n  [wrapped-config opts]\n  (let [{:keys [:aero.core/incomplete?\n                :aero.core/value]\n         :as expansion}\n        (loop [attempts 0\n               x {::value wrapped-config\n                  ::incomplete? true}]\n          (let [{:keys [:aero.core/incomplete]\n                 :as expansion}\n                (expand (::value x)\n                        opts\n                        (::env x {})\n                        [])]\n            (cond\n              (not (::incomplete? x))\n              expansion\n\n              (and (> attempts 0)\n                   (= (-> incomplete ::value :tag) 'ref))\n              (do\n                (binding [*out* #?(:clj *err*\n                                   :cljs *out*)]\n                  (println \"WARNING: Unable to resolve\"\n                           (str \\\" (pr-str (-> incomplete ::value)) \\\")\n                           \"at\"\n                           (pr-str (-> incomplete ::path))))\n                (recur\n                  0\n                  (if (= ::k (-> incomplete ::path last))\n                    (update expansion\n                            ::value\n                            dissoc-in-kv-seq\n                            (-> incomplete ::path))\n                    (update expansion\n                            ::value\n                            assoc-in-kv-seq\n                            (-> incomplete ::path)\n                            nil))))\n\n              (> attempts 1)\n              (throw (ex-info \"Max attempts exhausted\"\n                              {:progress x\n                               :attempts attempts}))\n\n              :else\n              (recur (if (= x expansion)\n                       (inc attempts)\n                       0)\n                     expansion))))]\n    (if incomplete?\n      (throw (ex-info \"Incomplete resolution\" expansion))\n      value)))\n\n(defn read-config\n  \"First argument is a string URL to the file. To read from the\n  current directory just put the file name. To read from the classpath\n  call clojure.java.io/resource on the string before passing it into\n  this function.\n  Optional second argument is a map that can include\n  the following keys:\n  :profile - indicates the profile to use for #profile extension\n  :user - manually set the user for the #user extension\n  :resolver - a function or map used to resolve includes.\"\n  ([source given-opts]\n   (let [opts (merge default-opts given-opts {:source source})\n         wrapped-config (read-config-into-tagged-literal source)]\n     (-> wrapped-config\n         (resolve-tagged-literals opts)\n         (realize-deferreds))))\n  ([source] (read-config source {})))\n)\n\n(macro/deftime\n  (defmacro deferred [& expr]\n    `(->Deferred (delay ~@expr))))\n"]}