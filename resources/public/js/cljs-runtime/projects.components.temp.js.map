{"version":3,"sources":["projects/components/temp.cljs"],"mappings":"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","names":["G__29519","props__26411__auto__","maybe-ref__26412__auto__","vec__29520","helix.core/extract-cljs-props","goog/DEBUG","G__29553","goog.object/set","projects.components.temp/login-page","vec__29523","cljs.core.nth","vec__29526","state","set-state","helix.hooks/use-state","app-state","actions","projects.components.state/use-app-state","set-message","authenticate","user","e","projects.components.back-end/autheticate-user","G__29541","cljs.core.assoc","p1__29515#","helix.core/get-react","obj29530","obj29532","helix.impl.props/->js","obj29534","obj29536","obj29538","obj29540","helix.impl.props/or-undefined","obj29543","obj29545","obj29547","p1__29516#","obj29550","obj29552","obj29566","obj29575","obj29577","obj29579","obj29597","obj29599","obj29601","obj29603","obj29605","obj29607","p1__29581#","obj29610","obj29612","obj29614","obj29616","p1__29582#","obj29619","obj29621","obj29623","obj29625","p1__29583#","obj29628","obj29630","G__29548","projects.components.buttons/login-project-buttons-component","G__29556","vec__29557","G__29567","projects.components.temp/projects","vec__29560","set-projects","token","projects.components.back-end/get-projects","projects.components.project-list/project-list","G__29570","vec__29571","G__29580","projects.components.temp/view-user","user-id","js/module$node_modules$react_router_dom$index.useParams","js/module$node_modules$react_router_dom$index.NavLink","G__29586","vec__29587","G__29631","projects.components.temp/register","vec__29590","vec__29593","projects.components.back-end/register-user","G__29608","G__29617","G__29626","G__29634","vec__29635","G__29638","projects.components.temp/edit-user","G__29563","helix.hooks/wrap-fx","G__29564","helix.hooks/raw-use-effect"],"sourcesContent":["(ns projects.components.temp\n  (:require [helix.core :refer [defnc $]]\n            [helix.dom :as d]\n            [\"react-router-dom\" :as rr]\n            [helix.hooks :as hooks]\n            [projects.components.back-end :refer [autheticate-user get-projects register-user]]\n            [projects.components.state :refer [use-app-state]]\n            [projects.components.project-list :refer [project-list]]\n            [projects.components.buttons :refer [login-project-buttons-component]]))\n\n\n\n(defnc login-page []\n  (let [[state set-state] (hooks/use-state {:username \"\" \n                                            :password \"\"})\n        [app-state actions] (use-app-state)        \n        set-message (:set-message actions)\n        authenticate (:authenticate actions)\n        user (:user app-state)]\n    \n  (d/div {:style {:text-align \"center\"\n                  :margin-top \"20px\"}}\n         (d/div\n          (d/form {:on-submit (fn [e]\n                                (.preventDefault e)\n                                (autheticate-user state authenticate set-message))}\n                  (d/p {:key 0}\n                       (d/label {:for \"username\"}\n                                \"Username: \")\n                       (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                                 :id \"username\"\n                                 :value (:username state)\n                                 :on-change #(set-state\n                                              (assoc state :username (.. %\n                                                                         -target\n                                                                         -value)))}))\n                  (d/p {:key 1}\n                       (d/label {:for \"password\"}\n                                \"Password: \")\n                       (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                                 :id \"password\"\n                                 :value (:password state)\n                                 :on-change #(set-state\n                                              (assoc state :password (.. %\n                                                                         -target\n                                                                         -value)))}))\n                  (d/button {:class '[bg-green-500 text-white px-1 py-1 rounded mb-2 mt-2]\n                             :type \"submit\"}\n                            \"Authenticate\")))\n          ($ login-project-buttons-component {:user user}))))\n\n(defnc projects []\n  (let [[app-state actions] (use-app-state)\n        set-projects (:set-projects actions)\n        token (:token app-state)] \n  (hooks/use-effect\n   :once\n   (get-projects set-projects token))\n    (d/div {:class \"container pt-4\"}\n           ($ project-list))))\n\n(defnc view-user []\n  (let [user-id (.. (rr/useParams)\n                  -id)]\n  (d/div\n   (d/h2 \"Welcome to view user\")\n   ($ rr/NavLink {:to (str user-id \"/edit\")}\n      (d/button {:class '[bg-green-500 text-white px-1 py-1 rounded]\n                 :style {:vertical-align \"top\"\n                         :display \"inline-block\"}}\n                \"Edit user\")))))\n\n(defnc register []\n  (let [[state set-state] (hooks/use-state {:username \"\"\n                                            :password \"\"\n                                            :email \"\"})\n        [app-state actions] (use-app-state)\n        set-message (:set-message actions)\n        user (:user app-state)]\n    (d/div {:class \"container pt-4\"}\n            (d/form {:on-submit (fn [e]\n                                  (.preventDefault e)\n                                  (register-user state set-message))}\n                    (d/p {:key 0}\n                         (d/label {:for \"username\"\n                                   :style {:margin-right \"20px\"}}\n                                  \"Username: \")\n                         (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                                   :id \"username\"\n                                   :value (:username state)\n                                   :on-change #(set-state (assoc state :username (.. %\n                                                                                     -target\n                                                                                     -value)))}))\n                    (d/p {:key 1}\n                         (d/label {:for \"password\"\n                                   :style {:margin-right \"20px\"}}\n                                  \"Password: \")\n                         (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                                   :id \"password\"\n                                   :value (:password state)\n                                   :on-change #(set-state (assoc state :password (.. %\n                                                                                     -target\n                                                                                     -value)))}))\n                    (d/p {:key 2}\n                         (d/label {:for \"email\"\n                                   :style {:margin-right \"20px\"}}\n                                  \"Email: \")\n                         (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                                   :id \"email\"\n                                   :value (:email state)\n                                   :on-change #(set-state (assoc state :email (.. %\n                                                                                  -target\n                                                                                  -value)))}))\n                    (d/button {:class '[bg-green-500 text-white px-1 py-1 rounded mb-2 mt-2]\n                               :type \"submit\"}\n                              \"Submit\"))\n              ($ login-project-buttons-component {:user user}))))\n\n\n(defnc edit-user []\n  (d/h2 \"Welcome to user edit\"))"]}