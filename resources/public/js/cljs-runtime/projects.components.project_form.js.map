{"version":3,"sources":["projects/components/project_form.cljs"],"mappings":"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","names":["G__33115","props__26411__auto__","maybe-ref__26412__auto__","vec__33116","helix.core/extract-cljs-props","map__33119","cljs.core.nth","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","goog/DEBUG","G__33132","goog.object/set","projects.components.project-form/project-display","project","G__33136","vec__33137","map__33140","G__33221","projects.components.project-form/project-edit","vec__33144","vec__33147","map__33150","state","set-state","helix.hooks/use-state","app-state","actions","projects.components.state/use-app-state","token","selected","add-project","update-project","set-project-history","set-message","G__33152","cljs.core._EQ_","js/Error","e","projects.components.back-end/update-state","projects.components.back-end/add-state","helix.core/get-react","obj33124","obj33129","obj33157","obj33164","obj33166","obj33168","helix.impl.props/or-undefined","p1__33133#","obj33171","obj33184","obj33191","obj33210","obj33220","obj33242","obj33251","obj33253","helix.impl.props/->js","obj33255","obj33263","obj33268","G__33169","cljs.core.assoc","helix.core/Fragment","projects.components.utils/next-status","G__33224","vec__33225","G__33269","projects.components.project-form/project-form","vec__33228","vec__33231","edit","set-edit","new-project","cljs.core/not","_","G__33234","helix.hooks/wrap-fx","G__33235","helix.hooks/raw-use-effect"],"sourcesContent":["(ns projects.components.project-form\n  (:require [helix.core :refer [defnc $ <>]]\n            [helix.dom :as d]\n            [helix.hooks :as hooks]\n            [projects.components.state :refer [use-app-state]]\n            [projects.components.back-end :as backend]\n            [projects.components.utils :refer [next-status]]))\n\n(defnc project-display\n  [{:keys [project]}]\n   (d/div\n    (d/p {:key 0}\n         (d/strong \"Project: \")\n         (:name project))\n    (d/p {:key 1}\n         (d/strong \"Current Status \")\n         (:status_name project))))\n\n(defnc project-edit\n  [{:keys [project]}]\n  (let [[state set-state] (hooks/use-state project)\n        [app-state actions] (use-app-state)\n        token (:token app-state)\n        selected (:selected app-state)\n        {:keys [add-project update-project set-project-history set-message]} actions]\n    (case (not (= (:id state) (:id project)))\n      true (set-state project)\n      false nil)\n    (d/form {:on-submit (fn [e]\n                          (.preventDefault e)\n                          (if (:id selected)\n                            (backend/update-state update-project set-project-history state token set-message)\n                            (backend/add-state add-project set-project-history state token set-message)))}    \n     (if (nil? (:id state))\n       (<>\n        (d/p {:key 0}\n             (d/label {:for \"name\"}\n                      \"New Project: \")\n             (d/input {:class '[shadow border rounded py-2 px-3 mb-3]\n                       :id \"name\"\n                       :value (:name state)\n                       :on-change #(set-state\n                                    (assoc state :name (.. %\n                                                           -target\n                                                           -value)))}))\n        (d/p {:key 1}\n             (d/strong \"Status: \")\n             \"Initiated\"))\n       (<>\n        (d/p {:key 0}\n             (d/strong \"Project: \")\n             (:name state))\n        (d/p {:key 1}\n             (d/strong \"Current Status: \")\n             (:status_name state))\n        (d/p {:key 2}\n             (d/strong \"Update Status to: \")\n             (next-status {:project state}))))\n     (d/button {:class '[bg-green-500 text-white px-1 py-1 rounded mb-2 mt-2]\n                :type \"submit\"}\n               \"Submit\"))))\n\n(defnc project-form []\n  (let [[edit set-edit] (hooks/use-state false)\n        [state actions] (use-app-state)\n        new-project (:new-project actions)\n        project (:selected state)]\n    (hooks/use-effect\n     [project]\n     (if (not (:id project))\n       (set-edit true)\n       (set-edit false)))\n    (d/div\n     (d/div {:class '[mb-2 mt-2]}\n            (d/button {:class '[bg-blue-500 text-white px-1 py-1 rounded]\n                       :style {:margin-right \"20px\"}\n                       :on-click (fn [_]\n                                   (new-project)\n                                   (set-edit true))}\n                      \"New Project\")\n            (d/button {:class '[bg-blue-500 text-white px-1 py-1 rounded]\n                       :on-click #(set-edit true)}\n                      \"Edit Project\"))\n     (if (nil? project)\n       (d/p \"\")\n       (if edit\n         ($ project-edit {:project project})\n         ($ project-display {:project project}))))))"]}