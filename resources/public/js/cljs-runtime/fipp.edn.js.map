{"version":3,"sources":["fipp/edn.cljc"],"mappings":"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","names":["p__32153","map__32154","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","fipp.edn/pretty-coll","print-level","print-length","printer","open","xs","sep","close","f","G__32156","cljs.core.update","cljs.core/dec","xform","cljs.core.comp","cljs.core.take","cljs.core/identity","p1__32152#","cljs.core.map","cljs.core.interpose","ys","or__4126__auto__","cljs.core.sequence","ellipsis","and__4115__auto__","cljs.core/seq","cljs.core.drop","this__4380__auto__","k__4381__auto__","this__4382__auto__","k32158","else__4383__auto__","G__32162","cljs.core/Keyword","symbols","print-meta","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__32163","vec__32164","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__32157","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","p__32170","map__32171","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this32159","other32160","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__32181","cljs.core/keyword-identical?","expr__32182","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","fipp.edn/EdnPrinter","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__32161","extmap__4419__auto__","G__32184","cljs.core/record?","fipp.edn/->EdnPrinter","fipp.edn/map->EdnPrinter","this","x","fipp.visit/visit","fipp.ednize/edn","*print-readably*-orig-val__32179","*print-readably*-temp-val__32180","cljs.core/*print-readably*","cljs.core.pr_str","*print-readably*-orig-val__32177","*print-readably*-temp-val__32178","*print-dup*-orig-val__32167","*print-dup*-temp-val__32168","cljs.core/*print-dup*","temp__5733__auto__","pretty","G__32169","cljs.core/first","p__32173","vec__32174","k","v","tag","form","cljs.core/meta","cljs.core/coll?","m","fipp.visit/visit*","fipp.ednize/record->tagged","var_args","G__32186","fipp.edn/pretty","js/Error","fipp.edn.pretty","options","defaults","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core.merge","*print-meta*-orig-val__32187","*print-meta*-temp-val__32188","G__32190","fipp.edn/pprint","fipp.edn.pprint","fipp.engine.pprint_document"],"sourcesContent":["(ns fipp.edn\n  \"Provides a pretty document serializer and pprint fn for Clojure/EDN forms.\n  See fipp.clojure for pretty printing Clojure code.\"\n  (:require [clojure.string :as str]\n            [fipp.ednize :refer [edn record->tagged]]\n            [fipp.visit :refer [visit visit*]]\n            [fipp.engine :refer (pprint-document)]))\n\n(defn pretty-coll [{:keys [print-level print-length] :as printer}\n                   open xs sep close f]\n  (let [printer (cond-> printer print-level (update :print-level dec))\n        xform (comp (if print-length (take print-length) identity)\n                    (map #(f printer %))\n                    (interpose sep))\n        ys (if (pos? (or print-level 1))\n             (sequence xform xs)\n             \"#\")\n        ellipsis (when (and print-length (seq (drop print-length xs)))\n                   [:span sep \"...\"])]\n    [:group open [:align ys ellipsis] close]))\n\n(defrecord EdnPrinter [symbols print-meta print-length print-level]\n\n  fipp.visit/IVisitor\n\n\n  (visit-unknown [this x]\n    (visit this (edn x)))\n\n\n  (visit-nil [this]\n    [:text \"nil\"])\n\n  (visit-boolean [this x]\n    [:text (str x)])\n\n  (visit-string [this x]\n    [:text (binding [*print-readably* true]\n             (pr-str x))])\n\n  (visit-character [this x]\n    [:text (binding [*print-readably* true]\n             (pr-str x))])\n\n  (visit-symbol [this x]\n    [:text (str x)])\n\n  (visit-keyword [this x]\n    [:text (str x)])\n\n  (visit-number [this x]\n    (binding [*print-dup* false]\n      [:text (pr-str x)]))\n\n  (visit-seq [this x]\n    (if-let [pretty (symbols (first x))]\n      (pretty this x)\n      (pretty-coll this \"(\" x :line \")\" visit)))\n\n  (visit-vector [this x]\n    (pretty-coll this \"[\" x :line \"]\" visit))\n\n  (visit-map [this x]\n    (pretty-coll this \"{\" x [:span \",\" :line] \"}\"\n      (fn [printer [k v]]\n        [:span (visit printer k) \" \" (visit printer v)])))\n\n  (visit-set [this x]\n    (pretty-coll this \"#{\" x :line \"}\" visit))\n\n  (visit-tagged [this {:keys [tag form]}]\n    [:group \"#\" (str tag)\n            (when (or (and print-meta (meta form))\n                      (not (coll? form)))\n              \" \")\n            (visit this form)])\n\n\n  (visit-meta [this m x]\n    (if print-meta\n      [:align [:span \"^\" (visit this m)] :line (visit* this x)]\n      (visit* this x)))\n\n  (visit-var [this x]\n    [:text (str x)])\n\n  (visit-pattern [this x]\n    [:text (pr-str x)])\n\n  (visit-record [this x]\n    (visit this (record->tagged x)))\n\n  )\n\n(defn pretty\n  ([x] (pretty x {}))\n  ([x options]\n   (let [defaults {:symbols {}\n                   :print-length *print-length*\n                   :print-level *print-level*\n                   :print-meta *print-meta*}\n         printer (map->EdnPrinter (merge defaults options))]\n     (binding [*print-meta* false]\n       (visit printer x)))))\n\n(defn pprint\n  ([x] (pprint x {}))\n  ([x options]\n   (-> (pretty x options)\n       (pprint-document options))))\n\n#?(:clj\n   (defmacro dbg [x]\n     (let [{:keys [line]} (meta &form)\n           source (str/join \":\" (filter some? [*file* line]))]\n       `(let [y# ~x]\n          (binding [*out* *err*]\n            (pprint-document\n              [:group [:group ~(when (seq source)\n                                 [:span source :line])\n                       '~(pretty x)\n                       :line \"=>\"]\n               :line (pretty y#)]\n              {}))\n          y#))))\n"]}