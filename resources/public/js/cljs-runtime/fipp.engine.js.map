{"version":3,"sources":["fipp/engine.cljc"],"mappings":"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","names":["js/fipp","js/fipp.engine","js/fipp.engine.serialize-node","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__32052","cljs.core/MultiFn","cljs.core.symbol","fipp.engine/serialize-node","cljs.core/first","fipp.engine/serialize","doc","cljs.core/seq?","cljs.core.mapcat","cljs.core/Keyword","cljs.core/vector?","cljs.core.ex_info","p__32053","vec__32054","seq__32055","cljs.core/seq","first__32056","cljs.core/next","_","text","cljs.core.apply","cljs.core/str","p__32060","vec__32061","seq__32062","first__32063","p__32064","vec__32065","cljs.core.nth","js/Error","p__32068","vec__32069","seq__32070","first__32071","children","p__32073","vec__32074","inline","terminate","or__4126__auto__","p__32077","vec__32078","seq__32079","first__32080","cljs.core.concat","p__32081","vec__32082","seq__32083","first__32084","args","vec__32085","seq__32086","first__32087","offset","cljs.core/cons","p__32088","vec__32089","seq__32090","first__32091","vec__32092","seq__32093","first__32094","fipp.engine/annotate-rights","rf","pos","cljs.core/volatile!","res","node","delta","G__32095","cljs.core/count","p","G__32096","G__32097","cljs.core.assoc","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","fipp.engine/update-right","seq32101","G__32102","G__32103","self__4723__auto__","deque","f","fipp.deque/conjr","cljs.core/pop","cljs.core/peek","p__32106","map__32107","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","fipp.engine/annotate-begins","width","options","bufs","fipp.deque/empty","p__32109","map__32110","op","right","cljs.core/deref","buffers","cljs.core/empty?","cljs.core._EQ_","position*","buffer","cljs.core/vreset!","fipp.deque/create","buffers*","begin","nodes","fipp.deque/conjlr","cljs.core.reduce","fipp.engine.update_right","cljs.core/update-in","fipp.deque/concat","buffers**","fipp.deque/popl","res*","p__32112","map__32113","fipp.engine/format-nodes","fits","length","tab-stops","column","p__32115","map__32116","indent","format-text","G__32118","G__32119","cljs.core.repeat","G__32126","G__32127","G__32128","cljs.core.conj","x__4214__auto__","y__4215__auto__","fipp.engine/print-fns","map__32130","print-fn","cljs.core/*print-fn*","*print-fn*-orig-val__32132","*print-fn*-temp-val__32133","cljs.core/println","G__32135","fipp.engine/pprint-document","document","fipp.engine.pprint_document","map__32136","cljs.core.merge","print","println","cljs.core.eduction","cljs.core/run!"],"sourcesContent":["(ns fipp.engine\n  \"See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing\"\n  (:require [fipp.deque :as deque])\n  #?(:clj (:import (java.io Writer))))\n\n\n;;; Serialize document into a stream\n\n(defmulti serialize-node first)\n\n(defn serialize [doc]\n  (cond\n    (nil? doc) nil\n    (seq? doc) (mapcat serialize doc)\n    (string? doc) [{:op :text, :text doc}]\n    (keyword? doc) (serialize-node [doc])\n    (vector? doc) (serialize-node doc)\n    :else (throw (ex-info \"Unexpected class for doc node\" {:node doc}))))\n\n;; Primitives\n;; See doc/primitives.md for details.\n\n(defmethod serialize-node :text [[_ & text]]\n  [{:op :text, :text (apply str text)}])\n\n(defmethod serialize-node :pass [[_ & text]]\n  [{:op :pass, :text (apply str text)}])\n\n(defmethod serialize-node :escaped [[_ text]]\n  (assert (string? text))\n  [{:op :escaped, :text text}])\n\n(defmethod serialize-node :span [[_ & children]]\n  (serialize children))\n\n(defmethod serialize-node :line [[_ inline terminate]]\n  (let [inline (or inline \" \")\n        terminate (or terminate \"\")]\n    (assert (string? inline))\n    (assert (string? terminate))\n    [{:op :line, :inline inline, :terminate terminate}]))\n\n(defmethod serialize-node :break [& _]\n  [{:op :break}])\n\n(defmethod serialize-node :group [[_ & children]]\n  (concat [{:op :begin}] (serialize children) [{:op :end}]))\n\n(defmethod serialize-node :nest [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                              args\n                              (cons 2 args))]\n    (concat [{:op :nest, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n(defmethod serialize-node :align [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                             args\n                             (cons 0 args))]\n    (concat [{:op :align, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n\n\n(defn annotate-rights\n  \"A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.\"\n  [rf]\n  (let [pos (volatile! 0)]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res node]\n       (let [delta (case (:op node)\n                     :text (count (:text node))\n                     :line (count (:inline node))\n                     :escaped 1\n                     0)\n             p (vswap! pos + delta)]\n         (rf res (assoc node :right p)))))))\n\n\n\n(defn update-right [deque f & args]\n  (deque/conjr (pop deque) (apply f (peek deque) args)))\n\n(defn annotate-begins\n  \"Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [pos (volatile! 0)\n          bufs (volatile! deque/empty)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [buffers @bufs]\n           (if (empty? buffers)\n             (if (= op :begin)\n               ;; Buffer groups\n               (let [position* (+ right width)\n                     buffer {:position position* :nodes deque/empty}]\n                 (vreset! pos position*)\n                 (vreset! bufs (deque/create buffer))\n                 res)\n               ;; Emit unbuffered\n               (rf res node))\n             (if (= op :end)\n               ;; Pop buffer\n               (let [buffer (peek buffers)\n                     buffers* (pop buffers)\n                     begin {:op :begin :right right}\n                     nodes (deque/conjlr begin (:nodes buffer) node)]\n                 (if (empty? buffers*)\n                   (do\n                     (vreset! pos 0)\n                     (vreset! bufs deque/empty)\n                     (reduce rf res nodes))\n                   (do\n                     (assert (vector? buffers*))\n                     (assert (vector? nodes))\n                     (vreset! bufs (update-right buffers* update-in [:nodes]\n                                                 deque/concat nodes))\n                     res)))\n               ;; Pruning lookahead\n               (loop [buffers* (if (= op :begin)\n                                 (deque/conjr buffers\n                                              {:position (+ right width)\n                                               :nodes deque/empty})\n                                 (update-right buffers update-in [:nodes]\n                                               deque/conjr node))\n                      res res]\n                 (if (and (<= right @pos) (<= (count buffers*) width))\n                   ;; Not too far\n                   (do (vreset! bufs buffers*)\n                       res)\n                   ;; Too far\n                   (let [buffer (first buffers*)\n                         buffers** (deque/popl buffers*)\n                         begin {:op :begin, :right :too-far}\n                         res* (rf res begin)\n                         res* (reduce rf res* (:nodes buffer))]\n                     (if (empty? buffers**)\n                       ;; Root buffered group\n                       (do\n                         (vreset! pos 0)\n                         (vreset! bufs deque/empty)\n                         res*)\n                       ;; Interior group\n                       (do\n                         (vreset! pos (:position (first buffers**)))\n                         (recur buffers** res*))))))\n            ))))))))\n\n\n(defn format-nodes\n  \"Given printing options, returns a transducer which produces the fully\n  laid-out strings.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [fits (volatile! 0)\n          length (volatile! width)\n          tab-stops (volatile! '(0)) ; Technically, an unbounded stack...\n          column (volatile! 0)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [indent (peek @tab-stops)\n               format-text (fn [text width]\n                             (let [res* (if (zero? @column)\n                                          (do (vswap! column + indent)\n                                              (rf res (apply str (repeat indent \\space))))\n                                          res)]\n                               (vswap! column + width)\n                               (rf res* text)))]\n           (case op\n             :text\n               (let [text (:text node)]\n                 (format-text text (count text)))\n\n             :escaped\n               (format-text (:text node) 1)\n\n             :pass\n               (format-text (:text node) 0)\n\n             :line\n               (if (zero? @fits)\n                 (do\n                   (vreset! length (- (+ right width) indent))\n                   (vreset! column 0)\n                   (rf res (str (:terminate node) \"\\n\")))\n                 (let [inline (:inline node)]\n                   (vswap! column + (count inline))\n                   (rf res inline)))\n             :break\n               (do\n                 (vreset! length (- (+ right width) indent))\n                 (vreset! column 0)\n                 (rf res \"\\n\"))\n             :nest\n               (do (vswap! tab-stops conj (+ indent (:offset node)))\n                   res)\n             :align\n               (do (vswap! tab-stops conj (+ @column (:offset node)))\n                   res)\n             :outdent\n               (do (vswap! tab-stops pop)\n                   res)\n             :begin\n               (do (vreset! fits (cond\n                                   (pos? @fits) (inc @fits)\n                                   (= right :too-far) 0\n                                   (<= right @length) 1\n                                   :else 0))\n                   res)\n             :end\n               (do (vreset! fits (max 0 (dec @fits)))\n                   res)\n             (throw (ex-info \"Unexpected node op\" {:node node}))))\n         )))))\n\n\n(defn print-fns\n  [options]\n  #?(:clj (let [{:keys [^Writer writer] :or {writer *out*}} options]\n            {:print #(.write writer ^String %)\n             :println (fn []\n                        (binding [*out* writer]\n                          (println)))})\n     :cljs (let [{:keys [print-fn] :or {print-fn *print-fn*}} options]\n             {:print print-fn\n              :println (fn []\n                         (binding [*print-fn* print-fn]\n                           (println)))})))\n\n\n(defn pprint-document\n  ([document]\n   (pprint-document document {}))\n  ([document options]\n   (let [options (merge {:width 70} options)\n         {:keys [print println]} (print-fns options)]\n     (->> (serialize document)\n          (eduction\n            annotate-rights\n            (annotate-begins options)\n            (format-nodes options))\n          (run! print))\n     (println))))\n\n\n(comment\n\n  (defn dbg [x]\n    (println \"DBG:\")\n    (clojure.pprint/pprint x)\n    (println \"----\")\n    x)\n\n  (serialize \"apple\")\n  (serialize [:text \"apple\" \"ball\"])\n  (serialize [:span \"apple\" [:group \"ball\" :line \"cat\"]])\n  (serialize [:span \"apple\" [:line \",\"] \"ball\"])\n\n  (def doc1 [:group \"A\" :line [:group \"B\" :line \"C\"]])\n  (def doc2 [:group \"A\" :line [:nest 2 \"B\" :line \"C\"] :line \"D\"])\n  (def doc3 [:group \"A\" :line\n             [:nest 2 \"B-XYZ\" [:align -3 :line \"C\"]] :line \"D\"])\n\n  (serialize doc1)\n\n  (let [options {:width 3}]\n    (->> doc3\n         serialize\n         (into [] (comp\n                    annotate-rights\n                    (annotate-begins options)\n                    (format-nodes options)\n                    ))\n         ;(run! print)\n         clojure.pprint/pprint\n         )\n    ;nil\n    )\n\n  ;; test of :pass op\n  (do\n    (pprint-document\n      [:group \"AB\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group \"<AB>\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group [:pass \"<\"] \"AB\" [:pass \">\"] :line \"B\" :line \"C\"]\n      {:width 6}))\n\n  (def ex1\n    [:group \"[\"\n        [:nest 2\n            [:line \"\"] \"0,\"\n            :line \"1,\"\n            :line \"2,\"\n            :line \"3\"\n            [:line \"\"]]\n        \"]\"])\n\n  (pprint-document ex1 {:width 20})\n  (pprint-document ex1 {:width 6})\n\n  (def ex2\n    [:span \"[\"\n        [:align\n            [:group [:line \"\"]] \"0,\"\n            [:group :line] \"1,\"\n            [:group :line] \"2,\"\n            [:group :line] \"3\"]\n        \"]\"])\n\n  (pprint-document ex2 {:width 20})\n  (pprint-document ex2 {:width 6})\n\n)\n"]}