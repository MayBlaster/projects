{"version":3,"sources":["fipp/ednize.cljs"],"mappings":"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","names":["fipp$ednize$IEdn$_edn$dyn","x__4428__auto__","m__4429__auto__","fipp.ednize/-edn","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","fipp.ednize/IEdn","x","fipp.ednize/IOverride","fipp.ednize/override?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","fipp.ednize/edn","cljs.core/object?","cljs.core/tagged-literal","cljs.core.into","iter__4529__auto__","s__31604","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__31606","cljs.core/chunk-buffer","i__31605","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31603","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","k","cljs.core/js-keys","cljs.core.keyword","cljs.core/array?","cljs.core/vec","cljs.core/IDeref","pending?","cljs.core/IPending","cljs.core/realized?","val","cljs.core/deref","status","cljs.core/type","cljs.core.pr_str","cljs.core.symbol","js/Date","normalize","n","len","ns","fipp.util/edn?","cljs.core/UUID","cljs.core/ExceptionInfo","cljs.core.merge","cljs.core/ex-message","cljs.core/ex-data","cause","cljs.core/ex-cause","fipp.ednize/record->tagged","cljs.core.apply","cljs.core/symbol","clojure.string.split","cljs.core/chunk-first"],"sourcesContent":["(ns fipp.ednize\n  (:require [clojure.string :as s]\n            [fipp.util :refer [edn?]]))\n\n(defprotocol IEdn\n  \"Perform a shallow conversion to an Edn data structure.\"\n  (-edn [x]))\n\n(defprotocol IOverride\n  \"Mark object as preferring its custom IEdn behavior.\")\n\n(defn override? [x]\n  (satisfies? IEdn x))\n\n;;TODO Automated test cases for all of these!\n;;XXX Usages of type/pr-str seem wrong...\n\n(defn edn [x]\n  (cond\n\n    (override? x)\n    (-edn x)\n\n    (object? x)\n    (tagged-literal 'js\n      (into {} (for [k (js-keys x)]\n                 [(keyword k) (aget x k)])))\n\n    (array? x)\n    (tagged-literal 'js (vec x))\n\n    (satisfies? IDeref x)\n    (let [pending? (and (satisfies? IPending x)\n                        (not (realized? x)))\n          ;; Can this throw and yield status :failed like in JVM Clojure?\n          val (when-not pending?\n                @x)\n          status (if pending?\n                   :pending\n                   :ready)]\n      (tagged-literal 'object\n        [(-> x type pr-str symbol)\n         {:status status :val val}]))\n\n    (instance? js/Date x)\n    (tagged-literal 'inst\n      (let [normalize (fn [n len]\n                        (loop [ns (str n)]\n                          (if (< (count ns) len)\n                            (recur (str \"0\" ns))\n                            ns)))]\n        (str (.getUTCFullYear x)                   \"-\"\n             (normalize (inc (.getUTCMonth x)) 2)  \"-\"\n             (normalize (.getUTCDate x) 2)         \"T\"\n             (normalize (.getUTCHours x) 2)        \":\"\n             (normalize (.getUTCMinutes x) 2)      \":\"\n             (normalize (.getUTCSeconds x) 2)      \".\"\n             (normalize (.getUTCMilliseconds x) 3) \"-\"\n             \"00:00\")))\n\n    (satisfies? IEdn x)\n    (-edn x)\n\n    (edn? x)\n    x\n\n    :else\n    ;;TODO Something better.\n    (tagged-literal 'object [(-> x type pr-str symbol)])\n\n    ))\n\n(extend-protocol IEdn\n\n  UUID\n  (-edn [x]\n    (tagged-literal 'uuid (str x)))\n\n  ExceptionInfo\n  (-edn [x]\n    (tagged-literal 'ExceptionInfo\n      (merge {:message (ex-message x)\n              :data (ex-data x)}\n             (when-let [cause (ex-cause x)]\n               {:cause cause}))))\n\n  )\n\n(defn record->tagged [x]\n  (tagged-literal (apply symbol (s/split (-> x type pr-str) #\"/\" 2))\n                  (into {} x)))\n"]}