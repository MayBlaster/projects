{"version":3,"sources":["helix/core.cljs"],"mappings":"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","names":["js/Symbol","cljs.core/PROTOCOL_SENTINEL","sym","writer","_","cljs.core/-write","helix.core/Fragment","js/module$node_modules$react$index.Fragment","helix.core/Suspense","js/module$node_modules$react$index.Suspense","helix.core/create-element","js/module$node_modules$react$index.createElement","helix.core/create-context","js/module$node_modules$react$index.createContext","helix.core/get-react","js/module$node_modules$react$index","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","helix.core/$","seq26612","G__26613","cljs.core/first","cljs.core/next","self__4723__auto__","type","args","?p","?c","cljs.core/rest","native?","or__4126__auto__","cljs.core/Keyword","cljs.core/meta","type'","cljs.core/name","cljs.core/map?","cljs.core.apply","helix.impl.props._native_props","helix.impl.props._props","helix.core/$$","helix$core$IExtractType$_type$dyn","x__4428__auto__","m__4429__auto__","helix.core/-type","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","helix.core/IExtractType","factory","helix.core/type","f","helix.core/factory","x26614","helix.core/cljs-factory","x26615","helix.core/extract-cljs-props","o","goog/DEBUG","cljs.core.ex_info","temp__5733__auto__","props","goog.object/get","cljs.core.assoc","cljs_bean.core.bean","G__26617","helix.core/memo","js/Error","component","js/module$node_modules$react$index.memo","compare","o'","G__26618","G__26619","helix.core/create-component","spec","statics","render","render'","this","G__26620","G__26621","G__26622","goog.object/set","helix.impl.classes/createComponent","js/module$node_modules$react$index.Component","helix.core/register!","id","js/window","helix.core/signature!"],"sourcesContent":["(ns helix.core\n  (:refer-clojure :exclude [type])\n  (:require [goog.object :as gobj]\n            [helix.impl.props :as impl.props]\n            [helix.impl.classes :as helix.class]\n            [cljs-bean.core :as bean]\n            [\"react\" :as react])\n  (:require-macros [helix.core]))\n\n\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    js/Symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n\n(def Fragment react/Fragment)\n\n\n(def Suspense react/Suspense)\n\n\n(def create-element react/createElement)\n\n\n(def create-context react/createContext)\n\n\n;; this is to enable calling `(.createElement (get-react))` without doing\n;; a dynamic arity dispatch. See https://github.com/Lokeh/helix/issues/20\n(defn ^js/React get-react [] react)\n\n\n(defn $\n  \"Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \\\"child1\\\"\n   ($ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n  [type & args]\n  (let [?p (first args)\n        ?c (rest args)\n        native? (or (keyword? type)\n                    (string? type)\n                    (:native (meta type)))\n        type' (if (keyword? type)\n                (name type)\n                type)]\n    (if (map? ?p)\n      (apply create-element\n             type'\n             (if native?\n               (impl.props/-native-props ?p)\n               (impl.props/-props ?p))\n             ?c)\n      (apply create-element\n             type'\n             nil\n             args))))\n\n\n(def ^:deprecated $$\n  \"Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \\\"child1\\\"\n   ($$ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n $)\n\n\n(defprotocol IExtractType\n  (-type [factory] \"Extracts the underlying type from the factory function.\"))\n\n\n(defn type\n  [f]\n  (-type f))\n\n\n(defn factory\n  \"Creates a factory function for a React component\"\n  [type]\n  (-> (fn factory [& args]\n        (apply $ type args))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn cljs-factory\n  [type]\n  (-> (fn factory [& args]\n        ;; put props detection here so it's easier to detect\n        ;; slow paths in render\n        (if (map? (first args))\n          (apply react/createElement\n                 type\n                 #js {\"helix/props\" (first args)}\n                 (rest args))\n          (apply react/createElement\n                 type\n                 #js {}\n                 args)))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn extract-cljs-props\n  [o]\n  (when (and ^boolean goog/DEBUG (or (map? o) (nil? o)))\n    (throw (ex-info \"Props received were a map. This probably means you're calling your component as a function.\" {:props o})))\n  (if-let [props (gobj/get o \"helix/props\")]\n    (assoc props :children (gobj/get o \"children\"))\n    (bean/bean o)))\n\n\n(defn memo\n  \"Like React.memo, but passes props as CLJS map-likes instead of JS objects.\"\n  ([component] (react/memo component))\n  ([component compare]\n   (react/memo\n    component\n    (fn memo-compare\n      [o o']\n      (compare\n       (extract-cljs-props o)\n       (extract-cljs-props o'))))))\n\n\n\n;;\n;; -- class components\n;;\n\n\n\n(defn create-component [spec statics]\n  (let [render (.-render ^js spec)\n        render' (fn [this]\n                  (render\n                   this\n                   (extract-cljs-props (.-props ^js this))\n                   (.-state ^js this)))]\n    (gobj/set spec \"render\" render')\n    (helix.class/createComponent react/Component spec statics)))\n\n(comment\n  (def MyComponent\n    (create-component #js {:displayName \"Foo\"\n                           :constructor\n                           (fn [this]\n                             (set! (.-state this) #js {:count 3}))\n                           :render\n                           (fn [this props state]\n                             (prn props state)\n                             ($$ \"div\" (.-count (.-state this))))}\n                      nil))\n\n  (js/console.log MyComponent)\n\n  (rds/renderToString ($$ MyComponent {:foo \"baz\"})))\n\n\n;;\n;; -- React Fast Refresh\n;;\n\n\n(defn register!\n  \"Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.\"\n  [type id]\n  (when (exists? (.-$$Register$$ js/window))\n    (.$$Register$$ js/window type id)))\n\n\n(defn signature! []\n  ;; grrr `maybe` bug strikes again\n  (and (exists? (.-$$Signature$$ js/window))\n       (.$$Signature$$ js/window)))\n"]}