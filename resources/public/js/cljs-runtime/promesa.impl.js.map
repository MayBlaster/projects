{"version":3,"sources":["promesa/impl.cljc"],"mappings":"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","names":["promesa.impl/*default-promise*","js/Promise","promesa.impl/resolved","v","promesa.impl/rejected","promesa.impl/deferred","state","obj","resolve","reject","x27313","cljs.core/PROTOCOL_SENTINEL","_","promesa.impl/extend-promise!","t","p","it","f","p1__27314#","e","p1__27315#","p1__27316#","p1__27317#","p1__27318#","p1__27319#","p1__27320#","p1__27321#","p1__27322#","p1__27323#","p1__27324#","p1__27325#","p1__27326#","p1__27327#","p1__27328#","p1__27329#","executor","p1__27330#","p1__27331#","goog.object/set","promesa.protocols/IPromise","promesa.protocols/-map","promesa.protocols/-bind","promesa.protocols/-then","promesa.protocols/-mapErr","promesa.protocols/-thenErr","promesa.protocols/-handle","promesa.protocols/-finally","promesa.protocols/-promise","promesa.protocols/IPromiseFactory","js/Error","promesa.impl/promise->str","writer","opts","cljs.core/-write"],"sourcesContent":[";; Copyright (c) 2015-2019 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns ^:no-doc promesa.impl\n  \"Implementation of promise protocols.\"\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            [promesa.exec :as exec])\n  #?(:clj (:import\n           java.util.concurrent.CompletableFuture\n           java.util.concurrent.CompletionStage\n           java.util.concurrent.TimeoutException\n           java.util.concurrent.ExecutionException\n           java.util.concurrent.CompletionException\n           java.util.concurrent.Executor\n           java.util.function.Function\n           java.util.function.Supplier)))\n\n;; --- Global Constants\n\n#?(:cljs (def ^:dynamic *default-promise* js/Promise))\n\n(defn resolved\n  [v]\n  #?(:cljs (.resolve *default-promise* v)\n     :clj (CompletableFuture/completedFuture v)))\n\n(defn rejected\n  [v]\n  #?(:cljs (.reject *default-promise* v)\n     :clj (let [p (CompletableFuture.)]\n            (.completeExceptionally ^CompletableFuture p v)\n            p)))\n\n;; --- Promise Impl\n\n(defn deferred\n  []\n  #?(:clj (CompletableFuture.)\n     :cljs\n     (let [state #js {}\n           obj (new *default-promise*\n                    (fn [resolve reject]\n                      (set! (.-resolve state) resolve)\n                      (set! (.-reject state) reject)))]\n       (specify! obj\n         pt/ICompletable\n         (-resolve! [_ v]\n           (.resolve state v))\n         (-reject! [_ v]\n           (.reject state v))))))\n\n#?(:cljs\n   (defn extend-promise!\n     [t]\n     (extend-type t\n       pt/IPromiseFactory\n       (-promise [p] p)\n\n       pt/IPromise\n       (-map\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-bind\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-then\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-mapErr\n         ([it f] (.catch it #(f %)))\n         ([it f e] (.catch it #(f %))))\n       (-thenErr\n         ([it f] (.catch it #(f %)))\n         ([it f e] (.catch it #(f %))))\n       (-handle\n         ([it f] (.then it #(f % nil) #(f nil %)))\n         ([it f e] (.then it #(f % nil) #(f nil %))))\n       (-finally\n         ([it f] (.then it #(f % nil) #(f nil %)) it)\n         ([it f executor] (.then it #(f % nil) #(f nil %)) it)))))\n\n#?(:cljs\n   (extend-promise! js/Promise))\n\n;; This code allows execute `then`, `map` and all the other promise\n;; chaining functions on any object if the object is a thenable but\n;; does not inherit from js/Promise, this code will automatically\n;; coerce it to a js/Promise instance.\n\n#?(:cljs\n   (extend-type default\n     pt/IPromise\n     (-map\n       ([it f] (pt/-map (pt/-promise it) f))\n       ([it f e] (pt/-map (pt/-promise it) f e)))\n     (-bind\n       ([it f] (pt/-bind (pt/-promise it) f))\n       ([it f e] (pt/-bind (pt/-promise it) f e)))\n     (-then\n       ([it f] (pt/-then (pt/-promise it) f))\n       ([it f e] (pt/-then (pt/-promise it) f e)))\n     (-mapErr\n       ([it f] (pt/-mapErr (pt/-promise it) f))\n       ([it f e] (pt/-mapErr (pt/-promise it) f e)))\n     (-thenErr\n       ([it f] (pt/-thenErr (pt/-promise it) f))\n       ([it f e] (pt/-thenErr (pt/-promise it) f e)))\n     (-handle\n       ([it f] (pt/-handle (pt/-promise it) f))\n       ([it f e] (pt/-handle (pt/-promise it) f e)))\n     (-finally\n       ([it f] (pt/-finally (pt/-promise it) f))\n       ([it f e] (pt/-finally (pt/-promise it) f e)))))\n\n#?(:clj (def fw-identity (pu/->FunctionWrapper identity)))\n\n#?(:clj\n   (extend-protocol pt/IPromise\n     CompletionStage\n     (-map\n       ([it f]\n        (.thenApply ^CompletionStage it\n                    ^Function (pu/->FunctionWrapper f)))\n\n       ([it f executor]\n        (.thenApplyAsync ^CompletionStage it\n                         ^Function (pu/->FunctionWrapper f)\n                         ^Executor (exec/resolve-executor executor))))\n\n     (-bind\n       ([it f]\n        (.thenCompose ^CompletionStage it\n                      ^Function (pu/->FunctionWrapper f)))\n\n       ([it f executor]\n        (.thenComposeAsync ^CompletionStage it\n                           ^Function (pu/->FunctionWrapper f)\n                           ^Executor (exec/resolve-executor executor))))\n\n     (-then\n       ([it f]\n        (.thenCompose ^CompletionStage it\n                      ^Function (pu/->FunctionWrapper (comp pt/-promise f))))\n\n       ([it f executor]\n        (.thenComposeAsync ^CompletionStage it\n                           ^Function (pu/->FunctionWrapper (comp pt/-promise f))\n                           ^Executor (exec/resolve-executor executor))))\n\n     (-mapErr\n       ([it f]\n        (letfn [(handler [e]\n                  (if (instance? CompletionException e)\n                    (f (.getCause ^Exception e))\n                    (f e)))]\n          (.exceptionally ^CompletionStage it\n                          ^Function (pu/->FunctionWrapper handler))))\n\n       ([it f executor]\n        (letfn [(handler [e]\n                  (if (instance? CompletionException e)\n                    (f (.getCause ^Exception e))\n                    (f e)))]\n          ;; ONLY on JDK >= 12 it is there but in jdk<12 will throw an\n          ;; error\n          (.exceptionallyAsync ^CompletionStage it\n                               ^Function (pu/->FunctionWrapper handler)\n                               ^Executor (exec/resolve-executor executor)))))\n\n     (-thenErr\n       ([it f]\n        (letfn [(handler [v e]\n                  (if e\n                    (if (instance? CompletionException e)\n                      (pt/-promise (f (.getCause ^Exception e)))\n                      (pt/-promise (f e)))\n                    it))]\n          (as-> ^CompletionStage it $$\n            (.handle $$ ^BiFunction (pu/->BiFunctionWrapper handler))\n            (.thenCompose $$ ^Function fw-identity))))\n\n       ([it f executor]\n        (letfn [(handler [v e]\n                  (if e\n                    (if (instance? CompletionException e)\n                      (pt/-promise (f (.getCause ^Exception e)))\n                      (pt/-promise (f e)))\n                    (pt/-promise v)))]\n          (as-> ^CompletionStage it $$\n            (.handleAsync $$\n                          ^BiFunction (pu/->BiFunctionWrapper handler)\n                          ^Executor (exec/resolve-executor executor))\n            (.thenCompose $$ ^Function fw-identity)))))\n\n     (-handle\n       ([it f]\n        (as-> ^CompletionStage it $$\n          (.handle $$ ^BiFunction (pu/->BiFunctionWrapper (comp pt/-promise f)))\n          (.thenCompose $$ ^Function fw-identity)))\n\n       ([it f executor]\n        (as-> ^CompletionStage it $$\n          (.handleAsync $$\n                        ^BiFunction (pu/->BiFunctionWrapper (comp pt/-promise f))\n                        ^Executor (exec/resolve-executor executor))\n          (.thenCompose $$ ^Function fw-identity))))\n\n     (-finally\n       ([it f]\n        (.whenComplete ^CompletionStage it\n                       ^BiConsumer (pu/->BiConsumerWrapper f)))\n\n       ([it f executor]\n        (.whenCompleteAsync ^CompletionStage it\n                            ^BiConsumer (pu/->BiConsumerWrapper f)\n                            ^Executor (exec/resolve-executor executor))))\n\n\n     Object\n     (-map\n       ([it f] (pt/-map (pt/-promise it) f))\n       ([it f e] (pt/-map (pt/-promise it) f e)))\n     (-bind\n       ([it f] (pt/-bind (pt/-promise it) f))\n       ([it f e] (pt/-bind (pt/-promise it) f e)))\n     (-handle\n       ([it f] (pt/-handle (pt/-promise it) f))\n       ([it f e] (pt/-handle (pt/-promise it) f e)))\n     (-mapErr\n       ([it f] (pt/-mapErr (pt/-promise it) f))\n       ([it f e] (pt/-mapErr (pt/-promise it) f e)))\n     (-thenErr\n       ([it f] (pt/-thenErr (pt/-promise it) f))\n       ([it f e] (pt/-thenErr (pt/-promise it) f e)))\n     (-finally\n       ([it f] (pt/-finally (pt/-promise it) f))\n       ([it f e] (pt/-finally (pt/-promise it) f e)))\n\n     nil\n     (-map\n       ([it f] (pt/-map (pt/-promise it) f))\n       ([it f e] (pt/-map (pt/-promise it) f e)))\n     (-bind\n       ([it f] (pt/-bind (pt/-promise it) f))\n       ([it f e] (pt/-bind (pt/-promise it) f e)))\n     (-mapErr\n       ([it f] (pt/-mapErr (pt/-promise it) f))\n       ([it f e] (pt/-mapErr (pt/-promise it) f e)))\n     (-thenErr\n       ([it f] (pt/-thenErr (pt/-promise it) f))\n       ([it f e] (pt/-thenErr (pt/-promise it) f e)))\n     (-handle\n       ([it f] (pt/-handle (pt/-promise it) f))\n       ([it f e] (pt/-handle (pt/-promise it) f e)))\n     (-finally\n       ([it f] (pt/-finally (pt/-promise it) f))\n       ([it f e] (pt/-finally (pt/-promise it) f e)))))\n\n#?(:clj\n   (extend-type CompletableFuture\n     pt/ICancellable\n     (-cancel! [it]\n       (.cancel it true))\n     (-cancelled? [it]\n       (.isCancelled it))\n\n     pt/ICompletable\n     (-resolve! [f v] (.complete f v))\n     (-reject! [f v] (.completeExceptionally f v))\n\n     pt/IState\n     (-extract [it]\n       (try\n         (.getNow it nil)\n         (catch ExecutionException e\n           (.getCause e))\n         (catch CompletionException e\n           (.getCause e))))\n\n     (-resolved? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (.isDone it)))\n\n     (-rejected? [it]\n       (.isCompletedExceptionally it))\n\n     (-pending? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (not (.isDone it))))))\n\n;; --- Promise Factory\n\n;; This code is responsible of coercing the incoming value to a valid\n;; promise type. In some cases we will receive a valid promise object,\n;; in this case we return it as is. This is useful when you want to\n;; `then` or `map` over a plain value that can be o can not be a\n;; promise object\n\n#?(:clj\n   (extend-protocol pt/IPromiseFactory\n     CompletionStage\n     (-promise [cs] cs)\n\n     Throwable\n     (-promise [e]\n       (rejected e))\n\n     Object\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v)))\n\n   :cljs\n   (extend-protocol pt/IPromiseFactory\n     js/Error\n     (-promise [e]\n       (rejected e))\n\n     default\n     (-promise [v]\n       (resolved v))))\n\n;; --- Pretty printing\n\n(defn promise->str\n  [p]\n  \"#<Promise[~]>\")\n\n#?(:clj\n   (defmethod print-method java.util.concurrent.CompletionStage\n     [p ^java.io.Writer writer]\n     (let [status (cond\n                    (pt/-pending? p) \"pending\"\n                    (pt/-rejected? p) \"rejected\"\n                    :else \"resolved\")]\n       (.write writer ^String (format \"#object[java.util.concurrent.CompletableFuture 0x%h \\\"%s\\\"]\" (hash p) status)))))\n\n#?(:cljs\n   (extend-type js/Promise\n     IPrintWithWriter\n     (-pr-writer [p writer opts]\n       (-write writer (promise->str p)))))\n"]}