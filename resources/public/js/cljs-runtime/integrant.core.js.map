{"version":3,"sources":["integrant/core.cljc"],"mappings":"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","names":["integrant$core$RefLike$ref_key$dyn","x__4428__auto__","m__4429__auto__","integrant.core/ref-key","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","integrant.core/RefLike","r","this__4380__auto__","k__4381__auto__","this__4382__auto__","k28138","else__4383__auto__","G__28143","cljs.core/Keyword","key","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__28144","vec__28145","k__4403__auto__","cljs.core.nth","v__4404__auto__","cljs.core/PROTOCOL_SENTINEL","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__28137","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this28139","other28140","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__28149","cljs.core/keyword-identical?","expr__28150","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","integrant.core/Ref","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__28141","extmap__4419__auto__","G__28154","cljs.core/record?","integrant.core/->Ref","integrant.core/map->Ref","_","k28157","G__28161","p__28164","vec__28165","G__28156","this28158","other28159","pred__28171","expr__28172","integrant.core/RefSet","G__28160","G__28175","integrant.core/->RefSet","integrant.core/map->RefSet","integrant.core/composite-key?","keys","cljs.core/every?","cljs.core/qualified-keyword?","integrant.core/valid-config-key?","js/Error","integrant.core/ref","integrant.core/refset","integrant.core/ref?","x","integrant.core/refset?","integrant.core/reflike?","cljs.core/native-satisfies?","integrant.core/depth-search","pred?","coll","cljs.core.filter","cljs.core/tree-seq","cljs.core/coll?","js/integrant","js/integrant.core","js/integrant.core.composite-keyword","integrant.core/composite-keyword","cljs.core/memoize","kws","parts","iter__4529__auto__","s__28183","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__28185","cljs.core/chunk-buffer","i__28184","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28182","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","kw","cljs.core/namespace","cljs.core/name","prefix","clojure.string.join","composite","cljs.core.keyword","cljs.core.gensym","seq__28187","chunk__28188","count__28189","i__28190","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","cljs.core.derive","integrant.core/normalize-key","k","integrant.core/ambiguous-key-exception","config","matching-keys","cljs.core.ex_info","integrant.core/derived-from?","candidate","p1__28201#","cljs.core.isa_QMARK_","integrant.core/find-derived","m","p1__28202#","cljs.core/key","integrant.core/find-derived-1","kvs","cljs.core.map","integrant.core/find-derived-refs","v","include-refsets?","p1__28203#","cljs.core.mapcat","var_args","G__28207","integrant.core/dependency-graph","p__28208","map__28209","cljs.core.apply","cljs.core/hash-map","integrant.core.dependency_graph","cljs.core/reduce-kv","g","p1__28204#","p2__28205#","weavejester.dependency/depend","find-refs","weavejester.dependency/graph","integrant.core/key-comparator","graph","p1__28211#","p2__28212#","weavejester.dependency.topo_comparator","cljs.core/compare","integrant.core/find-keys","f","keyset","cljs.core/set","p1__28213#","clojure.set.union","cljs.core.sort","integrant.core/dependent-keys","weavejester.dependency/transitive-dependencies-set","integrant.core/reverse-dependent-keys","cljs.core/reverse","weavejester.dependency/transitive-dependents-set","integrant.core/missing-refs-exception","refs","integrant.core/ambiguous-refs","p1__28215#","integrant.core/missing-refs","p1__28216#","cljs.core.remove","integrant.core/invalid-composite-keys","cljs.core/keys","integrant.core/invalid-composite-key-exception","integrant.core/resolve-ref","resolvef","ref","vec__28217","integrant.core/resolve-refset","refset","s__28221","b__28223","i__28222","vec__28224","iter__28220","vec__28227","integrant.core/expand-key","value","p1__28230#","clojure.walk/postwalk","integrant.core/run-exception","system","completed","remaining","t","integrant.core/try-run-action","e28231","integrant.core/run-loop","integrant.core/system-origin","cljs.core/meta","cljs.core/select-keys","integrant.core/run!","cljs.core/map?","G__28232","integrant.core/reverse-run!","G__28233","integrant.core/fold","val","p1__28234#","p2__28235#","G__28236","G__28237","G__28238","integrant.core/build-exception","integrant.core/try-build-action","e28239","p__28240","vec__28241","integrant.core/build-key","assertf","v'","cljs.core.vary_meta","cljs.core/assoc-in","G__28245","integrant.core/build","integrant.core.build","relevant-keys","relevant-config","invalid-key","cljs.core.partial","cljs.core/with-meta","js/integrant.core.resolve-key","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__28246","cljs.core/MultiFn","cljs.core.symbol","integrant.core/resolve-key","integrant.core/expand","js/integrant.core.prep-key","fexpr__28247","integrant.core/prep-key","js/integrant.core.init-key","fexpr__28248","integrant.core/init-key","js/integrant.core.halt-key!","fexpr__28249","integrant.core/halt-key!","js/integrant.core.resume-key","fexpr__28250","integrant.core/resume-key","old-value","old-impl","js/integrant.core.suspend-key!","fexpr__28251","integrant.core/suspend-key!","js/integrant.core.pre-init-spec","fexpr__28252","integrant.core/pre-init-spec","integrant.core/spec-exception","spec","ed","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__28257","cljs.core/*print-newline*","*print-fn*-orig-val__28258","cljs.core/*print-fn*","*print-newline*-temp-val__28259","*print-fn*-temp-val__28260","x__4668__auto__","cljs.spec.alpha/explain-out","integrant.core/assert-pre-init-spec","cljs.spec.alpha.valid_QMARK_","cljs.spec.alpha/explain-data","G__28262","integrant.core/prep","integrant.core.prep","G__28264","integrant.core/init","integrant.core.init","G__28266","integrant.core/halt!","integrant.core.halt_BANG_","G__28267","integrant.core/missing-keys","ks","integrant.core/halt-missing-keys!","missing-keys","seq__28268","chunk__28269","count__28270","i__28271","G__28273","integrant.core/resume","integrant.core.resume","G__28274","G__28276","integrant.core/suspend!","integrant.core.suspend_BANG_","G__28277"],"sourcesContent":["(ns integrant.core\n  (:refer-clojure :exclude [ref read-string run!])\n  (:require #?(:clj [clojure.edn :as edn])\n            [clojure.walk :as walk]\n            [clojure.set :as set]\n            [clojure.spec.alpha :as s]\n            [clojure.string :as str]\n            [weavejester.dependency :as dep]))\n\n(defprotocol RefLike\n  (ref-key [r] \"Return the key of the reference.\"))\n\n(defrecord Ref    [key] RefLike (ref-key [_] key))\n(defrecord RefSet [key] RefLike (ref-key [_] key))\n\n(defn- composite-key? [keys]\n  (and (vector? keys) (every? qualified-keyword? keys)))\n\n(defn valid-config-key?\n  \"Returns true if the key is a keyword or valid composite key.\"\n  [key]\n  (or (qualified-keyword? key) (composite-key? key)))\n\n(defn ref\n  \"Create a reference to a top-level key in a config map.\"\n  [key]\n  {:pre [(valid-config-key? key)]}\n  (->Ref key))\n\n(defn refset\n  \"Create a set of references to all matching top-level keys in a config map.\"\n  [key]\n  {:pre [(valid-config-key? key)]}\n  (->RefSet key))\n\n(defn ref?\n  \"Return true if its argument is a ref.\"\n  [x]\n  (instance? Ref x))\n\n(defn refset?\n  \"Return true if its argument is a refset.\"\n  [x]\n  (instance? RefSet x))\n\n(defn reflike?\n  \"Return true if its argument is a ref or a refset.\"\n  [x]\n  (satisfies? RefLike x))\n\n(defn- depth-search [pred? coll]\n  (filter pred? (tree-seq coll? seq coll)))\n\n(defonce\n  ^{:doc \"Return a unique keyword that is derived from an ordered collection of\n  keywords. The function will return the same keyword for the same collection.\"\n    :arglists '([kws])}\n  composite-keyword\n  (memoize\n   (fn [kws]\n     (let [parts     (for [kw kws] (str (namespace kw) \".\" (name kw)))\n           prefix    (str (str/join \"+\" parts) \"_\")\n           composite (keyword \"integrant.composite\" (str (gensym prefix)))]\n       (doseq [kw kws] (derive composite kw))\n       composite))))\n\n(defn- normalize-key [k]\n  (if (vector? k) (composite-keyword k) k))\n\n(defn- ambiguous-key-exception [config key matching-keys]\n  (ex-info (str \"Ambiguous key: \" key \". Found multiple candidates: \"\n                (str/join \", \" matching-keys))\n           {:reason ::ambiguous-key\n            :config config\n            :key    key\n            :matching-keys matching-keys}))\n\n(defn derived-from?\n  \"Return true if a key is derived from candidate keyword or vector of\n  keywords.\"\n  [key candidate]\n  (let [key (normalize-key key)]\n    (if (vector? candidate)\n      (every? #(isa? key %) candidate)\n      (isa? key candidate))))\n\n(defn find-derived\n  \"Return a seq of all entries in a map, m, where the key is derived from the\n  a candidate key, k. If there are no matching keys, nil is returned. The\n  candidate key may be a keyword, or vector of keywords.\"\n  [m k]\n  (seq (filter #(or (= (key %) k) (derived-from? (key %) k)) m)))\n\n(defn find-derived-1\n  \"Return the map entry in a map, m, where the key is derived from the keyword,\n  k. If there are no matching keys, nil is returned. If there is more than one\n  matching key, an ambiguous key exception is raised.\"\n  [m k]\n  (let [kvs (find-derived m k)]\n    (when (next kvs)\n      (throw (ambiguous-key-exception m k (map key kvs))))\n    (first kvs)))\n\n(defn- find-derived-refs [config v include-refsets?]\n  (->> (depth-search (if include-refsets? reflike? ref?) v)\n       (map ref-key)\n       (mapcat #(map key (find-derived config %)))))\n\n(defn dependency-graph\n  \"Return a dependency graph of all the refs and refsets in a config. Resolves\n  derived dependencies. Takes the following options:\n\n  `:include-refsets?`\n  : whether to include refsets in the dependency graph (defaults to true)\"\n  ([config]\n   (dependency-graph config {}))\n  ([config {:keys [include-refsets?] :or {include-refsets? true}}]\n   (letfn [(find-refs [v]\n             (find-derived-refs config v include-refsets?))]\n     (reduce-kv (fn [g k v] (reduce #(dep/depend %1 k %2) g (find-refs v)))\n                (dep/graph)\n                config))))\n\n(defn key-comparator\n  \"Create a key comparator from the dependency graph of a configuration map.\n  The comparator is deterministic; it will always result in the same key\n  order.\"\n  [graph]\n  (dep/topo-comparator #(compare (str %1) (str %2)) graph))\n\n(defn- find-keys [config keys f]\n  (let [graph  (dependency-graph config {:include-refsets? false})\n        keyset (set (mapcat #(map key (find-derived config %)) keys))]\n    (->> (f graph keyset)\n         (set/union keyset)\n         (sort (key-comparator (dependency-graph config))))))\n\n(defn- dependent-keys [config keys]\n  (find-keys config keys dep/transitive-dependencies-set))\n\n(defn- reverse-dependent-keys [config keys]\n  (reverse (find-keys config keys dep/transitive-dependents-set)))\n\n#?(:clj\n   (def ^:private default-readers {'ig/ref ref, 'ig/refset refset}))\n\n#?(:clj\n   (defn read-string\n    \"Read a config from a string of edn. Refs may be denotied by tagging keywords\n     with #ig/ref.\"\n     ([s]\n      (read-string {:eof nil} s))\n     ([opts s]\n      (let [readers (merge default-readers (:readers opts {}))]\n        (edn/read-string (assoc opts :readers readers) s)))))\n\n#?(:clj\n   (defn- keyword->namespaces [kw]\n     (if-let [ns (namespace kw)]\n       [(symbol ns)\n        (symbol (str ns \".\" (name kw)))])))\n\n#?(:clj\n   (defn- key->namespaces [k]\n     (if (vector? k)\n       (mapcat keyword->namespaces k)\n       (keyword->namespaces k))))\n\n#?(:clj\n   (defn- try-require [sym]\n     (try (do (require sym) sym)\n          (catch java.io.FileNotFoundException _))))\n\n#?(:clj\n   (defn load-namespaces\n     \"Attempt to load the namespaces referenced by the keys in a configuration.\n     If a key is namespaced, both the namespace and the namespace concatenated\n     with the name will be tried. For example, if a key is :foo.bar/baz, then the\n     function will attempt to load the namespaces foo.bar and foo.bar.baz. Upon\n     completion, a list of all loaded namespaces will be returned.\"\n     ([config]\n      (load-namespaces config (keys config)))\n     ([config keys]\n      (doall (->> (dependent-keys config keys)\n                  (mapcat #(conj (ancestors %) %))\n                  (mapcat key->namespaces)\n                  (distinct)\n                  (keep try-require))))))\n\n(defn- missing-refs-exception [config refs]\n  (ex-info (str \"Missing definitions for refs: \" (str/join \", \" refs))\n           {:reason ::missing-refs\n            :config config\n            :missing-refs refs}))\n\n(defn- ambiguous-refs [config]\n  (->> (depth-search ref? config)\n       (map ref-key)\n       (filter #(next (find-derived config %)))))\n\n(defn- missing-refs [config]\n  (->> (depth-search ref? config)\n       (map ref-key)\n       (remove #(find-derived config %))))\n\n(defn- invalid-composite-keys [config]\n  (->> (keys config) (filter vector?) (remove composite-key?)))\n\n(defn- invalid-composite-key-exception [config key]\n  (ex-info (str \"Invalid composite key: \" key \". Every keyword must be namespaced.\")\n           {:reason ::invalid-composite-key\n            :config config\n            :key key}))\n\n(defn- resolve-ref [config resolvef ref]\n  (let [[k v] (first (find-derived config (ref-key ref)))]\n    (resolvef k v)))\n\n(defn- resolve-refset [config resolvef refset]\n  (set (for [[k v] (find-derived config (ref-key refset))]\n         (resolvef k v))))\n\n(defn- expand-key [config resolvef value]\n  (walk/postwalk\n   #(cond\n      (ref? %)    (resolve-ref config resolvef %)\n      (refset? %) (resolve-refset config resolvef %)\n      :else       %)\n   value))\n\n(defn- run-exception [system completed remaining f k v t]\n  (ex-info (str \"Error on key \" k \" when running system\")\n           {:reason ::run-threw-exception\n            :system system\n            :completed-keys (reverse completed)\n            :remaining-keys (rest remaining)\n            :function f\n            :key   k\n            :value v}\n           t))\n\n(defn- try-run-action [system completed remaining f k]\n  (let [v (system k)]\n    (try (f k v)\n         (catch #?(:clj Throwable :cljs :default) t\n           (throw (run-exception system completed remaining f k v t))))))\n\n(defn- run-loop [system keys f]\n  (loop [completed (), remaining keys]\n    (when (seq remaining)\n      (let [k (first remaining)]\n        (try-run-action system completed remaining f k)\n        (recur (cons k completed) (rest remaining))))))\n\n(defn- system-origin [system]\n  (-> system meta ::origin (select-keys (keys system))))\n\n(defn run!\n  \"Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in dependency order. The function should take two\n  arguments, a key and value.\"\n  [system keys f]\n  {:pre [(map? system) (some-> system meta ::origin)]}\n  (run-loop system (dependent-keys (system-origin system) keys) f))\n\n(defn reverse-run!\n  \"Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in reverse dependency order. The function should take two\n  arguments, a key and value.\"\n  [system keys f]\n  {:pre [(map? system) (some-> system meta ::origin)]}\n  (run-loop system (reverse-dependent-keys (system-origin system) keys) f))\n\n(defn fold\n  \"Reduce all the key value pairs in system map in dependency order, starting\n  from an initial value. The function should take three arguments: the\n  accumulator, the current key and the current value.\"\n  [system f val]\n  (let [graph (dependency-graph (system-origin system))]\n    (->> (keys system)\n         (sort (key-comparator graph))\n         (reduce #(f %1 %2 (system %2)) val))))\n\n(defn- build-exception [system f k v t]\n  (ex-info (str \"Error on key \" k \" when building system\")\n           {:reason   ::build-threw-exception\n            :system   system\n            :function f\n            :key      k\n            :value    v}\n           t))\n\n(defn- try-build-action [system f k v]\n  (try (f k v)\n       (catch #?(:clj Throwable :cljs :default) t\n         (throw (build-exception system f k v t)))))\n\n(defn- build-key [f assertf resolvef system [k v]]\n  (let [v' (expand-key system resolvef v)]\n    (assertf system k v')\n    (-> system\n        (assoc k (try-build-action system f k v'))\n        (vary-meta assoc-in [::build k] v'))))\n\n(defn build\n  \"Apply a function f to each key value pair in a configuration map. Keys are\n  traversed in dependency order, and any references in the value expanded. The\n  function should take two arguments, a key and value, and return a new value.\n  An optional fourth argument, assertf, may be supplied to provide an assertion\n  check on the system, key and expanded value.\"\n  ([config keys f]\n   (build config keys f (fn [_ _ _])))\n  ([config keys f assertf]\n   (build config keys f assertf (fn [_ v] v)))\n  ([config keys f assertf resolvef]\n   {:pre [(map? config)]}\n   (let [relevant-keys   (dependent-keys config keys)\n         relevant-config (select-keys config relevant-keys)]\n     (when-let [invalid-key (first (invalid-composite-keys config))]\n       (throw (invalid-composite-key-exception config invalid-key)))\n     (when-let [ref (first (ambiguous-refs relevant-config))]\n       (throw (ambiguous-key-exception config ref (map key (find-derived config ref)))))\n     (when-let [refs (seq (missing-refs relevant-config))]\n       (throw (missing-refs-exception config refs)))\n     (reduce (partial build-key f assertf resolvef)\n             (with-meta {} {::origin config})\n             (map (fn [k] [k (config k)]) relevant-keys)))))\n\n(defmulti resolve-key\n  \"Return a value to substitute for a reference prior to initiation. By default\n  the value of the key is returned unaltered. This can be used to hide\n  information that is only necessary to halt or suspend the key.\"\n  {:arglists '([key value])}\n  (fn [key value] (normalize-key key)))\n\n(defmethod resolve-key :default [_ v] v)\n\n(defn expand\n  \"Replace all refs with the values they correspond to.\"\n  [config]\n  (build config (keys config) (fn [_ v] v) (fn [_ _ _]) resolve-key))\n\n(defmulti prep-key\n  \"Prepare the configuration associated with a key for initiation. This is\n  generally used to add in default values and references. By default the\n  method returns the value unaltered.\"\n  {:arglists '([key value])}\n  (fn [key value] (normalize-key key)))\n\n(defmethod prep-key :default [_ v] v)\n\n(defmulti init-key\n  \"Turn a config value associated with a key into a concrete implementation.\n  For example, a database URL might be turned into a database connection.\"\n  {:arglists '([key value])}\n  (fn [key value] (normalize-key key)))\n\n(defmulti halt-key!\n  \"Halt a running or suspended implementation associated with a key. This is\n  often used for stopping processes or cleaning up resources. For example, a\n  database connection might be closed. This multimethod must be idempotent.\n  The return value of this multimethod is discarded.\"\n  {:arglists '([key value])}\n  (fn [key value] (normalize-key key)))\n\n(defmethod halt-key! :default [_ v])\n\n(defmulti resume-key\n  \"Turn a config value associated with a key into a concrete implementation,\n  but reuse resources (e.g. connections, running threads, etc) from an existing\n  implementation. By default this multimethod calls init-key and ignores the\n  additional argument.\"\n  {:arglists '([key value old-value old-impl])}\n  (fn [key value old-value old-impl] (normalize-key key)))\n\n(defmethod resume-key :default [k v _ _]\n  (init-key k v))\n\n(defmulti suspend-key!\n  \"Suspend a running implementation associated with a key, so that it may be\n  eventually passed to resume-key. By default this multimethod calls halt-key!,\n  but it may be customized to do things like keep a server running, but buffer\n  incoming requests until the server is resumed.\"\n  {:arglists '([key value])}\n  (fn [key value] (normalize-key key)))\n\n(defmethod suspend-key! :default [k v]\n  (halt-key! k v))\n\n(defmulti pre-init-spec\n  \"Return a spec for the supplied key that is used to check the associated\n  value before the key is initiated.\"\n  normalize-key)\n\n(defmethod pre-init-spec :default [_] nil)\n\n(defn- spec-exception [system k v spec ed]\n  (ex-info (str \"Spec failed on key \" k \" when building system\\n\"\n                (with-out-str (s/explain-out ed)))\n           {:reason   ::build-failed-spec\n            :system   system\n            :key      k\n            :value    v\n            :spec     spec\n            :explain  ed}))\n\n(defn- assert-pre-init-spec [system key value]\n  (when-let [spec (pre-init-spec key)]\n    (when-not (s/valid? spec value)\n      (throw (spec-exception system key value spec (s/explain-data spec value))))))\n\n(defn prep\n  \"Prepare a config map for initiation. The prep-key method is applied to each\n  entry in the map, and the values replaced with the return value. This is used\n  for adding default values and references to the configuration.\"\n  ([config]\n   (prep config (keys config)))\n  ([config keys]\n   {:pre [(map? config)]}\n   (let [keyset (set keys)]\n     (reduce-kv (fn [m k v] (assoc m k (if (keyset k) (prep-key k v) v))) {} config))))\n\n(defn init\n  \"Turn a config map into an system map. Keys are traversed in dependency\n  order, initiated via the init-key multimethod, then the refs associated with\n  the key are expanded.\"\n  ([config]\n   (init config (keys config)))\n  ([config keys]\n   {:pre [(map? config)]}\n   (build config keys init-key assert-pre-init-spec resolve-key)))\n\n(defn halt!\n  \"Halt a system map by applying halt-key! in reverse dependency order.\"\n  ([system]\n   (halt! system (keys system)))\n  ([system keys]\n   {:pre [(map? system) (some-> system meta ::origin)]}\n   (reverse-run! system keys halt-key!)))\n\n(defn- missing-keys [system ks]\n  (remove (set ks) (keys system)))\n\n(defn- halt-missing-keys! [config system keys]\n  (let [graph        (-> system meta ::origin dependency-graph)\n        missing-keys (missing-keys system (dependent-keys config keys))]\n    (doseq [k (sort (key-comparator graph) missing-keys)]\n      (halt-key! k (system k)))))\n\n(defn resume\n  \"Turn a config map into a system map, reusing resources from an existing\n  system when it's possible to do so. Keys are traversed in dependency order,\n  resumed with the resume-key multimethod, then the refs associated with the\n  key are expanded.\"\n  ([config system]\n   (resume config system (keys config)))\n  ([config system keys]\n   {:pre [(map? config) (map? system) (some-> system meta ::origin)]}\n   (halt-missing-keys! config system keys)\n   (build config keys\n          (fn [k v]\n            (if (contains? system k)\n              (resume-key k v (-> system meta ::build (get k)) (system k))\n              (init-key k v)))\n          assert-pre-init-spec\n          resolve-key)))\n\n(defn suspend!\n  \"Suspend a system map by applying suspend-key! in reverse dependency order.\"\n  ([system]\n   (suspend! system (keys system)))\n  ([system keys]\n   {:pre [(map? system) (some-> system meta ::origin)]}\n   (reverse-run! system keys suspend-key!)))\n"]}