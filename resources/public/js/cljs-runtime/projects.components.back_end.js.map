{"version":3,"sources":["projects/components/back_end.cljs"],"mappings":"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","names":["projects.components.back-end/conn","cljs.core.atom","projects.components.back-end/delete-project","remove-project","project","token","ajax.core.DELETE","cljs.core/deref","projects.components.back-end/register-user","user","alert-action","ajax.core.PUT","response","cljs.core/contains?","G__33050","projects.components.messsages/register-fail","G__33051","projects.components.messsages/register-success","projects.components.back-end/autheticate-user","autheticate-action","ajax.core.POST","G__33052","projects.components.messsages/auth-fail","cljs.core.doall","G__33053","projects.components.messsages/auth-success","projects.components.back-end/get-projects","set-projects","ajax.core.GET","projects.components.back-end/post-project","state","promesa.core.promise","resolve","reject","projects.components.utils/next-status","projects.components.back-end/get-history","handler","p1__33054#","projects.components.back-end/put-project","projects.components.back-end/update-","update-project","set-project-history","G__33055","data","G__33056","projects.components.messsages/post-project-success","projects.components.back-end/add-","add-project","G__33057","G__33058","projects.components.messsages/put-project-success","projects.components.back-end/add-state","promesa.core.then","G__33059","projects.components.messsages/put-project-fail","promesa.core.catch$","error","js/console.log","projects.components.back-end/update-state","integrant.core/init-key","_","config","cljs.core/reset!"],"sourcesContent":["(ns projects.components.back-end\n  (:require [ajax.core :refer [PUT POST GET DELETE]]\n            [promesa.core :as p]\n            [projects.components.utils :refer [next-status]]\n            [projects.components.messsages :as messages]\n            [integrant.core :as ig]))\n\n(def conn (atom nil))\n\n(defn delete-project\n  [remove-project project token]\n  (DELETE (str \"http://\" (:host @conn) \":\" (:port @conn) \"/api/project/\" (:id project))\n    {:headers {\"authorization\" (str \"Bearer \" token)}\n     :handler #(remove-project project)}))\n\n(defn register-user \n  [user alert-action]\n  (PUT (str \"http://\" (:host @conn) \":\" (:port @conn) \"/register\")\n    :format :json\n    :params user \n    :handler (fn [response]\n               (if (contains? response :error)\n                 (alert-action {:status false\n                                :message messages/register-fail})\n                 (alert-action {:status true\n                                :message (messages/register-success (:username user))})))))\n\n(defn autheticate-user\n  [user autheticate-action alert-action]\n  (POST (str \"http://\" (:host @conn)\":\" (:port @conn) \"/login\")\n    {:format :json\n     :params user\n     :handler (fn [response]\n                (if (contains? response :error)\n                  (alert-action {:status false\n                                 :message messages/auth-fail})\n                  (doall\n                   (autheticate-action response)\n                   (alert-action {:status true\n                                  :message messages/auth-success}))))}))\n\n(defn get-projects\n  [set-projects token]\n  (GET (str \"http://\" (:host @conn) \":\" (:port @conn) \"/api/project\")\n    {:headers {\"authorization\" (str \"Bearer \" token)}\n     :handler (fn [response]\n                (set-projects response))}))\n\n(defn post-project\n  [state token]\n  (p/promise\n   (fn [resolve reject]\n     (POST (str \"http://\" (:host @conn) \":\" (:port @conn) \"/api/project/\" (:id state))\n       {:format :json\n        :headers {\"authorization\" (str \"Bearer \" token)}\n        :params {:status (next-status {:project state})}\n        :handler resolve\n        :error-handler reject}))))\n\n(defn get-history\n  [handler state token]\n  (GET (str \"http://\" (:host @conn) \":\" (:port @conn) \"/api/project/\" (:id state) \"/history\")\n    {:headers {\"authorization\" (str \"Bearer \" token)}\n     :handler #(handler %)}))\n\n(defn put-project\n  [state token]\n  (p/promise\n   (fn [resolve reject]\n     (PUT (str \"http://\" (:host @conn) \":\" (:port @conn) \"/api/project\")\n       {:format :json\n        :headers {\"authorization\" (str \"Bearer \" token)}\n        :params {:name (:name state)\n                 :status \"Initiated\"}\n        :handler resolve\n        :error-handler reject}))))\n\n(defn update-\n  [update-project set-project-history response token alert-action]\n  (response (fn [data]\n              (update-project data)\n              (get-history set-project-history data token)\n              (alert-action {:status true\n                             :message messages/post-project-success}))))\n\n(defn add-\n  [add-project set-project-history response token alert-action]\n  (response (fn [data]\n              (add-project data)\n              (get-history set-project-history data token)\n              (alert-action {:status true\n                             :message (messages/put-project-success (:name data))}))))\n\n(defn add-state\n  [add-project set-project-history state token alert-action]\n  (-> (put-project state token)\n      (p/then (fn [response]\n                (if (contains? response :error)\n                  (alert-action {:status false\n                                 :message (messages/put-project-fail (:name state))})\n                  (add- add-project set-project-history response token alert-action))))\n      (p/catch (fn [error]\n                 (js/console.log \"error in promisa\" error)))))\n\n\n(defn update-state\n  [update-project set-project-history state token alert-action]\n  (-> (post-project state token)\n      (p/then (fn [response]\n                (update- update-project set-project-history response token alert-action)))\n      (p/catch (fn [error]\n                 (js/console.log \"error in promisa\" error)))))\n\n(defmethod ig/init-key ::connection\n  [_ config]\n  (reset! conn config))"]}