{"version":3,"sources":["helix/hooks.cljc"],"mappings":"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","names":["helix.hooks/raw-use-effect","js/module$node_modules$react$index.useEffect","helix.hooks/raw-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","helix.hooks/raw-use-memo","js/module$node_modules$react$index.useMemo","helix.hooks/raw-use-callback","js/module$node_modules$react$index.useCallback","helix.hooks/raw-use-imperative-handle","js/module$node_modules$react$index.useImperativeHandle","helix.hooks/use-state","initial","vec__32490","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","x","f","xs","helix$hooks$use_state_$_updater","cljs.core.apply","helix.hooks/use-ref","ref","js/module$node_modules$react$index.useRef","x32493","cljs.core/PROTOCOL_SENTINEL","this","goog.object/set","G__32494","a","G__32495","G__32496","b","G__32497","G__32498","G__32499","var_args","G__32501","helix.hooks/use-reducer","js/Error","reducer","init-state","helix.hooks.use_reducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","cljs.core/ifn?","state","action","helix.hooks/use-context","js/module$node_modules$react$index.useContext","helix.hooks/wrap-fx","helix.hooks/simple-body?","body","cljs.core._EQ_","cljs.core/count","cljs.core/Symbol","cljs.core/first","helix.hooks/determine-deps","deps","G__32502","cljs.core/Keyword","cljs.core/to-array","G__32504","helix.hooks/use-effect*","js/goog.DEBUG","G__32506","helix.hooks/use-layout-effect*","G__32508","helix.hooks/use-memo*","G__32510","helix.hooks/use-callback*","G__32512","helix.hooks/use-imperative-handle*","helix.hooks/use-debug-value","js/module$node_modules$react$index.debugValue"],"sourcesContent":["(ns helix.hooks\n  #?(:clj (:require [helix.impl.analyzer :as hana])\n     :cljs (:require\n             [\"react\" :as react]\n             [goog.object :as gobj]))\n  #?(:cljs (:require-macros [helix.hooks])))\n\n#?(:cljs\n   (do (def raw-use-effect react/useEffect)\n       (def raw-use-layout-effect react/useLayoutEffect)\n       (def raw-use-memo react/useMemo)\n       (def raw-use-callback react/useCallback)\n       (def raw-use-imperative-handle react/useImperativeHandle)))\n\n\n\n\n\n#?(:cljs\n   (defn use-state\n     \"Like `react/useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\"\n     [initial]\n     (let [[v u] (react/useState initial)\n           updater (react/useCallback (fn updater\n                                        ([x] (u x))\n                                        ([f & xs]\n                                         (updater (fn spread-updater [x]\n                                                    (apply f x xs)))))\n                                      ;; `u` is guaranteed to be stable so we elide it\n                                      #js [])]\n       [v updater])))\n\n\n#?(:cljs\n   (defn use-ref\n     \"Just like react/useRef. Supports accessing the \\\"current\\\" property via\n  dereference (@) and updating the \\\"current\\\" property via `reset!` and `swap!`\"\n     [x]\n     (let [ref (react/useRef nil)]\n       (when (nil? (.-current ^js ref))\n         (set! (.-current ^js ref)\n               (specify! #js {:current x}\n                 IDeref\n                 (-deref [this]\n                   (.-current ^js this))\n\n                 IReset\n                 (-reset! [this v]\n                   (gobj/set this \"current\" v))\n\n                 ISwap\n                 (-swap!\n                   ([this f]\n                    (gobj/set this \"current\" (f (.-current ^js this))))\n                   ([this f a]\n                    (gobj/set this \"current\" (f (.-current ^js this) a)))\n                   ([this f a b]\n                    (gobj/set this \"current\" (f (.-current ^js this) a b)))\n                   ([this f a b xs]\n                    (gobj/set this \"current\" (apply f (.-current ^js this) a b xs)))))))\n       (.-current ^js ref))))\n\n\n#?(:cljs\n   (defn use-reducer\n     \"Just react/useReducer.\"\n     ([reducer init-state]\n      (use-reducer reducer init-state js/undefined))\n     ([reducer init-state init]\n      (react/useReducer\n       ;; handle ifn, e.g. multi-methods\n       (react/useMemo\n        #(if (and (not (fn? reducer)) (ifn? reducer))\n           (fn wrap-ifn [state action]\n             (reducer state action))\n           reducer)\n        #js [reducer])\n       init-state\n       init))))\n\n\n#?(:cljs\n   (def use-context\n     \"Just react/useContext\"\n     react/useContext))\n\n\n;; React `useEffect` expects either a function or undefined to be returned\n#?(:cljs\n   (defn wrap-fx [f]\n     (fn wrap-fx-return []\n       (let [x (f)]\n         (if (fn? x)\n           x\n           js/undefined)))))\n\n\n(defn simple-body? [body]\n  (and (= (count body) 1) (symbol? (first body))))\n\n\n#?(:clj\n   (defn deps-macro-body [env deps body deps->hook-body]\n     (cond\n       ;;\n       ;; Warn on typical errors writing body\n       ;;\n\n       ;; a single symbol\n       (and (= (count body) 1) (symbol? (first body)))\n       (do (hana/warn hana/warning-simple-body env {:form body})\n           nil)\n\n\n       ;;\n       ;; Different variations of deps\n       ;;\n\n       ;; deps are passed in as a vector\n       (vector? deps) (deps->hook-body `(cljs.core/array ~@deps)\n                                       body)\n\n       ;; auto deps is passed in\n       (= deps :auto-deps) (deps->hook-body\n                            `(cljs.core/array ~@(hana/resolve-local-vars env body))\n                            body)\n\n       ;; always fire it (don't pass any deps in to hook)\n       (= deps :always) (deps->hook-body body)\n\n       ;; pass an empty array for things that should only run once\n       (= deps :once) (deps->hook-body '(cljs.core/array) body)\n\n       :else (deps->hook-body `(determine-deps ~deps) body)))\n\n   :cljs (defn determine-deps [deps]\n           (case deps\n             :once (array)\n             :always js/undefined\n             :auto-deps (throw (js/Error. \"Cannot use :auto-deps outside of macro.\"))\n             (to-array deps))))\n\n\n#?(:clj\n   (defmacro use-effect\n     [deps & body]\n     (deps-macro-body\n      &env deps body\n      (fn\n        ([fn-body] `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   ;; we provide a CLJS defn in the case when we need to pass around the hook\n   ;; as a value. This will be slower, `:auto-deps` won't work and devtools will\n   ;; be harder to read\n   (defn use-effect*\n     ([f] (react/useEffect (wrap-fx f)))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"))))\n      (react/useEffect (wrap-fx f) (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-layout-effect [deps & body]\n     (deps-macro-body\n      &env deps body\n      (fn\n        ([fn-body] `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   (defn use-layout-effect*\n     ([f] (react/useLayoutEffect (wrap-fx f)))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"))))\n      (react/useLayoutEffect (wrap-fx f) (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-memo\n     [deps & body]\n     (deps-macro-body\n      &env deps body\n      (fn\n        ([fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body))\n          merge\n          {:tag (hana/inferred-type &env fn-body)}))\n        ([deps fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body)\n                         ~deps)\n          merge\n          {:tag (hana/inferred-type &env (last fn-body))}))))))\n\n\n#?(:cljs\n   (defn use-memo*\n     ([f] (react/useMemo f))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"))))\n      (react/useMemo f (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-callback\n     [deps & body]\n     (deps-macro-body\n      &env deps body\n      (fn\n        ([fn-body] `^function (raw-use-callback ~@fn-body))\n        ([deps fn-body] `^function (raw-use-callback ~@fn-body\n                                                     ~deps))))))\n\n#?(:cljs\n   (defn use-callback*\n     ([f] (react/useCallback f))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"))))\n      (react/useCallback f (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-imperative-handle\n     [ref deps & body]\n     (deps-macro-body\n      &env deps body\n      (fn\n        ([fn-body] `(raw-use-imperative-handle ref (fn [] ~@fn-body)))\n        ([deps fn-body] `(raw-use-imperative-handle\n                          (fn [] ~@fn-body)\n                          ~deps))))))\n\n\n#?(:cljs\n   (defn use-imperative-handle*\n     ([ref f] (react/useImperativeHandle ref f))\n     ([ref f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"))))\n      (react/useImperativeHandle ref f (to-array deps)))))\n\n\n#?(:cljs\n   (def use-debug-value\n     \"just react/useDebugValue\"\n     react/debugValue))\n\n"]}