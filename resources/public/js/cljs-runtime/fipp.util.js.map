{"version":3,"sources":["fipp/util.cljc"],"mappings":";AAIA,AAAA,AAAMA,AAAUC;AAAhB,AACE,AAAI,AAAOA,AAAG,AAAQA;;AAEf,AAAA,AAAMC,AAAOD;AAAb,AAAA;;AAOA,AAAKE,AAAQC;AAEtB;;;AAAA,AAAMC,AAEHJ;AAFH,AAGE,AAAAK,AAAI,AAAA,AAAML;AAAV,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AACI,AAACN,AAASC;AADd,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAEI,AAASL;AAFb,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAGI,AAACJ,AAAMD;AAHX,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAII,AAAAC,AAASN;AAJb,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAKI,AAAAE,AAAUP;AALd,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAMI,AAASL;AANb,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAOI,AAACG,AAAKR;AAPV,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAQI,AAACI,AAAQT;AARb,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AASI,AAACK,AAAQV;AATb,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAUI,AAACM,AAAKX;AAVV,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAWI,AAACO,AAAKZ;AAXV,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAYI,AAACQ,AAAgBb;AAZrB,AAAA,AAAAK;AAAAA;;AAAA,AAAAA,AAaI,AAACS,AAAKd;AAbV,AAAA,AAAAK;AAAAA;;AAcI,AAACH,AAAAA,AAAAA,AAAQF,AAAAA;;;;;;;;;;;;;;;;AAEf,AAAA,AAAMe,AAAYf;AAAlB,AAEW,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAUlB,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AACtB,AAAK,AAACc,AAAKd;;AADhB","names":["fipp.util/boolean?","x","fipp.util/char?","fipp.util/regexp?","cljs.core/regexp?","fipp.util/edn?","or__4126__auto__","cljs.core/Symbol","cljs.core/Keyword","cljs.core/seq?","cljs.core/vector?","cljs.core/record?","cljs.core/map?","cljs.core/set?","cljs.core/tagged-literal?","cljs.core/var?","fipp.util/value-obj?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta"],"sourcesContent":["(ns fipp.util\n  (:refer-clojure :exclude [boolean? char? regexp?]))\n\n;;TODO: CLJ-1719 and CLJS-1241\n(defn boolean? [x]\n  (or (true? x) (false? x)))\n\n#?(:cljs (defn char? [x]\n           false)\n   :clj (def char? clojure.core/char?))\n\n;;TODO: CLJ-1720 and CLJS-1242\n#?(:clj (defn regexp? [x]\n          (instance? java.util.regex.Pattern x))\n   :cljs (def regexp? cljs.core/regexp?))\n\n(defn edn?\n  \"Is the root of x an edn type?\"\n  [x]\n  (or (nil? x)\n      (boolean? x)\n      (string? x)\n      (char? x)\n      (symbol? x)\n      (keyword? x)\n      (number? x)\n      (seq? x)\n      (vector? x)\n      (record? x)\n      (map? x)\n      (set? x)\n      (tagged-literal? x)\n      (var? x)\n      (regexp? x)))\n\n(defn value-obj? [x]\n  #?(:clj (instance? clojure.lang.IObj x)\n     :cljs (and (satisfies? IWithMeta x)\n                (not (var? x))))) ;TODO: CLJS-2398\n"]}