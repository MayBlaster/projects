["^ ","~:output",["^ ","~:js","goog.provide('fipp.engine');\nif((typeof fipp !== 'undefined') && (typeof fipp.engine !== 'undefined') && (typeof fipp.engine.serialize_node !== 'undefined')){\n} else {\nfipp.engine.serialize_node = (function (){var method_table__4619__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4620__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4621__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4622__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4623__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__32052 = cljs.core.get_global_hierarchy;\nreturn (fexpr__32052.cljs$core$IFn$_invoke$arity$0 ? fexpr__32052.cljs$core$IFn$_invoke$arity$0() : fexpr__32052.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"fipp.engine\",\"serialize-node\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4623__auto__,method_table__4619__auto__,prefer_table__4620__auto__,method_cache__4621__auto__,cached_hierarchy__4622__auto__));\n})();\n}\nfipp.engine.serialize = (function fipp$engine$serialize(doc){\nif((doc == null)){\nreturn null;\n} else {\nif(cljs.core.seq_QMARK_(doc)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(fipp.engine.serialize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([doc], 0));\n} else {\nif(typeof doc === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),doc], null)], null);\n} else {\nif((doc instanceof cljs.core.Keyword)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null));\n} else {\nif(cljs.core.vector_QMARK_(doc)){\nreturn fipp.engine.serialize_node.cljs$core$IFn$_invoke$arity$1(doc);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected class for doc node\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),doc], null));\n\n}\n}\n}\n}\n}\n});\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),(function (p__32053){\nvar vec__32054 = p__32053;\nvar seq__32055 = cljs.core.seq(vec__32054);\nvar first__32056 = cljs.core.first(seq__32055);\nvar seq__32055__$1 = cljs.core.next(seq__32055);\nvar _ = first__32056;\nvar text = seq__32055__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),(function (p__32060){\nvar vec__32061 = p__32060;\nvar seq__32062 = cljs.core.seq(vec__32061);\nvar first__32063 = cljs.core.first(seq__32062);\nvar seq__32062__$1 = cljs.core.next(seq__32062);\nvar _ = first__32063;\nvar text = seq__32062__$1;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,text)], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),(function (p__32064){\nvar vec__32065 = p__32064;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32065,(0),null);\nvar text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32065,(1),null);\nif(typeof text === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? text)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"escaped\",\"escaped\",-1007929769),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),text], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"span\",\"span\",1394872991),(function (p__32068){\nvar vec__32069 = p__32068;\nvar seq__32070 = cljs.core.seq(vec__32069);\nvar first__32071 = cljs.core.first(seq__32070);\nvar seq__32070__$1 = cljs.core.next(seq__32070);\nvar _ = first__32071;\nvar children = seq__32070__$1;\nreturn fipp.engine.serialize(children);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),(function (p__32073){\nvar vec__32074 = p__32073;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32074,(0),null);\nvar inline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32074,(1),null);\nvar terminate = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32074,(2),null);\nvar inline__$1 = (function (){var or__4126__auto__ = inline;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \" \";\n}\n})();\nvar terminate__$1 = (function (){var or__4126__auto__ = terminate;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \"\";\n}\n})();\nif(typeof inline__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? inline)\"));\n}\n\nif(typeof terminate__$1 === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? terminate)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222),inline__$1,new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496),terminate__$1], null)], null);\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"break\",\"break\",126570225),(function() { \nvar G__32138__delegate = function (_){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"break\",\"break\",126570225)], null)], null);\n};\nvar G__32138 = function (var_args){\nvar _ = null;\nif (arguments.length > 0) {\nvar G__32139__i = 0, G__32139__a = new Array(arguments.length -  0);\nwhile (G__32139__i < G__32139__a.length) {G__32139__a[G__32139__i] = arguments[G__32139__i + 0]; ++G__32139__i;}\n  _ = new cljs.core.IndexedSeq(G__32139__a,0,null);\n} \nreturn G__32138__delegate.call(this,_);};\nG__32138.cljs$lang$maxFixedArity = 0;\nG__32138.cljs$lang$applyTo = (function (arglist__32140){\nvar _ = cljs.core.seq(arglist__32140);\nreturn G__32138__delegate(_);\n});\nG__32138.cljs$core$IFn$_invoke$arity$variadic = G__32138__delegate;\nreturn G__32138;\n})()\n);\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"group\",\"group\",582596132),(function (p__32077){\nvar vec__32078 = p__32077;\nvar seq__32079 = cljs.core.seq(vec__32078);\nvar first__32080 = cljs.core.first(seq__32079);\nvar seq__32079__$1 = cljs.core.next(seq__32079);\nvar _ = first__32080;\nvar children = seq__32079__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"end\",\"end\",-268185958)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),(function (p__32081){\nvar vec__32082 = p__32081;\nvar seq__32083 = cljs.core.seq(vec__32082);\nvar first__32084 = cljs.core.first(seq__32083);\nvar seq__32083__$1 = cljs.core.next(seq__32083);\nvar _ = first__32084;\nvar args = seq__32083__$1;\nvar vec__32085 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((2),args));\nvar seq__32086 = cljs.core.seq(vec__32085);\nvar first__32087 = cljs.core.first(seq__32086);\nvar seq__32086__$1 = cljs.core.next(seq__32086);\nvar offset = first__32087;\nvar children = seq__32086__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"nest\",\"nest\",-314993663),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\nfipp.engine.serialize_node.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"align\",\"align\",1964212802),(function (p__32088){\nvar vec__32089 = p__32088;\nvar seq__32090 = cljs.core.seq(vec__32089);\nvar first__32091 = cljs.core.first(seq__32090);\nvar seq__32090__$1 = cljs.core.next(seq__32090);\nvar _ = first__32091;\nvar args = seq__32090__$1;\nvar vec__32092 = ((typeof cljs.core.first(args) === 'number')?args:cljs.core.cons((0),args));\nvar seq__32093 = cljs.core.seq(vec__32092);\nvar first__32094 = cljs.core.first(seq__32093);\nvar seq__32093__$1 = cljs.core.next(seq__32093);\nvar offset = first__32094;\nvar children = seq__32093__$1;\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"align\",\"align\",1964212802),new cljs.core.Keyword(null,\"offset\",\"offset\",296498311),offset], null)], null),fipp.engine.serialize(children),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"outdent\",\"outdent\",467209411)], null)], null)], 0));\n}));\n/**\n * A transducer which annotates the right-side of nodes assuming a\n *   hypothetical single-line formatting of the document. Groups and indentation\n *   directives are temporarily assumed to be zero-width. These values are used\n *   by subsequent passes to produce the final layout.\n */\nfipp.engine.annotate_rights = (function fipp$engine$annotate_rights(rf){\nvar pos = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32141 = null;\nvar G__32141__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32141__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32141__2 = (function (res,node){\nvar delta = (function (){var G__32095 = new cljs.core.Keyword(null,\"op\",\"op\",-1882987955).cljs$core$IFn$_invoke$arity$1(node);\nvar G__32095__$1 = (((G__32095 instanceof cljs.core.Keyword))?G__32095.fqn:null);\nswitch (G__32095__$1) {\ncase \"text\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"line\":\nreturn cljs.core.count(new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node));\n\nbreak;\ncase \"escaped\":\nreturn (1);\n\nbreak;\ndefault:\nreturn (0);\n\n}\n})();\nvar p = pos.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(pos.cljs$core$IDeref$_deref$arity$1(null) + delta));\nvar G__32096 = res;\nvar G__32097 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),p);\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32096,G__32097) : rf.call(null,G__32096,G__32097));\n});\nG__32141 = function(res,node){\nswitch(arguments.length){\ncase 0:\nreturn G__32141__0.call(this);\ncase 1:\nreturn G__32141__1.call(this,res);\ncase 2:\nreturn G__32141__2.call(this,res,node);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32141.cljs$core$IFn$_invoke$arity$0 = G__32141__0;\nG__32141.cljs$core$IFn$_invoke$arity$1 = G__32141__1;\nG__32141.cljs$core$IFn$_invoke$arity$2 = G__32141__2;\nreturn G__32141;\n})()\n});\nfipp.engine.update_right = (function fipp$engine$update_right(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___32143 = arguments.length;\nvar i__4737__auto___32144 = (0);\nwhile(true){\nif((i__4737__auto___32144 < len__4736__auto___32143)){\nargs__4742__auto__.push((arguments[i__4737__auto___32144]));\n\nvar G__32145 = (i__4737__auto___32144 + (1));\ni__4737__auto___32144 = G__32145;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic = (function (deque,f,args){\nreturn fipp.deque.conjr(cljs.core.pop(deque),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.peek(deque),args));\n}));\n\n(fipp.engine.update_right.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(fipp.engine.update_right.cljs$lang$applyTo = (function (seq32101){\nvar G__32102 = cljs.core.first(seq32101);\nvar seq32101__$1 = cljs.core.next(seq32101);\nvar G__32103 = cljs.core.first(seq32101__$1);\nvar seq32101__$2 = cljs.core.next(seq32101__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32102,G__32103,seq32101__$2);\n}));\n\n/**\n * Given printing options, returns a transducer which annotate the right-side\n *   of groups on their :begin nodes.  This includes the pruning algorithm which\n *   will annotate some :begin nodes as being :too-far to the right without\n *   calculating their exact sizes.\n */\nfipp.engine.annotate_begins = (function fipp$engine$annotate_begins(p__32106){\nvar map__32107 = p__32106;\nvar map__32107__$1 = (((((!((map__32107 == null))))?(((((map__32107.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32107.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32107):map__32107);\nvar options = map__32107__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32107__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar pos = cljs.core.volatile_BANG_((0));\nvar bufs = cljs.core.volatile_BANG_(fipp.deque.empty);\nreturn (function() {\nvar G__32146 = null;\nvar G__32146__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32146__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32146__2 = (function (res,p__32109){\nvar map__32110 = p__32109;\nvar map__32110__$1 = (((((!((map__32110 == null))))?(((((map__32110.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32110.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32110):map__32110);\nvar node = map__32110__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32110__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32110__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar buffers = cljs.core.deref(bufs);\nif(cljs.core.empty_QMARK_(buffers)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319))){\nvar position_STAR_ = (right + width);\nvar buffer = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),position_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null);\ncljs.core.vreset_BANG_(pos,position_STAR_);\n\ncljs.core.vreset_BANG_(bufs,(fipp.deque.create.cljs$core$IFn$_invoke$arity$1 ? fipp.deque.create.cljs$core$IFn$_invoke$arity$1(buffer) : fipp.deque.create.call(null,buffer)));\n\nreturn res;\n} else {\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,node) : rf.call(null,res,node));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"end\",\"end\",-268185958))){\nvar buffer = cljs.core.peek(buffers);\nvar buffers_STAR_ = cljs.core.pop(buffers);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),right], null);\nvar nodes = fipp.deque.conjlr(begin,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer),node);\nif(cljs.core.empty_QMARK_(buffers_STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res,nodes);\n} else {\nif(cljs.core.vector_QMARK_(buffers_STAR_)){\n} else {\nthrow (new Error(\"Assert failed: (vector? buffers*)\"));\n}\n\nif(cljs.core.vector_QMARK_(nodes)){\n} else {\nthrow (new Error(\"Assert failed: (vector? nodes)\"));\n}\n\ncljs.core.vreset_BANG_(bufs,fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers_STAR_,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.concat,nodes], 0)));\n\nreturn res;\n}\n} else {\nvar buffers_STAR_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(op,new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319)))?fipp.deque.conjr(buffers,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),(right + width),new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805),fipp.deque.empty], null)):fipp.engine.update_right.cljs$core$IFn$_invoke$arity$variadic(buffers,cljs.core.update_in,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805)], null),fipp.deque.conjr,node], 0)));\nvar res__$1 = res;\nwhile(true){\nif((((right <= cljs.core.deref(pos))) && ((cljs.core.count(buffers_STAR_) <= width)))){\ncljs.core.vreset_BANG_(bufs,buffers_STAR_);\n\nreturn res__$1;\n} else {\nvar buffer = cljs.core.first(buffers_STAR_);\nvar buffers_STAR__STAR_ = fipp.deque.popl(buffers_STAR_);\nvar begin = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op\",\"op\",-1882987955),new cljs.core.Keyword(null,\"begin\",\"begin\",-319034319),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)], null);\nvar res_STAR_ = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res__$1,begin) : rf.call(null,res__$1,begin));\nvar res_STAR___$1 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf,res_STAR_,new cljs.core.Keyword(null,\"nodes\",\"nodes\",-2099585805).cljs$core$IFn$_invoke$arity$1(buffer));\nif(cljs.core.empty_QMARK_(buffers_STAR__STAR_)){\ncljs.core.vreset_BANG_(pos,(0));\n\ncljs.core.vreset_BANG_(bufs,fipp.deque.empty);\n\nreturn res_STAR___$1;\n} else {\ncljs.core.vreset_BANG_(pos,new cljs.core.Keyword(null,\"position\",\"position\",-2011731912).cljs$core$IFn$_invoke$arity$1(cljs.core.first(buffers_STAR__STAR_)));\n\nvar G__32147 = buffers_STAR__STAR_;\nvar G__32148 = res_STAR___$1;\nbuffers_STAR_ = G__32147;\nres__$1 = G__32148;\ncontinue;\n}\n}\nbreak;\n}\n}\n}\n});\nG__32146 = function(res,p__32109){\nswitch(arguments.length){\ncase 0:\nreturn G__32146__0.call(this);\ncase 1:\nreturn G__32146__1.call(this,res);\ncase 2:\nreturn G__32146__2.call(this,res,p__32109);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32146.cljs$core$IFn$_invoke$arity$0 = G__32146__0;\nG__32146.cljs$core$IFn$_invoke$arity$1 = G__32146__1;\nG__32146.cljs$core$IFn$_invoke$arity$2 = G__32146__2;\nreturn G__32146;\n})()\n});\n});\n/**\n * Given printing options, returns a transducer which produces the fully\n *   laid-out strings.\n */\nfipp.engine.format_nodes = (function fipp$engine$format_nodes(p__32112){\nvar map__32113 = p__32112;\nvar map__32113__$1 = (((((!((map__32113 == null))))?(((((map__32113.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32113.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32113):map__32113);\nvar options = map__32113__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32113__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nreturn (function (rf){\nvar fits = cljs.core.volatile_BANG_((0));\nvar length = cljs.core.volatile_BANG_(width);\nvar tab_stops = cljs.core.volatile_BANG_(cljs.core.list((0)));\nvar column = cljs.core.volatile_BANG_((0));\nreturn (function() {\nvar G__32149 = null;\nvar G__32149__0 = (function (){\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\n});\nvar G__32149__1 = (function (res){\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(res) : rf.call(null,res));\n});\nvar G__32149__2 = (function (res,p__32115){\nvar map__32116 = p__32115;\nvar map__32116__$1 = (((((!((map__32116 == null))))?(((((map__32116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32116):map__32116);\nvar node = map__32116__$1;\nvar op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32116__$1,new cljs.core.Keyword(null,\"op\",\"op\",-1882987955));\nvar right = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32116__$1,new cljs.core.Keyword(null,\"right\",\"right\",-452581833));\nvar indent = cljs.core.peek(cljs.core.deref(tab_stops));\nvar format_text = (function (text,width__$1){\nvar res_STAR_ = (((cljs.core.deref(column) === (0)))?(function (){\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + indent));\n\nvar G__32118 = res;\nvar G__32119 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(indent,\" \"));\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32118,G__32119) : rf.call(null,G__32118,G__32119));\n})()\n:res);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + width__$1));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res_STAR_,text) : rf.call(null,res_STAR_,text));\n});\nvar G__32126 = op;\nvar G__32126__$1 = (((G__32126 instanceof cljs.core.Keyword))?G__32126.fqn:null);\nswitch (G__32126__$1) {\ncase \"text\":\nvar text = new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node);\nreturn format_text(text,cljs.core.count(text));\n\nbreak;\ncase \"escaped\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(1));\n\nbreak;\ncase \"pass\":\nreturn format_text(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(node),(0));\n\nbreak;\ncase \"line\":\nif((cljs.core.deref(fits) === (0))){\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nvar G__32127 = res;\nvar G__32128 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"terminate\",\"terminate\",1256003496).cljs$core$IFn$_invoke$arity$1(node)),\"\\n\"].join('');\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__32127,G__32128) : rf.call(null,G__32127,G__32128));\n} else {\nvar inline = new cljs.core.Keyword(null,\"inline\",\"inline\",1399884222).cljs$core$IFn$_invoke$arity$1(node);\ncolumn.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,(column.cljs$core$IDeref$_deref$arity$1(null) + cljs.core.count(inline)));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,inline) : rf.call(null,res,inline));\n}\n\nbreak;\ncase \"break\":\ncljs.core.vreset_BANG_(length,((right + width) - indent));\n\ncljs.core.vreset_BANG_(column,(0));\n\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(res,\"\\n\") : rf.call(null,res,\"\\n\"));\n\nbreak;\ncase \"nest\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(indent + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"align\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(tab_stops.cljs$core$IDeref$_deref$arity$1(null),(cljs.core.deref(column) + new cljs.core.Keyword(null,\"offset\",\"offset\",296498311).cljs$core$IFn$_invoke$arity$1(node))));\n\nreturn res;\n\nbreak;\ncase \"outdent\":\ntab_stops.cljs$core$IVolatile$_vreset_BANG_$arity$2(null,cljs.core.pop(tab_stops.cljs$core$IDeref$_deref$arity$1(null)));\n\nreturn res;\n\nbreak;\ncase \"begin\":\ncljs.core.vreset_BANG_(fits,(((cljs.core.deref(fits) > (0)))?(cljs.core.deref(fits) + (1)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(right,new cljs.core.Keyword(null,\"too-far\",\"too-far\",85800617)))?(0):(((right <= cljs.core.deref(length)))?(1):(0)\n))));\n\nreturn res;\n\nbreak;\ncase \"end\":\ncljs.core.vreset_BANG_(fits,(function (){var x__4214__auto__ = (0);\nvar y__4215__auto__ = (cljs.core.deref(fits) - (1));\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})());\n\nreturn res;\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected node op\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node], null));\n\n}\n});\nG__32149 = function(res,p__32115){\nswitch(arguments.length){\ncase 0:\nreturn G__32149__0.call(this);\ncase 1:\nreturn G__32149__1.call(this,res);\ncase 2:\nreturn G__32149__2.call(this,res,p__32115);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__32149.cljs$core$IFn$_invoke$arity$0 = G__32149__0;\nG__32149.cljs$core$IFn$_invoke$arity$1 = G__32149__1;\nG__32149.cljs$core$IFn$_invoke$arity$2 = G__32149__2;\nreturn G__32149;\n})()\n});\n});\nfipp.engine.print_fns = (function fipp$engine$print_fns(options){\nvar map__32130 = options;\nvar map__32130__$1 = (((((!((map__32130 == null))))?(((((map__32130.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32130.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32130):map__32130);\nvar print_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__32130__$1,new cljs.core.Keyword(null,\"print-fn\",\"print-fn\",-1720960489),cljs.core._STAR_print_fn_STAR_);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"print\",\"print\",1299562414),print_fn,new cljs.core.Keyword(null,\"println\",\"println\",1920840330),(function (){\nvar _STAR_print_fn_STAR__orig_val__32132 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_fn_STAR__temp_val__32133 = print_fn;\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__32133);\n\ntry{return cljs.core.println();\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__32132);\n}})], null);\n});\nfipp.engine.pprint_document = (function fipp$engine$pprint_document(var_args){\nvar G__32135 = arguments.length;\nswitch (G__32135) {\ncase 1:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$1 = (function (document){\nreturn fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2(document,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(fipp.engine.pprint_document.cljs$core$IFn$_invoke$arity$2 = (function (document,options){\nvar options__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),(70)], null),options], 0));\nvar map__32136 = fipp.engine.print_fns(options__$1);\nvar map__32136__$1 = (((((!((map__32136 == null))))?(((((map__32136.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__32136.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__32136):map__32136);\nvar print = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32136__$1,new cljs.core.Keyword(null,\"print\",\"print\",1299562414));\nvar println = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32136__$1,new cljs.core.Keyword(null,\"println\",\"println\",1920840330));\ncljs.core.run_BANG_(print,cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fipp.engine.annotate_rights,fipp.engine.annotate_begins(options__$1),fipp.engine.format_nodes(options__$1),fipp.engine.serialize(document)], 0)));\n\nreturn (println.cljs$core$IFn$_invoke$arity$0 ? println.cljs$core$IFn$_invoke$arity$0() : println.call(null));\n}));\n\n(fipp.engine.pprint_document.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","~:file","fipp/engine.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fipp.engine","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$fipp.deque","^P","~$deque","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing",["^Y",["^U",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","fipp/engine.cljc"],"~:compiled-at",1621517184966,"~:resource-name","fipp/engine.cljc","~:warnings",[],"~:source","(ns fipp.engine\n  \"See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing\"\n  (:require [fipp.deque :as deque])\n  #?(:clj (:import (java.io Writer))))\n\n\n;;; Serialize document into a stream\n\n(defmulti serialize-node first)\n\n(defn serialize [doc]\n  (cond\n    (nil? doc) nil\n    (seq? doc) (mapcat serialize doc)\n    (string? doc) [{:op :text, :text doc}]\n    (keyword? doc) (serialize-node [doc])\n    (vector? doc) (serialize-node doc)\n    :else (throw (ex-info \"Unexpected class for doc node\" {:node doc}))))\n\n;; Primitives\n;; See doc/primitives.md for details.\n\n(defmethod serialize-node :text [[_ & text]]\n  [{:op :text, :text (apply str text)}])\n\n(defmethod serialize-node :pass [[_ & text]]\n  [{:op :pass, :text (apply str text)}])\n\n(defmethod serialize-node :escaped [[_ text]]\n  (assert (string? text))\n  [{:op :escaped, :text text}])\n\n(defmethod serialize-node :span [[_ & children]]\n  (serialize children))\n\n(defmethod serialize-node :line [[_ inline terminate]]\n  (let [inline (or inline \" \")\n        terminate (or terminate \"\")]\n    (assert (string? inline))\n    (assert (string? terminate))\n    [{:op :line, :inline inline, :terminate terminate}]))\n\n(defmethod serialize-node :break [& _]\n  [{:op :break}])\n\n(defmethod serialize-node :group [[_ & children]]\n  (concat [{:op :begin}] (serialize children) [{:op :end}]))\n\n(defmethod serialize-node :nest [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                              args\n                              (cons 2 args))]\n    (concat [{:op :nest, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n(defmethod serialize-node :align [[_ & args]]\n  (let [[offset & children] (if (number? (first args))\n                             args\n                             (cons 0 args))]\n    (concat [{:op :align, :offset offset}]\n            (serialize children)\n            [{:op :outdent}])))\n\n\n\n(defn annotate-rights\n  \"A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.\"\n  [rf]\n  (let [pos (volatile! 0)]\n    (fn\n      ([] (rf))\n      ([res] (rf res))\n      ([res node]\n       (let [delta (case (:op node)\n                     :text (count (:text node))\n                     :line (count (:inline node))\n                     :escaped 1\n                     0)\n             p (vswap! pos + delta)]\n         (rf res (assoc node :right p)))))))\n\n\n\n(defn update-right [deque f & args]\n  (deque/conjr (pop deque) (apply f (peek deque) args)))\n\n(defn annotate-begins\n  \"Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [pos (volatile! 0)\n          bufs (volatile! deque/empty)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [buffers @bufs]\n           (if (empty? buffers)\n             (if (= op :begin)\n               ;; Buffer groups\n               (let [position* (+ right width)\n                     buffer {:position position* :nodes deque/empty}]\n                 (vreset! pos position*)\n                 (vreset! bufs (deque/create buffer))\n                 res)\n               ;; Emit unbuffered\n               (rf res node))\n             (if (= op :end)\n               ;; Pop buffer\n               (let [buffer (peek buffers)\n                     buffers* (pop buffers)\n                     begin {:op :begin :right right}\n                     nodes (deque/conjlr begin (:nodes buffer) node)]\n                 (if (empty? buffers*)\n                   (do\n                     (vreset! pos 0)\n                     (vreset! bufs deque/empty)\n                     (reduce rf res nodes))\n                   (do\n                     (assert (vector? buffers*))\n                     (assert (vector? nodes))\n                     (vreset! bufs (update-right buffers* update-in [:nodes]\n                                                 deque/concat nodes))\n                     res)))\n               ;; Pruning lookahead\n               (loop [buffers* (if (= op :begin)\n                                 (deque/conjr buffers\n                                              {:position (+ right width)\n                                               :nodes deque/empty})\n                                 (update-right buffers update-in [:nodes]\n                                               deque/conjr node))\n                      res res]\n                 (if (and (<= right @pos) (<= (count buffers*) width))\n                   ;; Not too far\n                   (do (vreset! bufs buffers*)\n                       res)\n                   ;; Too far\n                   (let [buffer (first buffers*)\n                         buffers** (deque/popl buffers*)\n                         begin {:op :begin, :right :too-far}\n                         res* (rf res begin)\n                         res* (reduce rf res* (:nodes buffer))]\n                     (if (empty? buffers**)\n                       ;; Root buffered group\n                       (do\n                         (vreset! pos 0)\n                         (vreset! bufs deque/empty)\n                         res*)\n                       ;; Interior group\n                       (do\n                         (vreset! pos (:position (first buffers**)))\n                         (recur buffers** res*))))))\n            ))))))))\n\n\n(defn format-nodes\n  \"Given printing options, returns a transducer which produces the fully\n  laid-out strings.\"\n  [{:keys [width] :as options}]\n  (fn [rf]\n    (let [fits (volatile! 0)\n          length (volatile! width)\n          tab-stops (volatile! '(0)) ; Technically, an unbounded stack...\n          column (volatile! 0)]\n      (fn\n        ([] (rf))\n        ([res] (rf res))\n        ([res {:keys [op right] :as node}]\n         (let [indent (peek @tab-stops)\n               format-text (fn [text width]\n                             (let [res* (if (zero? @column)\n                                          (do (vswap! column + indent)\n                                              (rf res (apply str (repeat indent \\space))))\n                                          res)]\n                               (vswap! column + width)\n                               (rf res* text)))]\n           (case op\n             :text\n               (let [text (:text node)]\n                 (format-text text (count text)))\n\n             :escaped\n               (format-text (:text node) 1)\n\n             :pass\n               (format-text (:text node) 0)\n\n             :line\n               (if (zero? @fits)\n                 (do\n                   (vreset! length (- (+ right width) indent))\n                   (vreset! column 0)\n                   (rf res (str (:terminate node) \"\\n\")))\n                 (let [inline (:inline node)]\n                   (vswap! column + (count inline))\n                   (rf res inline)))\n             :break\n               (do\n                 (vreset! length (- (+ right width) indent))\n                 (vreset! column 0)\n                 (rf res \"\\n\"))\n             :nest\n               (do (vswap! tab-stops conj (+ indent (:offset node)))\n                   res)\n             :align\n               (do (vswap! tab-stops conj (+ @column (:offset node)))\n                   res)\n             :outdent\n               (do (vswap! tab-stops pop)\n                   res)\n             :begin\n               (do (vreset! fits (cond\n                                   (pos? @fits) (inc @fits)\n                                   (= right :too-far) 0\n                                   (<= right @length) 1\n                                   :else 0))\n                   res)\n             :end\n               (do (vreset! fits (max 0 (dec @fits)))\n                   res)\n             (throw (ex-info \"Unexpected node op\" {:node node}))))\n         )))))\n\n\n(defn print-fns\n  [options]\n  #?(:clj (let [{:keys [^Writer writer] :or {writer *out*}} options]\n            {:print #(.write writer ^String %)\n             :println (fn []\n                        (binding [*out* writer]\n                          (println)))})\n     :cljs (let [{:keys [print-fn] :or {print-fn *print-fn*}} options]\n             {:print print-fn\n              :println (fn []\n                         (binding [*print-fn* print-fn]\n                           (println)))})))\n\n\n(defn pprint-document\n  ([document]\n   (pprint-document document {}))\n  ([document options]\n   (let [options (merge {:width 70} options)\n         {:keys [print println]} (print-fns options)]\n     (->> (serialize document)\n          (eduction\n            annotate-rights\n            (annotate-begins options)\n            (format-nodes options))\n          (run! print))\n     (println))))\n\n\n(comment\n\n  (defn dbg [x]\n    (println \"DBG:\")\n    (clojure.pprint/pprint x)\n    (println \"----\")\n    x)\n\n  (serialize \"apple\")\n  (serialize [:text \"apple\" \"ball\"])\n  (serialize [:span \"apple\" [:group \"ball\" :line \"cat\"]])\n  (serialize [:span \"apple\" [:line \",\"] \"ball\"])\n\n  (def doc1 [:group \"A\" :line [:group \"B\" :line \"C\"]])\n  (def doc2 [:group \"A\" :line [:nest 2 \"B\" :line \"C\"] :line \"D\"])\n  (def doc3 [:group \"A\" :line\n             [:nest 2 \"B-XYZ\" [:align -3 :line \"C\"]] :line \"D\"])\n\n  (serialize doc1)\n\n  (let [options {:width 3}]\n    (->> doc3\n         serialize\n         (into [] (comp\n                    annotate-rights\n                    (annotate-begins options)\n                    (format-nodes options)\n                    ))\n         ;(run! print)\n         clojure.pprint/pprint\n         )\n    ;nil\n    )\n\n  ;; test of :pass op\n  (do\n    (pprint-document\n      [:group \"AB\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group \"<AB>\" :line \"B\" :line \"C\"]\n      {:width 6}) \n    (println \"--\")\n    (pprint-document\n      [:group [:pass \"<\"] \"AB\" [:pass \">\"] :line \"B\" :line \"C\"]\n      {:width 6}))\n\n  (def ex1\n    [:group \"[\"\n        [:nest 2\n            [:line \"\"] \"0,\"\n            :line \"1,\"\n            :line \"2,\"\n            :line \"3\"\n            [:line \"\"]]\n        \"]\"])\n\n  (pprint-document ex1 {:width 20})\n  (pprint-document ex1 {:width 6})\n\n  (def ex2\n    [:span \"[\"\n        [:align\n            [:group [:line \"\"]] \"0,\"\n            [:group :line] \"1,\"\n            [:group :line] \"2,\"\n            [:group :line] \"3\"]\n        \"]\"])\n\n  (pprint-document ex2 {:width 20})\n  (pprint-document ex2 {:width 6})\n\n)\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/fipp","js/fipp.engine","js/fipp.engine.serialize-node","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__32052","cljs.core/MultiFn","cljs.core.symbol","fipp.engine/serialize-node","cljs.core/first","fipp.engine/serialize","doc","cljs.core/seq?","cljs.core.mapcat","cljs.core/Keyword","cljs.core/vector?","cljs.core.ex_info","p__32053","vec__32054","seq__32055","cljs.core/seq","first__32056","cljs.core/next","_","text","cljs.core.apply","cljs.core/str","p__32060","vec__32061","seq__32062","first__32063","p__32064","vec__32065","cljs.core.nth","js/Error","p__32068","vec__32069","seq__32070","first__32071","children","p__32073","vec__32074","inline","terminate","or__4126__auto__","p__32077","vec__32078","seq__32079","first__32080","cljs.core.concat","p__32081","vec__32082","seq__32083","first__32084","args","vec__32085","seq__32086","first__32087","offset","cljs.core/cons","p__32088","vec__32089","seq__32090","first__32091","vec__32092","seq__32093","first__32094","fipp.engine/annotate-rights","rf","pos","cljs.core/volatile!","res","node","delta","G__32095","cljs.core/count","p","G__32096","G__32097","cljs.core.assoc","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","fipp.engine/update-right","seq32101","G__32102","G__32103","self__4723__auto__","deque","f","fipp.deque/conjr","cljs.core/pop","cljs.core/peek","p__32106","map__32107","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","fipp.engine/annotate-begins","width","options","bufs","fipp.deque/empty","p__32109","map__32110","op","right","cljs.core/deref","buffers","cljs.core/empty?","cljs.core._EQ_","position*","buffer","cljs.core/vreset!","fipp.deque/create","buffers*","begin","nodes","fipp.deque/conjlr","cljs.core.reduce","fipp.engine.update_right","cljs.core/update-in","fipp.deque/concat","buffers**","fipp.deque/popl","res*","p__32112","map__32113","fipp.engine/format-nodes","fits","length","tab-stops","column","p__32115","map__32116","indent","format-text","G__32118","G__32119","cljs.core.repeat","G__32126","G__32127","G__32128","cljs.core.conj","x__4214__auto__","y__4215__auto__","fipp.engine/print-fns","map__32130","print-fn","cljs.core/*print-fn*","*print-fn*-orig-val__32132","*print-fn*-temp-val__32133","cljs.core/println","G__32135","fipp.engine/pprint-document","document","fipp.engine.pprint_document","map__32136","cljs.core.merge","print","println","cljs.core.eduction","cljs.core/run!"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$cljs.core/str","~$cljs.core/MultiFn","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-deref","~$fipp.engine/print-fns","~$cljs.core/count","~$cljs.core/deref","~$fipp.deque/conjr","~$cljs.core/reduce","~$cljs.core/apply","~$cljs.core/Keyword","~$js/fipp.engine.serialize-node","~$cljs.core/vreset!","~$fipp.engine/serialize-node","~$cljs.core/concat","~$cljs.core/pop","~$cljs.core/empty?","~$js/fipp.engine","~$cljs.core/conj","~$cljs.core/run!","~$cljs.core/peek","~$fipp.engine/pprint-document","~$cljs.core/-add-method","~$js/fipp","~$cljs.core/-vreset!","~$cljs.core/symbol","~$fipp.engine/format-nodes","~$fipp.deque/concat","~$cljs.core/ex-info","~$fipp.engine/serialize","~$cljs.core/println","~$fipp.engine/update-right","~$fipp.engine/annotate-rights","~$cljs.core/*print-fn*","~$fipp.deque/create","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/eduction","~$cljs.core/update-in","~$fipp.deque/empty","~$js/Error","~$fipp.engine/annotate-begins"]]],"~:cache-keys",["~#cmap",[["^14","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^14","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^14","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2K"]]],["^14","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H"]]],["^14","clojure/core/rrb_vector/rrbt.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","~$clojure.core.rrb-vector.protocols","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^14","clojure/core/rrb_vector.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","^2R","~$clojure.core.rrb-vector.rrbt","~$clojure.core.rrb-vector.interop"]]],["^14","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","clojure/core/rrb_vector/trees.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","^2S"]]],["^14","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R"]]],["^14","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","fipp/deque.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","~$clojure.core.rrb-vector"]]],["^14","fipp/engine.cljc"],["c3dab4003e436d9133e8194afe57d1aea8cfcb4d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","^P"]]],["^14","clojure/core/rrb_vector/transients.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","^2S","^2T"]]],["^14","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H"]]],"~:SHADOW-TIMESTAMP",[1615899884000,1615899884000,1614681766000],["^14","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","~$goog.reflect"]]],["^14","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","~$goog.html.trustedtypes","^2N","^2O","^2P","^2Q"]]],["^14","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","~$goog.html.SafeUrl","^2P","^2Q","^2K"]]],["^14","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^30","^2M","~$goog.html.uncheckedconversions","^2P","^2K"]]],["^14","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","~$goog.dom.TagName","~$goog.dom.tags","^34","^35","~$goog.html.SafeStyleSheet","^30","^2M","^2[","^2N","^2O","~$goog.labs.userAgent.browser","^2J","^2P","^2Q","^2K"]]],["^14","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2J"]]],["^14","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",[]]],["^14","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2J"]]],["^14","clojure/core/rrb_vector/interop.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R","^2R","^2V"]]],["^14","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","~$goog.dom.safe","^36","^2P","^2K"]]],["^14","clojure/core/rrb_vector/protocols.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^R"]]],["^14","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2K"]]],["^14","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","^32","~$goog.math"]]],["^14","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","^33","^34","^35","^3;","^30","^2M","^2P","^2K"]]],["^14","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S"]]],["^14","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","~$goog.math.Long","~$goog.math.Integer","^3?","^2J","^2G","~$goog.Uri","~$goog.string.StringBuffer"]]],["^14","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","^2[","^2P","^2Q"]]],["^14","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","^35","^2J","^2P","^2Q","^2K"]]],["^14","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2Z"]]],["^14","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2G","^2H","^3?"]]],["^14","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2B",["^ ","^2C",null,"^2D",["^I",[]],"^2E",["^S","^2H","^2Q"]]]]],"~:clj-info",["^ ","jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/core.rrb-vector/0.1.1/core.rrb-vector-0.1.1.jar!/clojure/core/rrb_vector/macros.clj",1614681769000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1606738673000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing","^7","fipp/engine.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U"]],"~:shadow/js-access-global",["^I",["Error"]],"^V",null,"~:defs",["^ ","~$serialize-node",["^ ","^J","^1O","^7","fipp/engine.cljc","^8",10,"^9",1,"^:",10,"^;",25,"^5",["^ ","^7","fipp/engine.cljc","^8",10,"^9",11,"^:",10,"^;",25],"~:tag","^1B"],"~$serialize",["^ ","~:protocol-inline",null,"^5",["^ ","^7","fipp/engine.cljc","^8",12,"^9",7,"^:",12,"^;",16,"~:arglists",["^Y",["~$quote",["^Y",[["~$doc"]]]]]],"^J","^23","^7","fipp/engine.cljc","^;",16,"~:method-params",["^Y",[["^4B"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"~:variadic?",false,"^8",12,"~:ret-tag",["^I",["~$cljs.core/IVector","~$any","~$clj-nil"]],"^:",12,"~:max-fixed-arity",1,"~:fn-var",true,"^4@",["^Y",["^4A",["^Y",[["^4B"]]]]]],"~$annotate-rights",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",68,"^9",7,"^:",68,"^;",22,"^4@",["^Y",["^4A",["^Y",[["~$rf"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"^J","^26","^7","fipp/engine.cljc","^;",22,"^4C",["^Y",[["^4N"]]],"^4D",null,"^4E",["^Y",[null,null]],"^9",1,"^4F",false,"^8",68,"^4G","~$function","^:",68,"^4K",1,"^4L",true,"^4@",["^Y",["^4A",["^Y",[["^4N"]]]]],"^6","A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."],"~$update-right",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",89,"^9",7,"^:",89,"^;",19,"^4@",["^Y",["^4A",["^Y",[["^Q","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^4F",true,"~:fixed-arity",2,"^4K",2,"^4C",[["^Y",["^Q","~$f","^4Q"]]],"^4@",["^Y",[["^Q","~$f","~$&","^4Q"]]],"^4E",["^Y",[null]]]],"^J","^25","^7","fipp/engine.cljc","^;",19,"^4R",["^ ","^4F",true,"^4S",2,"^4K",2,"^4C",[["^Y",["^Q","~$f","^4Q"]]],"^4@",["^Y",[["^Q","~$f","~$&","^4Q"]]],"^4E",["^Y",[null]]],"^4C",[["^Y",["^Q","~$f","^4Q"]]],"^4D",null,"^4S",2,"^4E",["^Y",[null]],"^9",1,"^4F",true,"~:methods",[["^ ","^4S",2,"^4F",true,"^4=","^4I"]],"^8",89,"^4G","^4I","^:",89,"^4K",2,"^4L",true,"^4@",["^Y",[["^Q","~$f","~$&","^4Q"]]]],"~$annotate-begins",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",92,"^9",7,"^:",92,"^;",22,"^4@",["^Y",["^4A",["^Y",[[["^ ","~:keys",["~$width"],"^[","~$options"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"^J","^2?","^7","fipp/engine.cljc","^;",22,"^4C",["^Y",[["~$p__32106"]]],"^4D",null,"^4E",["^Y",[null,null]],"^9",1,"^4F",false,"^8",92,"^4G","^4O","^:",92,"^4K",1,"^4L",true,"^4@",["^Y",["^4A",["^Y",[[["^ ","^4V",["^4W"],"^[","^4X"]]]]]],"^6","Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."],"~$format-nodes",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",164,"^9",7,"^:",164,"^;",19,"^4@",["^Y",["^4A",["^Y",[[["^ ","^4V",["^4W"],"^[","^4X"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"^J","^20","^7","fipp/engine.cljc","^;",19,"^4C",["^Y",[["~$p__32112"]]],"^4D",null,"^4E",["^Y",[null,null]],"^9",1,"^4F",false,"^8",164,"^4G","^4O","^:",164,"^4K",1,"^4L",true,"^4@",["^Y",["^4A",["^Y",[[["^ ","^4V",["^4W"],"^[","^4X"]]]]]],"^6","Given printing options, returns a transducer which produces the fully\n  laid-out strings."],"~$print-fns",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",233,"^9",7,"^:",233,"^;",16,"^4@",["^Y",["^4A",["^Y",[["^4X"]]]]]],"^J","^1F","^7","fipp/engine.cljc","^;",16,"^4C",["^Y",[["^4X"]]],"^4D",null,"^4E",["^Y",[null,null]],"^9",1,"^4F",false,"^8",233,"^4G","~$cljs.core/IMap","^:",233,"^4K",1,"^4L",true,"^4@",["^Y",["^4A",["^Y",[["^4X"]]]]]],"~$pprint-document",["^ ","^4?",null,"^5",["^ ","^7","fipp/engine.cljc","^8",247,"^9",7,"^:",247,"^;",22,"^4@",["^Y",["^4A",["^Y",[["~$document"],["^53","^4X"]]]]],"^4R",["^ ","^4F",false,"^4S",2,"^4K",2,"^4C",[["^53"],["^53","^4X"]],"^4@",["^Y",[["^53"],["^53","^4X"]]],"^4E",["^Y",[null,null]]]],"^J","^1W","^7","fipp/engine.cljc","^;",22,"^4R",["^ ","^4F",false,"^4S",2,"^4K",2,"^4C",[["^53"],["^53","^4X"]],"^4@",["^Y",[["^53"],["^53","^4X"]]],"^4E",["^Y",[null,null]]],"^4C",[["^53"],["^53","^4X"]],"^4D",null,"^4S",2,"^4E",["^Y",[null,null]],"^9",1,"^4F",false,"^4T",[["^ ","^4S",1,"^4F",false,"^4=","^4I"],["^ ","^4S",2,"^4F",false,"^4=","^4I"]],"^8",247,"^:",247,"^4K",2,"^4L",true,"^4@",["^Y",[["^53"],["^53","^4X"]]]]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:nest","~:align","~:outdent","~:group","~:else","~:offset","~:default","~:terminate","~:too-far","~:println","~:width","^L","~:node","~:print","~:begin","~:break","~:nodes","^8","~:print-fn","~:right","~:escaped","~:position","~:pass","~:end","~:hierarchy","~:inline","~:text","~:span"]],"~:order",["^5K","^5;","^L","^5M","^59","^5@","^5I","^5G","^5N","^8","^5L","^5<","^5C","^58","^5B","^5J","^55","^5:","^57","^56","^5F","^5?","^5H","^5D","^5=","^5E","^5A","^5>"]],"^10",["^ ","^U",["^I",[]]],"^11",["^ "],"^12",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2A",[["^5R","~:static-fns"],true,["^5R","~:shadow-tweaks"],null,["^5R","~:source-map-inline"],null,["^5R","~:elide-asserts"],false,["^5R","~:optimize-constants"],null,["^5R","^17"],null,["^5R","~:external-config"],null,["^5R","~:tooling-config"],null,["^5R","~:emit-constants"],null,["^5R","~:load-tests"],null,["^5R","~:form-size-threshold"],null,["^5R","~:data-readers"],null,["^5R","~:infer-externs"],"~:auto",["^5R","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5R","~:fn-invoke-direct"],null,["^5R","~:source-map"],"/dev/null"]]]