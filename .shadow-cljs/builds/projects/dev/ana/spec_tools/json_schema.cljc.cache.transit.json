["^ ","~:output",["^ ","~:js","goog.provide('spec_tools.json_schema');\nspec_tools.json_schema.only_entry_QMARK_ = (function spec_tools$json_schema$only_entry_QMARK_(key,a_map){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null),cljs.core.keys(a_map));\n});\nspec_tools.json_schema.simplify_all_of = (function spec_tools$json_schema$simplify_all_of(spec){\nvar subspecs = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.empty_QMARK_,new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143).cljs$core$IFn$_invoke$arity$1(spec));\nif(cljs.core.empty_QMARK_(subspecs)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(spec,new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143));\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(subspecs),(1))) && (spec_tools.json_schema.only_entry_QMARK_(new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143),spec)))){\nreturn cljs.core.first(subspecs);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(spec,new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143),subspecs);\n\n}\n}\n});\nspec_tools.json_schema.spec_dispatch = (function spec_tools$json_schema$spec_dispatch(dispatch,_,___$1,___$2){\nreturn dispatch;\n});\nif((typeof spec_tools !== 'undefined') && (typeof spec_tools.json_schema !== 'undefined') && (typeof spec_tools.json_schema.accept_spec !== 'undefined')){\n} else {\nspec_tools.json_schema.accept_spec = (function (){var method_table__4619__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4620__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4621__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4622__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4623__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),new cljs.core.Keyword(\"spec-tools.json-schema\",\"default\",\"spec-tools.json-schema/default\",-2093938695)], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__31499 = cljs.core.get_global_hierarchy;\nreturn (fexpr__31499.cljs$core$IFn$_invoke$arity$0 ? fexpr__31499.cljs$core$IFn$_invoke$arity$0() : fexpr__31499.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"spec-tools.json-schema\",\"accept-spec\"),spec_tools.json_schema.spec_dispatch,new cljs.core.Keyword(\"spec-tools.json-schema\",\"default\",\"spec-tools.json-schema/default\",-2093938695),hierarchy__4623__auto__,method_table__4619__auto__,prefer_table__4620__auto__,method_cache__4621__auto__,cached_hierarchy__4622__auto__));\n})();\n}\nspec_tools.json_schema.transform = (function spec_tools$json_schema$transform(var_args){\nvar G__31501 = arguments.length;\nswitch (G__31501) {\ncase 1:\nreturn spec_tools.json_schema.transform.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn spec_tools.json_schema.transform.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(spec_tools.json_schema.transform.cljs$core$IFn$_invoke$arity$1 = (function (spec){\nreturn spec_tools.json_schema.transform.cljs$core$IFn$_invoke$arity$2(spec,null);\n}));\n\n(spec_tools.json_schema.transform.cljs$core$IFn$_invoke$arity$2 = (function (spec,options){\nreturn spec_tools.visitor.visit.cljs$core$IFn$_invoke$arity$3(spec,spec_tools.json_schema.accept_spec,options);\n}));\n\n(spec_tools.json_schema.transform.cljs$lang$maxFixedArity = 2);\n\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"any?\",\"clojure.core/any?\",-1093069272,null),(function (_,___$1,___$2,___$3){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"some?\",\"clojure.core/some?\",-543337038,null),(function (_,___$1,___$2,___$3){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"number?\",\"clojure.core/number?\",-1044499897,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"number\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"double\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"pos?\",\"clojure.core/pos?\",-1488817391,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0),new cljs.core.Keyword(null,\"exclusiveMinimum\",\"exclusiveMinimum\",-869557322),true], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"neg?\",\"clojure.core/neg?\",2101495502,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(0),new cljs.core.Keyword(null,\"exclusiveMaximum\",\"exclusiveMaximum\",1883434466),true], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"integer?\",\"clojure.core/integer?\",-1617881728,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"int?\",\"clojure.core/int?\",1026034806,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"int64\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"pos-int?\",\"clojure.core/pos-int?\",-1946393424,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"int64\",new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(1)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"neg-int?\",\"clojure.core/neg-int?\",-830554117,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"int64\",new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(-1)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"nat-int?\",\"clojure.core/nat-int?\",-65390525,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"int64\",new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"float?\",\"clojure.core/float?\",-99660463,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"number\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"double?\",\"clojure.core/double?\",1847770331,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"number\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"boolean?\",\"clojure.core/boolean?\",1566259823,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"string?\",\"clojure.core/string?\",-1902673477,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"ident?\",\"clojure.core/ident?\",1397717549,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"simple-ident?\",\"clojure.core/simple-ident?\",1706467712,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"qualified-ident?\",\"clojure.core/qualified-ident?\",-1630579588,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"keyword?\",\"clojure.core/keyword?\",543424180,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"simple-keyword?\",\"clojure.core/simple-keyword?\",406342760,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"qualified-keyword?\",\"clojure.core/qualified-keyword?\",-398139912,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"symbol?\",\"clojure.core/symbol?\",1587987784,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"simple-symbol?\",\"clojure.core/simple-symbol?\",-1919094963,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"qualified-symbol?\",\"clojure.core/qualified-symbol?\",1469032566,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"uuid?\",\"clojure.core/uuid?\",-100722718,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"uuid\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"uri?\",\"clojure.core/uri?\",1255469701,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"uri\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"decimal?\",\"clojure.core/decimal?\",1494290495,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"number\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"double\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"inst?\",\"clojure.core/inst?\",-1302678916,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"date-time\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"seqable?\",\"clojure.core/seqable?\",-696461980,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"map?\",\"clojure.core/map?\",-1425864013,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"map?\",\"clojure.core/map?\",-1425864013,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"vector?\",\"clojure.core/vector?\",-1380385430,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"list?\",\"clojure.core/list?\",-775099136,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"seq?\",\"clojure.core/seq?\",-1182659926,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"char?\",\"clojure.core/char?\",372498287,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"set?\",\"clojure.core/set?\",-1275117977,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"uniqueItems\",\"uniqueItems\",-826722268),true], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"nil?\",\"clojure.core/nil?\",842444475,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"null\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"false?\",\"clojure.core/false?\",-1754275840,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"true?\",\"clojure.core/true?\",-21483202,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"zero?\",\"clojure.core/zero?\",-313584680,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"coll?\",\"clojure.core/coll?\",1311547908,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"empty?\",\"clojure.core/empty?\",1788889970,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"maxItems\",\"maxItems\",576652798),(0),new cljs.core.Keyword(null,\"minItems\",\"minItems\",1950622069),(0)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"associative?\",\"clojure.core/associative?\",634514106,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"sequential?\",\"clojure.core/sequential?\",1943138316,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"ratio?\",\"clojure.core/ratio?\",-1335626656,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.core\",\"bytes?\",\"clojure.core/bytes?\",-1005648998,null),(function (_,___$1,___$2,___$3){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),\"byte\"], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.visitor\",\"set\",\"spec-tools.visitor/set\",1650075415),(function (dispatch,spec,children,_){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"enum\",\"enum\",1679018432),children], null);\n}));\nspec_tools.json_schema.maybe_with_title = (function spec_tools$json_schema$maybe_with_title(schema,spec,options){\nvar infer_titles_QMARK_ = (function spec_tools$json_schema$maybe_with_title_$_infer_titles_QMARK_(options__$1){\nreturn (!(new cljs.core.Keyword(null,\"infer-titles\",\"infer-titles\",-475775298).cljs$core$IFn$_invoke$arity$1(options__$1) === false));\n});\nvar temp__5733__auto__ = (function (){var and__4115__auto__ = infer_titles_QMARK_(options);\nif(cljs.core.truth_(and__4115__auto__)){\nreturn spec_tools.core.spec_name(spec);\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5733__auto__)){\nvar title = temp__5733__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(schema,new cljs.core.Keyword(null,\"title\",\"title\",636505583),spec_tools.impl.qualified_name(title));\n} else {\nreturn schema;\n}\n});\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"keys\",\"clojure.spec.alpha/keys\",-90227326,null),(function (_,spec,children,options){\nvar map__31502 = spec_tools.impl.parse_keys(spec_tools.impl.extract_form(spec));\nvar map__31502__$1 = (((((!((map__31502 == null))))?(((((map__31502.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__31502.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__31502):map__31502);\nvar req = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31502__$1,new cljs.core.Keyword(null,\"req\",\"req\",-326448303));\nvar req_un = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31502__$1,new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008));\nvar opt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31502__$1,new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369));\nvar opt_un = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31502__$1,new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496));\nvar names_un = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(req_un,opt_un));\nvar names = cljs.core.map.cljs$core$IFn$_invoke$arity$2(spec_tools.impl.qualified_name,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(req,opt));\nvar required = cljs.core.map.cljs$core$IFn$_invoke$arity$2(spec_tools.impl.qualified_name,req);\nvar required_un = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,req_un);\nvar all_required = cljs.core.not_empty(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(required,required_un));\nreturn spec_tools.json_schema.maybe_with_title(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\",new cljs.core.Keyword(null,\"properties\",\"properties\",685819552),cljs.core.zipmap(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(names,names_un),children)], null),(cljs.core.truth_(all_required)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"required\",\"required\",1807647006),cljs.core.vec(all_required)], null):null)], 0)),spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"or\",\"clojure.spec.alpha/or\",434904251,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"anyOf\",\"anyOf\",-1046092155),children], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"and\",\"clojure.spec.alpha/and\",-843882543,null),(function (_,___$1,children,___$2){\nreturn spec_tools.json_schema.simplify_all_of(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143),children], null));\n}));\nspec_tools.json_schema.accept_merge = (function spec_tools$json_schema$accept_merge(children,spec,options){\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\",new cljs.core.Keyword(null,\"properties\",\"properties\",685819552),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"properties\",\"properties\",685819552),cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(children,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"anyOf\",\"anyOf\",-1046092155),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children], 0)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children], 0))], 0)))),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.sorted_set(),cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"required\",\"required\",1807647006),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(children,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"allOf\",\"allOf\",857821143),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children], 0))))))], null),spec,options);\n});\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"merge\",\"clojure.spec.alpha/merge\",472136035,null),(function (_,spec,children,options){\nreturn spec_tools.json_schema.accept_merge(children,spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"spec-tools.core\",\"merge\",\"spec-tools.core/merge\",2048449266,null),(function (_,spec,children,options){\nreturn spec_tools.json_schema.accept_merge(children,spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"every\",\"clojure.spec.alpha/every\",-1327408778,null),(function (_,spec,children,options){\nvar form = spec_tools.impl.extract_form(spec);\nvar map__31504 = spec_tools.parse.parse_spec.cljs$core$IFn$_invoke$arity$1(form);\nvar map__31504__$1 = (((((!((map__31504 == null))))?(((((map__31504.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__31504.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__31504):map__31504);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__31504__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar G__31506 = type;\nvar G__31506__$1 = (((G__31506 instanceof cljs.core.Keyword))?G__31506.fqn:null);\nswitch (G__31506__$1) {\ncase \"map\":\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\",new cljs.core.Keyword(null,\"additionalProperties\",\"additionalProperties\",-1203767392),spec_tools.impl.unwrap(children)], null),spec,options);\n\nbreak;\ncase \"set\":\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"uniqueItems\",\"uniqueItems\",-826722268),true,new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children)], null);\n\nbreak;\ncase \"vector\":\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children)], null);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__31506__$1)].join('')));\n\n}\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"every-kv\",\"clojure.spec.alpha/every-kv\",814515928,null),(function (_,spec,children,options){\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\",new cljs.core.Keyword(null,\"additionalProperties\",\"additionalProperties\",-1203767392),cljs.core.second(children)], null),spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.visitor\",\"map-of\",\"spec-tools.visitor/map-of\",-972613908),(function (_,spec,children,options){\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"object\",new cljs.core.Keyword(null,\"additionalProperties\",\"additionalProperties\",-1203767392),cljs.core.second(children)], null),spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.visitor\",\"set-of\",\"spec-tools.visitor/set-of\",983982444),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children),new cljs.core.Keyword(null,\"uniqueItems\",\"uniqueItems\",-826722268),true], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.visitor\",\"vector-of\",\"spec-tools.visitor/vector-of\",-1693991985),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"*\",\"clojure.spec.alpha/*\",-21649262,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"+\",\"clojure.spec.alpha/+\",96423191,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children),new cljs.core.Keyword(null,\"minItems\",\"minItems\",1950622069),(1)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"?\",\"clojure.spec.alpha/?\",-1775438615,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),spec_tools.impl.unwrap(children),new cljs.core.Keyword(null,\"minItems\",\"minItems\",1950622069),(0)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"alt\",\"clojure.spec.alpha/alt\",-612316618,null),(function (_,spec,children,options){\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"anyOf\",\"anyOf\",-1046092155),children], null),spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"cat\",\"clojure.spec.alpha/cat\",-523389547,null),(function (_,spec,children,options){\nreturn spec_tools.json_schema.maybe_with_title(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"anyOf\",\"anyOf\",-1046092155),children], null)], null),spec,options);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"tuple\",\"clojure.spec.alpha/tuple\",800350846,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"array\",new cljs.core.Keyword(null,\"items\",\"items\",1031954938),children], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"nilable\",\"clojure.spec.alpha/nilable\",-1718644550,null),(function (_,___$1,children,___$2){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"oneOf\",\"oneOf\",1209080187),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [spec_tools.impl.unwrap(children),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"null\"], null)], null)], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"clojure.spec.alpha\",\"int-in-range?\",\"clojure.spec.alpha/int-in-range?\",1543841882,null),(function (_,spec,___$1,___$2){\nvar vec__31507 = spec_tools.impl.strip_fn_if_needed(spec);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31507,(0),null);\nvar minimum = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31507,(1),null);\nvar maximum = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31507,(2),null);\nvar ___$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31507,(3),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),minimum,new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),maximum], null);\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.visitor\",\"spec\",\"spec-tools.visitor/spec\",1770325200),(function (_,spec,children,___$1){\nvar vec__31510 = spec_tools.impl.extract_form(spec);\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31510,(0),null);\nvar data = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31510,(1),null);\nvar name = spec_tools.core.spec_name(spec);\nvar synthetic_QMARK_ = new cljs.core.Keyword(\"spec-tools.core\",\"synthetic?\",\"spec-tools.core/synthetic?\",-2118167094).cljs$core$IFn$_invoke$arity$1(spec_tools.core.get_spec(spec));\nvar json_schema_meta = spec_tools.impl.unlift_keys(data,\"json-schema\");\nvar extra_info = (function (){var G__31513 = cljs.core.select_keys(data,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"description\",\"description\",-1428560544)], null));\nif(cljs.core.truth_((function (){var and__4115__auto__ = name;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(synthetic_QMARK_);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__31513,new cljs.core.Keyword(null,\"title\",\"title\",636505583),spec_tools.impl.qualified_name(name));\n} else {\nreturn G__31513;\n}\n})();\nvar or__4126__auto__ = new cljs.core.Keyword(null,\"json-schema\",\"json-schema\",389191695).cljs$core$IFn$_invoke$arity$1(data);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([spec_tools.impl.unwrap(children),extra_info,json_schema_meta], 0));\n}\n}));\nspec_tools.json_schema.accept_spec.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"spec-tools.json-schema\",\"default\",\"spec-tools.json-schema/default\",-2093938695),(function (_,___$1,___$2,___$3){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Tools for converting specs into JSON Schemata. The version of JSON-Schema\n  generated is [draft-04](https://json-schema.org/specification-links.html#draft-4).","~:file","spec_tools/json_schema.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",27],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$spec-tools.json-schema","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$impl","~$spec-tools.impl","^Q","^Q","~$cljs.core","^R","~$spec-tools.parse","^S","~$goog","^T","~$spec-tools.visitor","^U","~$spec-tools.core","^V","~$st","^V","~$parse","^S","~$visitor","^U"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R","^P","^Q","^Q","^Q","^V","^V","^W","^V"],"~:form",["~#list",["~$ns","^K","Tools for converting specs into JSON Schemata. The version of JSON-Schema\n  generated is [draft-04](https://json-schema.org/specification-links.html#draft-4).",["^13",["^[",["^U","~:as","^Y"],["^S","^15","^X"],["^Q","^15","^P"],["^V","^15","^W"]]]]],"~:flags",["^ ","^[",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^R","^U","^S","^Q","^V"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","spec_tools/json_schema.cljc"],"~:compiled-at",1621517182928,"~:resource-name","spec_tools/json_schema.cljc","~:warnings",[],"~:source","(ns spec-tools.json-schema\n  \"Tools for converting specs into JSON Schemata. The version of JSON-Schema\n  generated is [draft-04](https://json-schema.org/specification-links.html#draft-4).\"\n  (:require [spec-tools.visitor :as visitor]\n            [spec-tools.parse :as parse]\n            [spec-tools.impl :as impl]\n            [spec-tools.core :as st]))\n\n(defn- only-entry? [key a-map] (= [key] (keys a-map)))\n\n(defn- simplify-all-of [spec]\n  (let [subspecs (->> (:allOf spec) (remove empty?))]\n    (cond\n      (empty? subspecs) (dissoc spec :allOf)\n      (and (= (count subspecs) 1) (only-entry? :allOf spec)) (first subspecs)\n      :else (assoc spec :allOf subspecs))))\n\n(defn- spec-dispatch [dispatch _ _ _] dispatch)\n\n(defmulti accept-spec spec-dispatch :default ::default)\n\n(defn transform\n  ([spec]\n   (transform spec nil))\n  ([spec options]\n   (visitor/visit spec accept-spec options)))\n\n;;\n;; predicate list taken from https://github.com/clojure/clojure/blob/master/src/clj/clojure/spec/gen.clj\n;;\n\n; any? (one-of [(return nil) (any-printable)])\n(defmethod accept-spec 'clojure.core/any? [_ _ _ _] {})\n\n; some? (such-that some? (any-printable))\n(defmethod accept-spec 'clojure.core/some? [_ _ _ _] {})\n\n; number? (one-of [(large-integer) (double)])\n(defmethod accept-spec 'clojure.core/number? [_ _ _ _] {:type \"number\" :format \"double\"})\n\n(defmethod accept-spec 'clojure.core/pos? [_ _ _ _] {:minimum 0 :exclusiveMinimum true})\n\n(defmethod accept-spec 'clojure.core/neg? [_ _ _ _] {:maximum 0 :exclusiveMaximum true})\n\n; integer? (large-integer)\n(defmethod accept-spec 'clojure.core/integer? [_ _ _ _] {:type \"integer\"})\n\n; int? (large-integer)\n(defmethod accept-spec 'clojure.core/int? [_ _ _ _] {:type \"integer\" :format \"int64\"})\n\n; pos-int? (large-integer* {:min 1})\n(defmethod accept-spec 'clojure.core/pos-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :minimum 1})\n\n; neg-int? (large-integer* {:max -1})\n(defmethod accept-spec 'clojure.core/neg-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :maximum -1})\n\n; nat-int? (large-integer* {:min 0})\n(defmethod accept-spec 'clojure.core/nat-int? [_ _ _ _] {:type \"integer\", :format \"int64\" :minimum 0})\n\n; float? (double)\n(defmethod accept-spec 'clojure.core/float? [_ _ _ _] {:type \"number\"})\n\n; double? (double)\n(defmethod accept-spec 'clojure.core/double? [_ _ _ _] {:type \"number\"})\n\n; boolean? (boolean)\n(defmethod accept-spec 'clojure.core/boolean? [_ _ _ _] {:type \"boolean\"})\n\n; string? (string-alphanumeric)\n(defmethod accept-spec 'clojure.core/string? [_ _ _ _] {:type \"string\"})\n\n; ident? (one-of [(keyword-ns) (symbol-ns)])\n(defmethod accept-spec 'clojure.core/ident? [_ _ _ _] {:type \"string\"})\n\n; simple-ident? (one-of [(keyword) (symbol)])\n(defmethod accept-spec 'clojure.core/simple-ident? [_ _ _ _] {:type \"string\"})\n\n; qualified-ident? (such-that qualified? (one-of [(keyword-ns) (symbol-ns)]))\n(defmethod accept-spec 'clojure.core/qualified-ident? [_ _ _ _] {:type \"string\"})\n\n; keyword? (keyword-ns)\n(defmethod accept-spec 'clojure.core/keyword? [_ _ _ _] {:type \"string\"})\n\n; simple-keyword? (keyword)\n(defmethod accept-spec 'clojure.core/simple-keyword? [_ _ _ _] {:type \"string\"})\n\n; qualified-keyword? (such-that qualified? (keyword-ns))\n(defmethod accept-spec 'clojure.core/qualified-keyword? [_ _ _ _] {:type \"string\"})\n\n; symbol? (symbol-ns)\n(defmethod accept-spec 'clojure.core/symbol? [_ _ _ _] {:type \"string\"})\n\n; simple-symbol? (symbol)\n(defmethod accept-spec 'clojure.core/simple-symbol? [_ _ _ _] {:type \"string\"})\n\n; qualified-symbol? (such-that qualified? (symbol-ns))\n(defmethod accept-spec 'clojure.core/qualified-symbol? [_ _ _ _] {:type \"string\"})\n\n; uuid? (uuid)\n(defmethod accept-spec 'clojure.core/uuid? [_ _ _ _] {:type \"string\" :format \"uuid\"})\n\n; uri? (fmap #(java.net.URI/create (str \"http://\" % \".com\")) (uuid))\n(defmethod accept-spec 'clojure.core/uri? [_ _ _ _] {:type \"string\" :format \"uri\"})\n\n; bigdec? (fmap #(BigDecimal/valueOf %)\n;               (double* {:infinite? false :NaN? false}))\n(defmethod accept-spec 'clojure.core/decimal? [_ _ _ _] {:type \"number\" :format \"double\"})\n\n; inst? (fmap #(java.util.Date. %)\n;             (large-integer))\n(defmethod accept-spec 'clojure.core/inst? [_ _ _ _] {:type \"string\" :format \"date-time\"})\n\n; seqable? (one-of [(return nil)\n;                   (list simple)\n;                   (vector simple)\n;                   (map simple simple)\n;                   (set simple)\n;                   (string-alphanumeric)])\n(defmethod accept-spec 'clojure.core/seqable? [_ _ _ _] {:type \"array\"})\n\n; indexed? (vector simple)\n(defmethod accept-spec 'clojure.core/map? [_ _ _ _] {:type \"array\"})\n\n; map? (map simple simple)\n(defmethod accept-spec 'clojure.core/map? [_ _ _ _] {:type \"object\"})\n\n; vector? (vector simple)\n(defmethod accept-spec 'clojure.core/vector? [_ _ _ _] {:type \"array\"})\n\n; list? (list simple)\n(defmethod accept-spec 'clojure.core/list? [_ _ _ _] {:type \"array\"})\n\n; seq? (list simple)\n(defmethod accept-spec 'clojure.core/seq? [_ _ _ _] {:type \"array\"})\n\n; char? (char)\n(defmethod accept-spec 'clojure.core/char? [_ _ _ _] {:type \"string\"})\n\n; set? (set simple)\n(defmethod accept-spec 'clojure.core/set? [_ _ _ _] {:type \"array\" :uniqueItems true})\n\n; nil? (return nil)\n(defmethod accept-spec 'clojure.core/nil? [_ _ _ _] {:type \"null\"})\n\n; false? (return false)\n(defmethod accept-spec 'clojure.core/false? [_ _ _ _] {:type \"boolean\"})\n\n; true? (return true)\n(defmethod accept-spec 'clojure.core/true? [_ _ _ _] {:type \"boolean\"})\n\n; zero? (return 0)\n(defmethod accept-spec 'clojure.core/zero? [_ _ _ _] {:type \"integer\"})\n\n; rational? (one-of [(large-integer) (ratio)])\n#?(:clj (defmethod accept-spec 'clojure.core/rational? [_ _ _ _] {:type \"double\"}))\n\n; coll? (one-of [(map simple simple)\n;                (list simple)\n;                (vector simple)\n;                (set simple)])\n(defmethod accept-spec 'clojure.core/coll? [_ _ _ _] {:type \"object\"})\n\n; empty? (elements [nil '() [] {} #{}])\n(defmethod accept-spec 'clojure.core/empty? [_ _ _ _] {:type \"array\" :maxItems 0 :minItems 0})\n\n; associative? (one-of [(map simple simple) (vector simple)])\n(defmethod accept-spec 'clojure.core/associative? [_ _ _ _] {:type \"object\"})\n\n; sequential? (one-of [(list simple) (vector simple)])\n(defmethod accept-spec 'clojure.core/sequential? [_ _ _ _] {:type \"array\"})\n\n; ratio? (such-that ratio? (ratio))\n(defmethod accept-spec 'clojure.core/ratio? [_ _ _ _] {:type \"integer\"})\n\n; bytes? (bytes)\n(defmethod accept-spec 'clojure.core/bytes? [_ _ _ _] {:type \"string\" :format \"byte\"})\n\n(defmethod accept-spec ::visitor/set [dispatch spec children _]\n  {:enum children})\n\n(defn- maybe-with-title [schema spec options]\n  (letfn [(infer-titles? [options] (-> options :infer-titles false? not))]\n    (if-let [title (and (infer-titles? options) (st/spec-name spec))]\n      (assoc schema :title (impl/qualified-name title))\n      schema)))\n\n(defmethod accept-spec 'clojure.spec.alpha/keys [_ spec children options]\n  (let [{:keys [req req-un opt opt-un]} (impl/parse-keys (impl/extract-form spec))\n        names-un (map name (concat req-un opt-un))\n        names (map impl/qualified-name (concat req opt))\n        required (map impl/qualified-name req)\n        required-un (map name req-un)\n        all-required (not-empty (concat required required-un))]\n    (maybe-with-title\n      (merge\n        {:type \"object\"\n         :properties (zipmap (concat names names-un) children)}\n        (when all-required\n          {:required (vec all-required)}))\n      spec\n      options)))\n\n(defmethod accept-spec 'clojure.spec.alpha/or [_ _ children _]\n  {:anyOf children})\n\n(defmethod accept-spec 'clojure.spec.alpha/and [_ _ children _]\n  (simplify-all-of {:allOf children}))\n\n(defn- accept-merge [children spec options]\n  (maybe-with-title\n    {:type \"object\"\n     :properties (->> (concat children\n                              (mapcat :anyOf children)\n                              (mapcat :allOf children))\n                      (map :properties)\n                      (reduce merge {}))\n     :required (->> (concat children\n                            (mapcat :allOf children))\n                    (map :required)\n                    (reduce into (sorted-set))\n                    (into []))}\n    spec\n    options))\n\n(defmethod accept-spec 'clojure.spec.alpha/merge [_ spec children options]\n  (accept-merge children spec options))\n\n(defmethod accept-spec 'spec-tools.core/merge [_ spec children options]\n  (accept-merge children spec options))\n\n(defmethod accept-spec 'clojure.spec.alpha/every [_ spec children options]\n  (let [form (impl/extract-form spec)\n        {:keys [type]} (parse/parse-spec form)]\n    (case type\n      :map (maybe-with-title {:type \"object\", :additionalProperties (impl/unwrap children)} spec options)\n      :set {:type \"array\", :uniqueItems true, :items (impl/unwrap children)}\n      :vector {:type \"array\", :items (impl/unwrap children)})))\n\n(defmethod accept-spec 'clojure.spec.alpha/every-kv [_ spec children options]\n  (maybe-with-title {:type \"object\", :additionalProperties (second children)} spec options))\n\n(defmethod accept-spec ::visitor/map-of [_ spec children options]\n  (maybe-with-title {:type \"object\", :additionalProperties (second children)} spec options))\n\n(defmethod accept-spec ::visitor/set-of [_ _ children _]\n  {:type \"array\", :items (impl/unwrap children), :uniqueItems true})\n\n(defmethod accept-spec ::visitor/vector-of [_ _ children _]\n  {:type \"array\", :items (impl/unwrap children)})\n\n(defmethod accept-spec 'clojure.spec.alpha/* [_ _ children _]\n  {:type \"array\" :items (impl/unwrap children)})\n\n(defmethod accept-spec 'clojure.spec.alpha/+ [_ _ children _]\n  {:type \"array\" :items (impl/unwrap children) :minItems 1})\n\n(defmethod accept-spec 'clojure.spec.alpha/? [_ _ children _]\n  {:type \"array\" :items (impl/unwrap children) :minItems 0})\n\n(defmethod accept-spec 'clojure.spec.alpha/alt [_ spec children options]\n  (maybe-with-title\n    {:anyOf children}\n    spec\n    options))\n\n(defmethod accept-spec 'clojure.spec.alpha/cat [_ spec children options]\n  (maybe-with-title\n    {:type \"array\"\n     :items {:anyOf children}}\n    spec\n    options))\n\n; &\n\n(defmethod accept-spec 'clojure.spec.alpha/tuple [_ _ children _]\n  {:type \"array\"\n   :items children})\n\n; keys*\n\n(defmethod accept-spec 'clojure.spec.alpha/nilable [_ _ children _]\n  {:oneOf [(impl/unwrap children) {:type \"null\"}]})\n\n;; this is just a function in clojure.spec?\n(defmethod accept-spec 'clojure.spec.alpha/int-in-range? [_ spec _ _]\n  (let [[_ minimum maximum _] (impl/strip-fn-if-needed spec)]\n    {:minimum minimum :maximum maximum}))\n\n(defmethod accept-spec ::visitor/spec [_ spec children _]\n  (let [[_ data] (impl/extract-form spec)\n        name (st/spec-name spec)\n        synthetic? (-> spec st/get-spec ::st/synthetic?)\n        json-schema-meta (impl/unlift-keys data \"json-schema\")\n        extra-info (-> (select-keys data [:description])\n                       (cond-> (and name (not synthetic?))\n                               (assoc :title (impl/qualified-name name))))]\n    (or (:json-schema data)\n        (merge (impl/unwrap children) extra-info json-schema-meta))))\n\n(defmethod accept-spec ::default [_ _ _ _]\n  {})\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["spec-tools.json-schema/only-entry?","key","a-map","cljs.core._EQ_","cljs.core/keys","spec-tools.json-schema/simplify-all-of","spec","subspecs","cljs.core.remove","cljs.core/empty?","cljs.core.dissoc","cljs.core/count","cljs.core/first","cljs.core.assoc","spec-tools.json-schema/spec-dispatch","dispatch","_","js/spec-tools","js/spec-tools.json-schema","js/spec-tools.json-schema.accept-spec","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__31499","cljs.core/MultiFn","cljs.core.symbol","spec-tools.json-schema/accept-spec","var_args","G__31501","spec-tools.json-schema/transform","js/Error","spec_tools.json_schema.transform","options","spec_tools.visitor.visit","children","spec-tools.json-schema/maybe-with-title","schema","temp__5733__auto__","title","and__4115__auto__","infer-titles?","spec-tools.core/spec-name","spec-tools.impl/qualified-name","map__31502","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","req","req-un","opt","opt-un","spec-tools.impl/parse-keys","spec-tools.impl/extract-form","names-un","cljs.core.map","cljs.core/name","cljs.core.concat","names","required","required-un","all-required","cljs.core/not-empty","cljs.core.merge","cljs.core/zipmap","cljs.core/vec","spec-tools.json-schema/accept-merge","cljs.core.mapcat","cljs.core.reduce","cljs.core/merge","cljs.core/into","cljs.core/sorted-set","cljs.core.into","map__31504","form","type","spec_tools.parse.parse_spec","G__31506","cljs.core/Keyword","spec-tools.impl/unwrap","cljs.core/second","vec__31507","cljs.core.nth","minimum","maximum","spec-tools.impl/strip-fn-if-needed","vec__31510","data","name","synthetic?","spec-tools.core/get-spec","json-schema-meta","spec-tools.impl/unlift-keys","extra-info","cljs.core/select-keys","G__31513","cljs.core/not","or__4126__auto__"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$spec-tools.json-schema/accept-merge","~$js/spec-tools.json-schema.accept-spec","~$cljs.core/MultiFn","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/count","~$spec-tools.json-schema/maybe-with-title","~$cljs.core/reduce","~$spec-tools.json-schema/simplify-all-of","~$cljs.core/dissoc","~$js/spec-tools","~$cljs.core/concat","~$spec-tools.json-schema/transform","~$spec-tools.json-schema/only-entry?","~$spec-tools.impl/unwrap","~$cljs.core/empty?","~$cljs.core/into","~$cljs.core/sorted-set","~$cljs.core/zipmap","~$cljs.core/map","~$spec-tools.visitor/visit","~$cljs.core/-add-method","~$js/spec-tools.json-schema","~$spec-tools.impl/qualified-name","~$cljs.core/symbol","~$cljs.core/second","~$cljs.core/vec","~$spec-tools.json-schema/accept-spec","~$cljs.core/assoc","~$cljs.core/first","~$cljs.core/merge","~$spec-tools.json-schema/spec-dispatch","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1:","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^1:","goog/i18n/datetimesymbols.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/spec/gen/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","~$goog.Uri"]]],["^1:","cljs/tools/reader/impl/utils.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","~$clojure.string","~$goog.string"]]],["^1:","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.array","~$goog.asserts"]]],["^1:","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/env.cljc"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R"]]],["^1:","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1:","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2J"]]],["^1:","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G"]]],["^1:","spec_tools/json_schema.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^U","^S","^Q","^V"]]],["^1:","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/tools/reader/edn.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2E","~$goog.string.StringBuffer"]]],["^1:","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/tools/reader/impl/inspect.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R"]]],["^1:","cljs/tools/reader.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2R","^2S","^2T","^2Q","^2F","^2E","^2V"]]],["^1:","goog/date/utcdatetime.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1:","goog/date/datelike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G"]]],"~:SHADOW-TIMESTAMP",[1615899884000,1615899884000,1614681766000],["^1:","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.reflect"]]],["^1:","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.html.trustedtypes","^2M","^2N","^2O","^2P"]]],["^1:","spec_tools/impl.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","~$cljs.analyzer.api","^B","~$spec-tools.form","~$clojure.walk"]]],["^1:","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","~$goog.html.SafeUrl","^2O","^2P","^2J"]]],["^1:","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^35","^2L","~$goog.html.uncheckedconversions","^2O","^2J"]]],["^1:","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R"]]],["^1:","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1:","goog/date/date.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.date.DateLike","~$goog.i18n.DateTimeSymbols","^2E"]]],["^1:","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","~$goog.dom.TagName","~$goog.dom.tags","^39","^3:","~$goog.html.SafeStyleSheet","^35","^2L","^31","^2M","^2N","~$goog.labs.userAgent.browser","^2I","^2O","^2P","^2J"]]],["^1:","spec_tools/transform.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^B","~$goog.date.UtcDateTime","^2X","^2C","~$clojure.set","~$clojure.edn","^S","^Q"]]],["^1:","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2I"]]],["^1:","spec_tools/core.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^Q","^S","^33","^3E","~$spec-tools.transform","^B","^3D","~$cljs.reader","~$cljs.spec.gen.alpha"]]],["^1:","spec_tools/parse.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^Q","^B","^33"]]],["^1:","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2I","^2U","~$cljs.tools.reader.edn","^2V"]]],["^1:","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1:","cljs/tagged_literals.cljc"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^3H"]]],["^1:","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","^2E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1:","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","clojure/edn.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^3H"]]],["^1:","cljs/spec/alpha.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2I","^34","^3I","^2D"]]],["^1:","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","spec_tools/visitor.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^B","^V","^S","^Q","^33"]]],["^1:","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",[]]],["^1:","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2I"]]],["^1:","cljs/tools/reader/impl/errors.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2R","^2D","~$cljs.tools.reader.impl.inspect"]]],["^1:","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2E","^2V"]]],["^1:","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.dom.safe","^3;","^2O","^2J"]]],["^1:","spec_tools/form.cljc"],["52c059e66a83cde4e85c62d6126c9d2872501d9f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^B"]]],["^1:","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2J"]]],["^1:","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/tools/reader/reader_types.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2S","^2E","^2V"]]],["^1:","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","^37","~$goog.math"]]],["^1:","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^38","^39","^3:","^3B","^35","^2L","^2O","^2J"]]],["^1:","cljs/tools/reader/impl/commons.cljs"],["d87b8bf9f6ce87b207d5ac625236d72923b7d71f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2Q","^2R","^2S"]]],["^1:","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^1:","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.math.Long","~$goog.math.Integer","^2E","^2I","^2F","^2C","^2V"]]],["^1:","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^31","^2O","^2P"]]],["^1:","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","^3:","^2I","^2O","^2P","^2J"]]],["^1:","cljs/analyzer/api.cljc"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","~$cljs.analyzer","~$cljs.env"]]],["^1:","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^30"]]],["^1:","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R"]]],["^1:","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2F","^2G","^2E"]]],["^1:","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^2P"]]],["^1:","cljs/analyzer.cljc"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^R","^2E","^2D","^3E","^3X","~$cljs.tagged-literals","^2U","^2R","^3H"]]]]],"~:clj-info",["^ ","jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/gen/alpha.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/gen/alpha.clj",1606738672000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env/macros.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/metosin/spec-tools/0.10.5/spec-tools-0.10.5.jar!/spec_tools/core.cljc",1621517112000,"jar:file:/home/dennis/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj",1606738672000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/metosin/spec-tools/0.10.5/spec-tools-0.10.5.jar!/spec_tools/impl.cljc",1621517112000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/spec/alpha.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/cljs/tools/reader/reader_types.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/metosin/spec-tools/0.10.5/spec-tools-0.10.5.jar!/spec_tools/form.cljc",1621517112000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer/macros.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/metosin/spec-tools/0.10.5/spec-tools-0.10.5.jar!/spec_tools/transform.cljc",1621517112000,"jar:file:/home/dennis/.m2/repository/metosin/spec-tools/0.10.5/spec-tools-0.10.5.jar!/spec_tools/parse.cljc",1621517112000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1606738673000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Tools for converting specs into JSON Schemata. The version of JSON-Schema\n  generated is [draft-04](https://json-schema.org/specification-links.html#draft-4).","^7","spec_tools/json_schema.cljc","^8",1,"^9",5,"^:",1,"^;",27],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^Q","^Q","^Q","^R","^R","^S","^S","^T","^T","^U","^U","^V","^V","^W","^V","^X","^S","^Y","^U"],"^Z",["^I",["^["]],"~:shadow/js-access-global",["^I",["Error"]],"^10",null,"~:defs",["^ ","~$only-entry?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",9,"^9",8,"^:",9,"^;",19,"~:private",true,"~:arglists",["^13",["~$quote",["^13",[["~$key","~$a-map"]]]]]],"^4Z",true,"^J","^1T","^7","spec_tools/json_schema.cljc","^;",19,"~:method-params",["^13",[["^51","^52"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^9",1,"~:variadic?",false,"^8",9,"~:ret-tag","~$boolean","^:",9,"~:max-fixed-arity",2,"~:fn-var",true,"^4[",["^13",["^50",["^13",[["^51","^52"]]]]]],"~$simplify-all-of",["^ ","^4Y",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",11,"^9",8,"^:",11,"^;",23,"^4Z",true,"^4[",["^13",["^50",["^13",[["~$spec"]]]]]],"^4Z",true,"^J","^1O","^7","spec_tools/json_schema.cljc","^;",23,"^53",["^13",[["^5<"]]],"^54",null,"^55",["^13",[null,null]],"^9",1,"^56",false,"^8",11,"^57",["^I",["~$clj","~$any","~$clj-nil"]],"^:",11,"^59",1,"^5:",true,"^4[",["^13",["^50",["^13",[["^5<"]]]]]],"~$spec-dispatch",["^ ","^4Y",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",18,"^9",8,"^:",18,"^;",21,"^4Z",true,"^4[",["^13",["^50",["^13",[["~$dispatch","~$_","~$_","~$_"]]]]]],"^4Z",true,"^J","^2:","^7","spec_tools/json_schema.cljc","^;",21,"^53",["^13",[["^5A","~$_","~$_","~$_"]]],"^54",null,"^55",["^13",[null,null]],"^9",1,"^56",false,"^8",18,"^:",18,"^59",4,"^5:",true,"^4[",["^13",["^50",["^13",[["^5A","~$_","~$_","~$_"]]]]]],"~$accept-spec",["^ ","^J","^26","^7","spec_tools/json_schema.cljc","^8",20,"^9",1,"^:",20,"^;",22,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",20,"^9",11,"^:",20,"^;",22],"~:tag","^1I"],"~$transform",["^ ","^4Y",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",22,"^9",7,"^:",22,"^;",16,"^4[",["^13",["^50",["^13",[["^5<"],["^5<","~$options"]]]]],"~:top-fn",["^ ","^56",false,"~:fixed-arity",2,"^59",2,"^53",[["^5<"],["^5<","^5E"]],"^4[",["^13",[["^5<"],["^5<","^5E"]]],"^55",["^13",[null,null]]]],"^J","^1S","^7","spec_tools/json_schema.cljc","^;",16,"^5F",["^ ","^56",false,"^5G",2,"^59",2,"^53",[["^5<"],["^5<","^5E"]],"^4[",["^13",[["^5<"],["^5<","^5E"]]],"^55",["^13",[null,null]]],"^53",[["^5<"],["^5<","^5E"]],"^54",null,"^5G",2,"^55",["^13",[null,null]],"^9",1,"^56",false,"~:methods",[["^ ","^5G",1,"^56",false,"^5C","^5>"],["^ ","^5G",2,"^56",false,"^5C","^5>"]],"^8",22,"^:",22,"^59",2,"^5:",true,"^4[",["^13",[["^5<"],["^5<","^5E"]]]],"~$maybe-with-title",["^ ","^4Y",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",181,"^9",8,"^:",181,"^;",24,"^4Z",true,"^4[",["^13",["^50",["^13",[["~$schema","^5<","^5E"]]]]]],"^4Z",true,"^J","^1M","^7","spec_tools/json_schema.cljc","^;",24,"^53",["^13",[["^5J","^5<","^5E"]]],"^54",null,"^55",["^13",[null,null]],"^9",1,"^56",false,"^8",181,"^:",181,"^59",3,"^5:",true,"^4[",["^13",["^50",["^13",[["^5J","^5<","^5E"]]]]]],"~$accept-merge",["^ ","^4Y",null,"^5",["^ ","^7","spec_tools/json_schema.cljc","^8",209,"^9",8,"^:",209,"^;",20,"^4Z",true,"^4[",["^13",["^50",["^13",[["~$children","^5<","^5E"]]]]]],"^4Z",true,"^J","^1G","^7","spec_tools/json_schema.cljc","^;",20,"^53",["^13",[["^5L","^5<","^5E"]]],"^54",null,"^55",["^13",[null,null]],"^9",1,"^56",false,"^8",209,"^57","^5>","^:",209,"^59",3,"^5:",true,"^4[",["^13",["^50",["^13",[["^5L","^5<","^5E"]]]]]]],"^11",["^ ","^R","^R","^P","^Q","^Q","^Q","^V","^V","^W","^V"],"~:cljs.analyzer/constants",["^ ","^Z",["^I",["~$clojure.core/false?","~$clojure.core/ratio?","~$clojure.core/list?","~:description","~$clojure.core/integer?","~$clojure.core/simple-ident?","~:enum","~:properties","~:req-un","~:opt-un","~:additionalProperties","~:format","~$clojure.spec.alpha/keys","~:exclusiveMaximum","~$clojure.core/uuid?","~$clojure.core/nat-int?","~$clojure.spec.alpha/merge","~:uniqueItems","~$clojure.core/seqable?","~$clojure.core/coll?","~:anyOf","~$clojure.core/uri?","~:else","~$clojure.core/number?","~$clojure.core/set?","~$clojure.core/simple-keyword?","~:default","~$clojure.core/symbol?","~$clojure.core/any?","~$clojure.spec.alpha/?","~$clojure.core/vector?","~:maximum","~:spec-tools.core/synthetic?","~$clojure.core/seq?","~$clojure.core/sequential?","~:spec-tools.visitor/set-of","~:type","~:spec-tools.visitor/map-of","~$clojure.core/ident?","~$clojure.core/simple-symbol?","~$clojure.core/neg?","~:json-schema","~:title","~$clojure.core/boolean?","~$clojure.core/char?","~:spec-tools.visitor/vector-of","~$clojure.core/pos-int?","~:spec-tools.visitor/spec","~$clojure.core/float?","~$clojure.core/pos?","~:req","~$clojure.spec.alpha/and","~$clojure.spec.alpha/*","~$clojure.core/some?","~$spec-tools.core/merge","~$clojure.core/empty?","~$clojure.core/map?","~$clojure.core/keyword?","~:minimum","~:minItems","~$clojure.spec.alpha/cat","~$clojure.core/int?","~$clojure.core/qualified-symbol?","~$clojure.spec.alpha/every","~$clojure.spec.alpha/alt","~:exclusiveMinimum","~$clojure.spec.alpha/+","~:spec-tools.visitor/set","~:allOf","~$clojure.core/qualified-keyword?","~$clojure.spec.alpha/every-kv","~$clojure.core/zero?","~:spec-tools.json-schema/default","~$clojure.spec.alpha/int-in-range?","~$clojure.spec.alpha/nilable","~:items","~$clojure.core/associative?","~$clojure.core/bytes?","~$clojure.spec.alpha/or","~$clojure.core/double?","~:oneOf","~:hierarchy","~$clojure.core/string?","~$clojure.core/nil?","~$clojure.core/neg-int?","~$clojure.core/qualified-ident?","~$clojure.core/inst?","~:required","~$clojure.core/true?","~:maxItems","~$clojure.spec.alpha/tuple","~:infer-titles","~$clojure.core/decimal?","~:opt"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2=",[["^7W","~:static-fns"],true,["^7W","~:shadow-tweaks"],null,["^7W","~:source-map-inline"],null,["^7W","~:elide-asserts"],false,["^7W","~:optimize-constants"],null,["^7W","^1="],null,["^7W","~:external-config"],null,["^7W","~:tooling-config"],null,["^7W","~:emit-constants"],null,["^7W","~:load-tests"],null,["^7W","~:form-size-threshold"],null,["^7W","~:data-readers"],null,["^7W","~:infer-externs"],"~:auto",["^7W","^1?"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7W","~:fn-invoke-direct"],null,["^7W","~:source-map"],"/dev/null"]]]