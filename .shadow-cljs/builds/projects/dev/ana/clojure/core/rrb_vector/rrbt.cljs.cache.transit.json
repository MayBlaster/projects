["^ ","~:output",["^ ","~:js","goog.provide('clojure.core.rrb_vector.rrbt');\nclojure.core.rrb_vector.rrbt.rrbt_concat_threshold = (33);\nclojure.core.rrb_vector.rrbt.max_extra_search_steps = (2);\n\n/**\n * @interface\n */\nclojure.core.rrb_vector.rrbt.IVecImpl = function(){};\n\nvar clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$dyn_31865 = (function (v){\nvar x__4428__auto__ = (((v == null))?null:v);\nvar m__4429__auto__ = (clojure.core.rrb_vector.rrbt._tail_offset[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(v) : m__4429__auto__.call(null,v));\n} else {\nvar m__4426__auto__ = (clojure.core.rrb_vector.rrbt._tail_offset[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(v) : m__4426__auto__.call(null,v));\n} else {\nthrow cljs.core.missing_protocol(\"IVecImpl.-tail-offset\",v);\n}\n}\n});\nclojure.core.rrb_vector.rrbt._tail_offset = (function clojure$core$rrb_vector$rrbt$_tail_offset(v){\nif((((!((v == null)))) && ((!((v.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1 == null)))))){\nreturn v.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(v);\n} else {\nreturn clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$dyn_31865(v);\n}\n});\n\nvar clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$dyn_31866 = (function (v,i){\nvar x__4428__auto__ = (((v == null))?null:v);\nvar m__4429__auto__ = (clojure.core.rrb_vector.rrbt._array_for[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(v,i) : m__4429__auto__.call(null,v,i));\n} else {\nvar m__4426__auto__ = (clojure.core.rrb_vector.rrbt._array_for[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(v,i) : m__4426__auto__.call(null,v,i));\n} else {\nthrow cljs.core.missing_protocol(\"IVecImpl.-array-for\",v);\n}\n}\n});\nclojure.core.rrb_vector.rrbt._array_for = (function clojure$core$rrb_vector$rrbt$_array_for(v,i){\nif((((!((v == null)))) && ((!((v.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2 == null)))))){\nreturn v.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(v,i);\n} else {\nreturn clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$dyn_31866(v,i);\n}\n});\n\n\n/**\n * @interface\n */\nclojure.core.rrb_vector.rrbt.AsRRBT = function(){};\n\nvar clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$dyn_31867 = (function (v){\nvar x__4428__auto__ = (((v == null))?null:v);\nvar m__4429__auto__ = (clojure.core.rrb_vector.rrbt._as_rrbt[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(v) : m__4429__auto__.call(null,v));\n} else {\nvar m__4426__auto__ = (clojure.core.rrb_vector.rrbt._as_rrbt[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(v) : m__4426__auto__.call(null,v));\n} else {\nthrow cljs.core.missing_protocol(\"AsRRBT.-as-rrbt\",v);\n}\n}\n});\nclojure.core.rrb_vector.rrbt._as_rrbt = (function clojure$core$rrb_vector$rrbt$_as_rrbt(v){\nif((((!((v == null)))) && ((!((v.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 == null)))))){\nreturn v.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1(v);\n} else {\nreturn clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$dyn_31867(v);\n}\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ASeq}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IChunkedNext}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ISeq}\n * @implements {cljs.core.INext}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IChunkedSeq}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IReduce}\n*/\nclojure.core.rrb_vector.rrbt.RRBChunkedSeq = (function (vec,node,i,off,meta,__hash){\nthis.vec = vec;\nthis.node = node;\nthis.i = i;\nthis.off = off;\nthis.meta = meta;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2179858668;\nthis.cljs$lang$protocol_mask$partition1$ = 1536;\n});\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.toString = (function (){\nvar self__ = this;\nvar coll = this;\nreturn cljs.core.pr_str_STAR_(coll);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this$,writer,opts){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,\"(\",\" \",\")\",opts,this$__$1);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nreturn self__.meta;\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nif(((self__.off + (1)) < self__.node.length)){\nvar s = (function (){var G__31791 = self__.vec;\nvar G__31792 = self__.node;\nvar G__31793 = self__.i;\nvar G__31794 = (self__.off + (1));\nreturn (clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4 ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4(G__31791,G__31792,G__31793,G__31794) : clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null,G__31791,G__31792,G__31793,G__31794));\n})();\nif((s == null)){\nreturn null;\n} else {\nreturn s;\n}\n} else {\nreturn coll__$1.cljs$core$IChunkedNext$_chunked_next$arity$1(null);\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nvar h__4238__auto__ = self__.__hash;\nif((!((h__4238__auto__ == null)))){\nreturn h__4238__auto__;\n} else {\nvar h__4238__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);\n(self__.__hash = h__4238__auto____$1);\n\nreturn h__4238__auto____$1;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.equiv_sequential(coll__$1,other);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(self__.vec,(self__.i + self__.off),cljs.core.count(self__.vec)),f);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(self__.vec,(self__.i + self__.off),cljs.core.count(self__.vec)),f,start);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nreturn (self__.node[self__.off]);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nif(((self__.off + (1)) < self__.node.length)){\nvar s = (function (){var G__31795 = self__.vec;\nvar G__31796 = self__.node;\nvar G__31797 = self__.i;\nvar G__31798 = (self__.off + (1));\nreturn (clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4 ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4(G__31795,G__31796,G__31797,G__31798) : clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null,G__31795,G__31796,G__31797,G__31798));\n})();\nif((s == null)){\nreturn cljs.core.List.EMPTY;\n} else {\nreturn s;\n}\n} else {\nreturn coll__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nreturn coll__$1;\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node,self__.off);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nvar l = self__.node.length;\nvar s = ((((self__.i + l) < cljs.core._count(self__.vec)))?(function (){var G__31799 = self__.vec;\nvar G__31800 = (self__.i + l);\nvar G__31801 = (0);\nreturn (clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3 ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3(G__31799,G__31800,G__31801) : clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null,G__31799,G__31800,G__31801));\n})():null);\nif((s == null)){\nreturn cljs.core.List.EMPTY;\n} else {\nreturn s;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,m){\nvar self__ = this;\nvar coll__$1 = this;\nreturn (clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5 ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec,self__.node,self__.i,self__.off,m) : clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null,self__.vec,self__.node,self__.i,self__.off,m));\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){\nvar self__ = this;\nvar coll__$1 = this;\nreturn cljs.core.cons(o,coll__$1);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = (function (coll){\nvar self__ = this;\nvar coll__$1 = this;\nvar l = self__.node.length;\nvar s = ((((self__.i + l) < cljs.core._count(self__.vec)))?(function (){var G__31802 = self__.vec;\nvar G__31803 = (self__.i + l);\nvar G__31804 = (0);\nreturn (clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3 ? clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3(G__31802,G__31803,G__31804) : clojure.core.rrb_vector.rrbt.rrb_chunked_seq.call(null,G__31802,G__31803,G__31804));\n})():null);\nif((s == null)){\nreturn null;\n} else {\nreturn s;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"vec\",\"vec\",982683596,null),new cljs.core.Symbol(null,\"node\",\"node\",-2073234571,null),new cljs.core.Symbol(null,\"i\",\"i\",253690212,null),new cljs.core.Symbol(null,\"off\",\"off\",-2047994980,null),new cljs.core.Symbol(null,\"meta\",\"meta\",-1154898805,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"__hash\",\"__hash\",-1328796629,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null))], null);\n}));\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$type = true);\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$ctorStr = \"clojure.core.rrb-vector.rrbt/RRBChunkedSeq\");\n\n(clojure.core.rrb_vector.rrbt.RRBChunkedSeq.cljs$lang$ctorPrWriter = (function (this__4369__auto__,writer__4370__auto__,opt__4371__auto__){\nreturn cljs.core._write(writer__4370__auto__,\"clojure.core.rrb-vector.rrbt/RRBChunkedSeq\");\n}));\n\n/**\n * Positional factory function for clojure.core.rrb-vector.rrbt/RRBChunkedSeq.\n */\nclojure.core.rrb_vector.rrbt.__GT_RRBChunkedSeq = (function clojure$core$rrb_vector$rrbt$__GT_RRBChunkedSeq(vec,node,i,off,meta,__hash){\nreturn (new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec,node,i,off,meta,__hash));\n});\n\nclojure.core.rrb_vector.rrbt.rrb_chunked_seq = (function clojure$core$rrb_vector$rrbt$rrb_chunked_seq(var_args){\nvar G__31806 = arguments.length;\nswitch (G__31806) {\ncase 3:\nreturn clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 5:\nreturn clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3 = (function (vec,i,off){\nreturn (new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec,clojure.core.rrb_vector.rrbt._array_for(vec,i),i,off,null,null));\n}));\n\n(clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$4 = (function (vec,node,i,off){\nreturn (new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec,node,i,off,null,null));\n}));\n\n(clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$5 = (function (vec,node,i,off,meta){\nreturn (new clojure.core.rrb_vector.rrbt.RRBChunkedSeq(vec,node,i,off,meta,null));\n}));\n\n(clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$lang$maxFixedArity = 5);\n\nclojure.core.rrb_vector.rrbt.slice_right = (function clojure$core$rrb_vector$rrbt$slice_right(node,shift,end){\nif((shift === (0))){\nvar arr = node.arr;\nvar new_arr = (new Array(end));\ncljs.core.array_copy(arr,(0),new_arr,(0),end);\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar reg_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_(node);\nvar rngs = (((!(reg_QMARK_)))?clojure.core.rrb_vector.nodes.node_ranges(node):null);\nvar i = (((end - (1)) >> shift) & (31));\nvar i__$1 = ((reg_QMARK_)?i:(function (){var j = i;\nwhile(true){\nif((end <= (rngs[j]))){\nreturn j;\n} else {\nvar G__31876 = (j + (1));\nj = G__31876;\ncontinue;\n}\nbreak;\n}\n})());\nvar child_end = ((reg_QMARK_)?(function (){var ce = cljs.core.mod(end,((1) << shift));\nif((ce === (0))){\nreturn ((1) << shift);\n} else {\nreturn ce;\n}\n})():(((i__$1 > (0)))?(end - (rngs[(i__$1 - (1))])):end));\nvar arr = node.arr;\nvar new_child = (function (){var G__31807 = (arr[i__$1]);\nvar G__31808 = (shift - (5));\nvar G__31809 = child_end;\nreturn (clojure.core.rrb_vector.rrbt.slice_right.cljs$core$IFn$_invoke$arity$3 ? clojure.core.rrb_vector.rrbt.slice_right.cljs$core$IFn$_invoke$arity$3(G__31807,G__31808,G__31809) : clojure.core.rrb_vector.rrbt.slice_right.call(null,G__31807,G__31808,G__31809));\n})();\nvar regular_child_QMARK_ = (((shift === (5)))?((32) === new_child.arr.length):clojure.core.rrb_vector.nodes.regular_QMARK_(new_child));\nvar new_arr = (new Array(((((reg_QMARK_) && (regular_child_QMARK_)))?(32):(33))));\nvar new_child_rng = ((regular_child_QMARK_)?(function (){var m = cljs.core.mod(child_end,((1) << shift));\nif((m === (0))){\nreturn ((1) << shift);\n} else {\nreturn m;\n}\n})():(((shift === (5)))?new_child.arr.length:clojure.core.rrb_vector.nodes.last_range(new_child)));\ncljs.core.array_copy(arr,(0),new_arr,(0),i__$1);\n\n(new_arr[i__$1] = new_child);\n\nif((!(((reg_QMARK_) && (regular_child_QMARK_))))){\nvar new_rngs_31877 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar step_31878 = ((1) << shift);\nif(reg_QMARK_){\nvar n__4613__auto___31879 = i__$1;\nvar j_31880 = (0);\nwhile(true){\nif((j_31880 < n__4613__auto___31879)){\n(new_rngs_31877[j_31880] = ((j_31880 + (1)) * step_31878));\n\nvar G__31881 = (j_31880 + (1));\nj_31880 = G__31881;\ncontinue;\n} else {\n}\nbreak;\n}\n} else {\nvar n__4613__auto___31882 = i__$1;\nvar j_31883 = (0);\nwhile(true){\nif((j_31883 < n__4613__auto___31882)){\n(new_rngs_31877[j_31883] = (rngs[j_31883]));\n\nvar G__31884 = (j_31883 + (1));\nj_31883 = G__31884;\ncontinue;\n} else {\n}\nbreak;\n}\n}\n\n(new_rngs_31877[i__$1] = ((((i__$1 > (0)))?(new_rngs_31877[(i__$1 - (1))]):(0)) + new_child_rng));\n\n(new_rngs_31877[(32)] = (i__$1 + (1)));\n\n(new_arr[(32)] = new_rngs_31877);\n} else {\n}\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n}\n});\nclojure.core.rrb_vector.rrbt.slice_left = (function clojure$core$rrb_vector$rrbt$slice_left(node,shift,start,end){\nif((shift === (0))){\nvar arr = node.arr;\nvar new_len = (arr.length - start);\nvar new_arr = (new Array(new_len));\ncljs.core.array_copy(arr,start,new_arr,(0),new_len);\n\nreturn cljs.core.__GT_VectorNode(null,new_arr);\n} else {\nvar reg_QMARK_ = clojure.core.rrb_vector.nodes.regular_QMARK_(node);\nvar arr = node.arr;\nvar rngs = (((!(reg_QMARK_)))?clojure.core.rrb_vector.nodes.node_ranges(node):null);\nvar i = ((start >> shift) & (31));\nvar i__$1 = ((reg_QMARK_)?i:(function (){var j = i;\nwhile(true){\nif((start < (rngs[j]))){\nreturn j;\n} else {\nvar G__31885 = (j + (1));\nj = G__31885;\ncontinue;\n}\nbreak;\n}\n})());\nvar len = ((reg_QMARK_)?(function (){var i__$2 = i__$1;\nwhile(true){\nif((((i__$2 === (32))) || (((arr[i__$2]) == null)))){\nreturn i__$2;\n} else {\nvar G__31886 = (i__$2 + (1));\ni__$2 = G__31886;\ncontinue;\n}\nbreak;\n}\n})():(rngs[(32)]));\nvar child_start = (((i__$1 > (0)))?(start - ((reg_QMARK_)?(i__$1 * ((1) << shift)):(rngs[(i__$1 - (1))]))):start);\nvar child_end = ((reg_QMARK_)?(function (){var x__4217__auto__ = ((1) << shift);\nvar y__4218__auto__ = (((i__$1 > (0)))?(end - (i__$1 * ((1) << shift))):end);\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})():(function (){var capped_end = (function (){var x__4217__auto__ = (rngs[i__$1]);\nvar y__4218__auto__ = end;\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})();\nif((i__$1 > (0))){\nreturn (capped_end - (rngs[(i__$1 - (1))]));\n} else {\nreturn capped_end;\n}\n})());\nvar new_child = (function (){var G__31810 = (arr[i__$1]);\nvar G__31811 = (shift - (5));\nvar G__31812 = child_start;\nvar G__31813 = child_end;\nreturn (clojure.core.rrb_vector.rrbt.slice_left.cljs$core$IFn$_invoke$arity$4 ? clojure.core.rrb_vector.rrbt.slice_left.cljs$core$IFn$_invoke$arity$4(G__31810,G__31811,G__31812,G__31813) : clojure.core.rrb_vector.rrbt.slice_left.call(null,G__31810,G__31811,G__31812,G__31813));\n})();\nvar new_len = (len - i__$1);\nvar new_len__$1 = (((new_child == null))?(new_len - (1)):new_len);\nif((new_len__$1 === (0))){\nreturn null;\n} else {\nif(reg_QMARK_){\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar rngs__$1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar rng0 = (((((new_child == null)) || ((shift === (5))) || (clojure.core.rrb_vector.nodes.regular_QMARK_(new_child))))?(((1) << shift) - ((start >> (shift - (5))) & (31))):clojure.core.rrb_vector.nodes.last_range(new_child));\nvar step = ((1) << shift);\nvar j_31887 = (0);\nvar r_31888 = rng0;\nwhile(true){\nif((j_31887 < new_len__$1)){\n(rngs__$1[j_31887] = r_31888);\n\nvar G__31889 = (j_31887 + (1));\nvar G__31890 = (r_31888 + step);\nj_31887 = G__31889;\nr_31888 = G__31890;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif((new_len__$1 > (1))){\n(rngs__$1[(new_len__$1 - (1))] = (end - start));\n} else {\n}\n\n(rngs__$1[(32)] = new_len__$1);\n\ncljs.core.array_copy(arr,(((new_child == null))?(i__$1 + (1)):i__$1),new_arr,(0),new_len__$1);\n\nif((!((new_child == null)))){\n(new_arr[(0)] = new_child);\n} else {\n}\n\n(new_arr[(32)] = rngs__$1);\n\nreturn cljs.core.__GT_VectorNode(node.edit,new_arr);\n} else {\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar j_31899 = (0);\nvar i_31900__$2 = i__$1;\nwhile(true){\nif((j_31899 < new_len__$1)){\n(new_rngs[j_31899] = ((rngs[i_31900__$2]) - start));\n\nvar G__31901 = (j_31899 + (1));\nvar G__31902 = (i_31900__$2 + (1));\nj_31899 = G__31901;\ni_31900__$2 = G__31902;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_rngs[(32)] = new_len__$1);\n\ncljs.core.array_copy(arr,(((new_child == null))?(i__$1 + (1)):i__$1),new_arr,(0),new_len__$1);\n\nif((!((new_child == null)))){\n(new_arr[(0)] = new_child);\n} else {\n}\n\n(new_arr[(32)] = new_rngs);\n\nreturn cljs.core.__GT_VectorNode(node.edit,new_arr);\n\n}\n}\n}\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n * @implements {cljs.core.IVector}\n * @implements {cljs.core.IReversible}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEditableCollection}\n * @implements {clojure.core.rrb_vector.rrbt.AsRRBT}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {clojure.core.rrb_vector.protocols.PSliceableVector}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IStack}\n * @implements {cljs.core.IMapEntry}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IComparable}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {clojure.core.rrb_vector.protocols.PSpliceableVector}\n * @implements {clojure.core.rrb_vector.rrbt.IVecImpl}\n * @implements {cljs.core.ILookup}\n * @implements {cljs.core.IReduce}\n*/\nclojure.core.rrb_vector.rrbt.Vector = (function (cnt,shift,root,tail,meta,__hash){\nthis.cnt = cnt;\nthis.shift = shift;\nthis.root = root;\nthis.tail = tail;\nthis.meta = meta;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2315152159;\nthis.cljs$lang$protocol_mask$partition1$ = 2052;\n});\n(clojure.core.rrb_vector.rrbt.Vector.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn cljs.core.pr_str_STAR_(this$);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this$,k){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$3(null,k,null);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this$,k,not_found){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this$,f,init){\nvar self__ = this;\nvar this$__$1 = this;\nvar i = (0);\nvar j = (0);\nvar init__$1 = init;\nvar arr = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(null,i);\nvar lim = (arr.length - (1));\nvar step = (lim + (1));\nwhile(true){\nvar init__$2 = (function (){var G__31818 = init__$1;\nvar G__31819 = (i + j);\nvar G__31820 = (arr[j]);\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__31818,G__31819,G__31820) : f.call(null,G__31818,G__31819,G__31820));\n})();\nif(cljs.core.reduced_QMARK_(init__$2)){\nreturn cljs.core.deref(init__$2);\n} else {\nif((j < lim)){\nvar G__31906 = i;\nvar G__31907 = (j + (1));\nvar G__31908 = init__$2;\nvar G__31909 = arr;\nvar G__31910 = lim;\nvar G__31911 = step;\ni = G__31906;\nj = G__31907;\ninit__$1 = G__31908;\narr = G__31909;\nlim = G__31910;\nstep = G__31911;\ncontinue;\n} else {\nvar i__$1 = (i + step);\nif((i__$1 < self__.cnt)){\nvar arr__$1 = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(null,i__$1);\nvar len = arr__$1.length;\nvar lim__$1 = (len - (1));\nvar G__31912 = i__$1;\nvar G__31913 = (0);\nvar G__31914 = init__$2;\nvar G__31915 = arr__$1;\nvar G__31916 = lim__$1;\nvar G__31917 = len;\ni = G__31912;\nj = G__31913;\ninit__$1 = G__31914;\narr = G__31915;\nlim = G__31916;\nstep = G__31917;\ncontinue;\n} else {\nreturn init__$2;\n}\n}\n}\nbreak;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (this$,i){\nvar self__ = this;\nvar this$__$1 = this;\nif(((((0) <= i)) && ((i < self__.cnt)))){\nvar tail_off = (self__.cnt - self__.tail.length);\nif((tail_off <= i)){\nreturn (self__.tail[(i - tail_off)]);\n} else {\nvar i__$1 = i;\nvar node = self__.root;\nvar shift__$1 = self__.shift;\nwhile(true){\nif((shift__$1 === (0))){\nvar arr = node.arr;\nreturn (arr[((i__$1 >> shift__$1) & (31))]);\n} else {\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar arr = node.arr;\nvar idx = ((i__$1 >> shift__$1) & (31));\nvar i__$2 = i__$1;\nvar node__$1 = (arr[idx]);\nvar shift__$2 = (shift__$1 - (5));\nwhile(true){\nvar arr__$1 = node__$1.arr;\nvar idx__$1 = ((i__$2 >> shift__$2) & (31));\nif((shift__$2 === (0))){\nreturn (arr__$1[idx__$1]);\n} else {\nvar G__31919 = i__$2;\nvar G__31920 = (arr__$1[idx__$1]);\nvar G__31921 = (shift__$2 - (5));\ni__$2 = G__31919;\nnode__$1 = G__31920;\nshift__$2 = G__31921;\ncontinue;\n}\nbreak;\n}\n} else {\nvar arr = node.arr;\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nvar idx = (function (){var j = ((i__$1 >> shift__$1) & (31));\nwhile(true){\nif((i__$1 < (rngs[j]))){\nreturn j;\n} else {\nvar G__31922 = (j + (1));\nj = G__31922;\ncontinue;\n}\nbreak;\n}\n})();\nvar i__$2 = (((idx === (0)))?i__$1:(i__$1 - (rngs[(idx - (1))])));\nvar G__31924 = i__$2;\nvar G__31925 = (arr[idx]);\nvar G__31926 = (shift__$1 - (5));\ni__$1 = G__31924;\nnode = G__31925;\nshift__$1 = G__31926;\ncontinue;\n}\n}\nbreak;\n}\n}\n} else {\nreturn cljs.core.vector_index_out_of_bounds(i,self__.cnt);\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (this$,i,not_found){\nvar self__ = this;\nvar this$__$1 = this;\nif((((i >= (0))) && ((i < self__.cnt)))){\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$2(null,i);\n} else {\nreturn not_found;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this$,writer,opts){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,\"[\",\" \",\"]\",opts,this$__$1);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (this$,i,val){\nvar self__ = this;\nvar this$__$1 = this;\nif(((((0) <= i)) && ((i < self__.cnt)))){\nvar tail_off = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null);\nif((i >= tail_off)){\nvar new_tail = (new Array(self__.tail.length));\nvar idx = (i - tail_off);\ncljs.core.array_copy(self__.tail,(0),new_tail,(0),self__.tail.length);\n\n(new_tail[idx] = val);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(self__.cnt,self__.shift,self__.root,new_tail,self__.meta,null));\n} else {\nreturn (new clojure.core.rrb_vector.rrbt.Vector(self__.cnt,self__.shift,clojure.core.rrb_vector.trees.do_assoc(self__.shift,self__.root,i,val),self__.tail,self__.meta,null));\n}\n} else {\nif((i === self__.cnt)){\nreturn this$__$1.cljs$core$ICollection$_conj$arity$2(null,val);\n} else {\nreturn cljs.core.vector_index_out_of_bounds(i,self__.cnt);\n\n}\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1;\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.meta;\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn self__.cnt;\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$2(null,(0));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$2(null,(1));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IStack$_peek$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif((self__.cnt > (0))){\nreturn this$__$1.cljs$core$IIndexed$_nth$arity$2(null,(self__.cnt - (1)));\n} else {\nreturn null;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IStack$_pop$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif((self__.cnt === (0))){\nthrow (new Error(\"Can't pop empty vector\"));\n} else {\nif(((1) === self__.cnt)){\nreturn cljs.core._with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);\n} else {\nif((self__.tail.length > (1))){\nvar new_tail = (new Array((self__.tail.length - (1))));\ncljs.core.array_copy(self__.tail,(0),new_tail,(0),new_tail.length);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt - (1)),self__.shift,self__.root,new_tail,self__.meta,null));\n} else {\nvar new_tail = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(null,(self__.cnt - (2)));\nvar root_cnt = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null);\nvar new_root = clojure.core.rrb_vector.trees.pop_tail(self__.shift,root_cnt,self__.root.edit,self__.root);\nif((new_root == null)){\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt - (1)),self__.shift,clojure.core.rrb_vector.nodes.empty_node,new_tail,self__.meta,null));\n} else {\nif((((self__.shift > (5))) && (((new_root.arr[(1)]) == null)))){\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt - (1)),(self__.shift - (5)),(new_root.arr[(0)]),new_tail,self__.meta,null));\n} else {\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt - (1)),self__.shift,new_root,new_tail,self__.meta,null));\n\n}\n}\n\n}\n}\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif((self__.cnt > (0))){\nreturn (new cljs.core.RSeq(this$__$1,(self__.cnt - (1)),null));\n} else {\nreturn null;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar h__4238__auto__ = self__.__hash;\nif((!((h__4238__auto__ == null)))){\nreturn h__4238__auto__;\n} else {\nvar h__4238__auto____$1 = cljs.core.hash_ordered_coll(this$__$1);\n(self__.__hash = h__4238__auto____$1);\n\nreturn h__4238__auto____$1;\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,that){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.equiv_sequential(this$__$1,that);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__31821 = self__.cnt;\nvar G__31822 = self__.shift;\nvar G__31823 = clojure.core.rrb_vector.transients.editable_root(self__.root);\nvar G__31824 = clojure.core.rrb_vector.transients.editable_tail(self__.tail);\nvar G__31825 = self__.tail.length;\nreturn (clojure.core.rrb_vector.rrbt.__GT_Transient.cljs$core$IFn$_invoke$arity$5 ? clojure.core.rrb_vector.rrbt.__GT_Transient.cljs$core$IFn$_invoke$arity$5(G__31821,G__31822,G__31823,G__31824,G__31825) : clojure.core.rrb_vector.rrbt.__GT_Transient.call(null,G__31821,G__31822,G__31823,G__31824,G__31825));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSliceableVector$_slicev$arity$3 = (function (this$,start,end){\nvar self__ = this;\nvar this$__$1 = this;\nvar new_cnt = (end - start);\nif((((start < (0))) || ((end > self__.cnt)))){\nthrow (new Error(\"vector index out of bounds\"));\n} else {\nif((start === end)){\nreturn cljs.core.empty(this$__$1);\n} else {\nif((start > end)){\nthrow (new Error(\"start index greater than end index\"));\n} else {\nvar tail_off = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null);\nif((start >= tail_off)){\nvar new_tail = (new Array(new_cnt));\ncljs.core.array_copy(self__.tail,(start - tail_off),new_tail,(0),new_cnt);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(new_cnt,(5),clojure.core.rrb_vector.nodes.empty_node,new_tail,self__.meta,null));\n} else {\nvar tail_cut_QMARK_ = (end > tail_off);\nvar new_root = ((tail_cut_QMARK_)?self__.root:clojure.core.rrb_vector.rrbt.slice_right(self__.root,self__.shift,end));\nvar new_root__$1 = (((start === (0)))?new_root:clojure.core.rrb_vector.rrbt.slice_left(new_root,self__.shift,start,(function (){var x__4217__auto__ = end;\nvar y__4218__auto__ = tail_off;\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})()));\nvar new_tail = ((tail_cut_QMARK_)?(function (){var new_len = (end - tail_off);\nvar new_tail = (new Array(new_len));\ncljs.core.array_copy(self__.tail,(0),new_tail,(0),new_len);\n\nreturn new_tail;\n})():(new clojure.core.rrb_vector.rrbt.Vector(new_cnt,self__.shift,new_root__$1,[],self__.meta,null)).clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(null,(new_cnt - (1))));\nvar new_root__$2 = ((tail_cut_QMARK_)?new_root__$1:clojure.core.rrb_vector.trees.pop_tail(self__.shift,new_cnt,new_root__$1.edit,new_root__$1));\nif((new_root__$2 == null)){\nreturn (new clojure.core.rrb_vector.rrbt.Vector(new_cnt,(5),clojure.core.rrb_vector.nodes.empty_node,new_tail,self__.meta,null));\n} else {\nvar r = new_root__$2;\nvar s = self__.shift;\nwhile(true){\nif((((s > (5))) && (((r.arr[(1)]) == null)))){\nvar G__31931 = (r.arr[(0)]);\nvar G__31932 = (s - (5));\nr = G__31931;\ns = G__31932;\ncontinue;\n} else {\nreturn (new clojure.core.rrb_vector.rrbt.Vector(new_cnt,s,r,new_tail,self__.meta,null));\n}\nbreak;\n}\n}\n}\n\n}\n}\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (self__.cnt - self__.tail.length);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2 = (function (this$,i){\nvar self__ = this;\nvar this$__$1 = this;\nif(((((0) <= i)) && ((i < self__.cnt)))){\nif((i >= this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null))){\nreturn self__.tail;\n} else {\nvar i__$1 = i;\nvar node = self__.root;\nvar shift__$1 = self__.shift;\nwhile(true){\nif((shift__$1 === (0))){\nreturn node.arr;\n} else {\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar node__$1 = (node.arr[((i__$1 >> shift__$1) & (31))]);\nvar shift__$2 = (shift__$1 - (5));\nwhile(true){\nif((shift__$2 === (0))){\nreturn node__$1.arr;\n} else {\nvar G__31934 = (node__$1.arr[((i__$1 >> shift__$2) & (31))]);\nvar G__31935 = (shift__$2 - (5));\nnode__$1 = G__31934;\nshift__$2 = G__31935;\ncontinue;\n}\nbreak;\n}\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nvar j = (function (){var j = ((i__$1 >> shift__$1) & (31));\nwhile(true){\nif((i__$1 < (rngs[j]))){\nreturn j;\n} else {\nvar G__31937 = (j + (1));\nj = G__31937;\ncontinue;\n}\nbreak;\n}\n})();\nvar i__$2 = (((j > (0)))?(i__$1 - (rngs[(j - (1))])):i__$1);\nvar G__31938 = i__$2;\nvar G__31939 = (node.arr[j]);\nvar G__31940 = (shift__$1 - (5));\ni__$1 = G__31938;\nnode = G__31939;\nshift__$1 = G__31940;\ncontinue;\n}\n}\nbreak;\n}\n}\n} else {\nreturn cljs.core.vector_index_out_of_bounds(i,self__.cnt);\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (this$,f){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this$__$1,f);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (this$,f,start){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(this$__$1,f,start);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this$,k,v){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$IVector$_assoc_n$arity$3(null,k,v);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif((self__.cnt === (0))){\nreturn null;\n} else {\nif((this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null) === (0))){\nreturn cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(self__.tail);\n} else {\nreturn clojure.core.rrb_vector.rrbt.rrb_chunked_seq.cljs$core$IFn$_invoke$arity$3(this$__$1,(0),(0));\n\n}\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this$,meta__$1){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (new clojure.core.rrb_vector.rrbt.Vector(self__.cnt,self__.shift,self__.root,self__.tail,meta__$1,self__.__hash));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this$,val){\nvar self__ = this;\nvar this$__$1 = this;\nif((self__.tail.length < (32))){\nvar tail_len = self__.tail.length;\nvar new_tail = (new Array((tail_len + (1))));\ncljs.core.array_copy(self__.tail,(0),new_tail,(0),tail_len);\n\n(new_tail[tail_len] = val);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt + (1)),self__.shift,self__.root,new_tail,self__.meta,null));\n} else {\nvar tail_node = cljs.core.__GT_VectorNode(self__.root.edit,self__.tail);\nvar new_tail = (function (){var new_arr = [null];\n(new_arr[(0)] = val);\n\nreturn new_arr;\n})();\nif(clojure.core.rrb_vector.nodes.overflow_QMARK_(self__.root,self__.shift,self__.cnt)){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(self__.root)){\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_root = cljs.core.__GT_VectorNode(self__.root.edit,new_arr);\nvar G__31826_31942 = new_arr;\n(G__31826_31942[(0)] = self__.root);\n\n(G__31826_31942[(1)] = clojure.core.rrb_vector.trees.new_path(self__.tail,self__.root.edit,self__.shift,tail_node));\n\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt + (1)),(self__.shift + (5)),new_root,new_tail,self__.meta,null));\n} else {\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_root = cljs.core.__GT_VectorNode(self__.root.edit,new_arr);\nvar root_total_range = (clojure.core.rrb_vector.nodes.node_ranges(self__.root)[(31)]);\nvar G__31827_31946 = new_arr;\n(G__31827_31946[(0)] = self__.root);\n\n(G__31827_31946[(1)] = clojure.core.rrb_vector.trees.new_path(self__.tail,self__.root.edit,self__.shift,tail_node));\n\n(G__31827_31946[(32)] = new_rngs);\n\n\nvar G__31828_31947 = new_rngs;\n(G__31828_31947[(0)] = root_total_range);\n\n(G__31828_31947[(1)] = (root_total_range + (32)));\n\n(G__31828_31947[(32)] = (2));\n\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt + (1)),(self__.shift + (5)),new_root,new_tail,self__.meta,null));\n}\n} else {\nreturn (new clojure.core.rrb_vector.rrbt.Vector((self__.cnt + (1)),self__.shift,clojure.core.rrb_vector.trees.push_tail(self__.shift,self__.cnt,self__.root.edit,self__.root,tail_node),new_tail,self__.meta,null));\n}\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.call = (function (unused__10297__auto__){\nvar self__ = this;\nvar self__ = this;\nvar G__31829 = (arguments.length - (1));\nswitch (G__31829) {\ncase (1):\nreturn self__.cljs$core$IFn$_invoke$arity$1((arguments[(1)]));\n\nbreak;\ncase (2):\nreturn self__.cljs$core$IFn$_invoke$arity$2((arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((arguments.length - (1)))].join('')));\n\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.apply = (function (self__,args31814){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args31814)));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){\nvar self__ = this;\nvar this$ = this;\nreturn this$.cljs$core$IIndexed$_nth$arity$2(null,k);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){\nvar self__ = this;\nvar this$ = this;\nreturn this$.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.cljs$core$IComparable$_compare$arity$2 = (function (this$,that){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this$__$1,that);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.core.rrb_vector.rrbt.Vector.prototype.clojure$core$rrb_vector$protocols$PSpliceableVector$_splicev$arity$2 = (function (this$,that){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__31830 = this$__$1;\nvar G__31831 = clojure.core.rrb_vector.rrbt._as_rrbt(that);\nreturn (clojure.core.rrb_vector.rrbt.splice_rrbts.cljs$core$IFn$_invoke$arity$2 ? clojure.core.rrb_vector.rrbt.splice_rrbts.cljs$core$IFn$_invoke$arity$2(G__31830,G__31831) : clojure.core.rrb_vector.rrbt.splice_rrbts.call(null,G__31830,G__31831));\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.Symbol(null,\"shift\",\"shift\",-1657295705,null),new cljs.core.Symbol(null,\"root\",\"root\",1191874074,null),new cljs.core.Symbol(null,\"tail\",\"tail\",494507963,null),new cljs.core.Symbol(null,\"meta\",\"meta\",-1154898805,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"__hash\",\"__hash\",-1328796629,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null))], null);\n}));\n\n(clojure.core.rrb_vector.rrbt.Vector.cljs$lang$type = true);\n\n(clojure.core.rrb_vector.rrbt.Vector.cljs$lang$ctorStr = \"clojure.core.rrb-vector.rrbt/Vector\");\n\n(clojure.core.rrb_vector.rrbt.Vector.cljs$lang$ctorPrWriter = (function (this__4369__auto__,writer__4370__auto__,opt__4371__auto__){\nreturn cljs.core._write(writer__4370__auto__,\"clojure.core.rrb-vector.rrbt/Vector\");\n}));\n\n/**\n * Positional factory function for clojure.core.rrb-vector.rrbt/Vector.\n */\nclojure.core.rrb_vector.rrbt.__GT_Vector = (function clojure$core$rrb_vector$rrbt$__GT_Vector(cnt,shift,root,tail,meta,__hash){\nreturn (new clojure.core.rrb_vector.rrbt.Vector(cnt,shift,root,tail,meta,__hash));\n});\n\n(cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = cljs.core.PROTOCOL_SENTINEL);\n\n(cljs.core.PersistentVector.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = (function (this$){\nvar this$__$1 = this;\nreturn (new clojure.core.rrb_vector.rrbt.Vector(cljs.core.count(this$__$1),this$__$1.shift,this$__$1.root,this$__$1.tail,cljs.core.meta(this$__$1),null));\n}));\n\n(cljs.core.Subvec.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$ = cljs.core.PROTOCOL_SENTINEL);\n\n(cljs.core.Subvec.prototype.clojure$core$rrb_vector$rrbt$AsRRBT$_as_rrbt$arity$1 = (function (this$){\nvar this$__$1 = this;\nvar v = this$__$1.v;\nvar start = this$__$1.start;\nvar end = this$__$1.end;\nreturn clojure.core.rrb_vector.protocols._slicev(clojure.core.rrb_vector.rrbt._as_rrbt(v),start,end);\n}));\nclojure.core.rrb_vector.rrbt.shift_from_to = (function clojure$core$rrb_vector$rrbt$shift_from_to(node,from,to){\nwhile(true){\nif((from === to)){\nreturn node;\n} else {\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar G__31949 = cljs.core.__GT_VectorNode(node.edit,(function (){var G__31832 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__31832[(0)] = node);\n\nreturn G__31832;\n})());\nvar G__31950 = ((5) + from);\nvar G__31951 = to;\nnode = G__31949;\nfrom = G__31950;\nto = G__31951;\ncontinue;\n} else {\nvar G__31952 = cljs.core.__GT_VectorNode(node.edit,(function (){var G__31833 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__31833[(0)] = node);\n\n(G__31833[(32)] = (function (){var G__31834 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__31834[(0)] = clojure.core.rrb_vector.nodes.last_range(node));\n\n(G__31834[(32)] = (1));\n\nreturn G__31834;\n})());\n\nreturn G__31833;\n})());\nvar G__31953 = ((5) + from);\nvar G__31954 = to;\nnode = G__31952;\nfrom = G__31953;\nto = G__31954;\ncontinue;\n\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.rrbt.slot_count = (function clojure$core$rrb_vector$rrbt$slot_count(node,shift){\nvar arr = node.arr;\nif((shift === (0))){\nreturn arr.length;\n} else {\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nreturn clojure.core.rrb_vector.nodes.index_of_nil(arr);\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nreturn (rngs[(32)]);\n}\n}\n});\nclojure.core.rrb_vector.rrbt.subtree_branch_count = (function clojure$core$rrb_vector$rrbt$subtree_branch_count(node,shift){\nvar arr = node.arr;\nvar cs = (shift - (5));\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar i = (0);\nvar sbc = (0);\nwhile(true){\nif((i === (32))){\nreturn sbc;\n} else {\nvar temp__5733__auto__ = (arr[i]);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar child = temp__5733__auto__;\nvar G__31955 = (i + (1));\nvar G__31956 = (sbc + clojure.core.rrb_vector.rrbt.slot_count(child,cs));\ni = G__31955;\nsbc = G__31956;\ncontinue;\n} else {\nreturn sbc;\n}\n}\nbreak;\n}\n} else {\nvar lim = (clojure.core.rrb_vector.nodes.node_ranges(node)[(32)]);\nvar i = (0);\nvar sbc = (0);\nwhile(true){\nif((i === lim)){\nreturn sbc;\n} else {\nvar child = (arr[i]);\nvar G__31957 = (i + (1));\nvar G__31958 = (sbc + clojure.core.rrb_vector.rrbt.slot_count(child,cs));\ni = G__31957;\nsbc = G__31958;\ncontinue;\n}\nbreak;\n}\n}\n});\nclojure.core.rrb_vector.rrbt.leaf_seq = (function clojure$core$rrb_vector$rrbt$leaf_seq(arr){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__31835_SHARP_){\nreturn p1__31835_SHARP_.arr;\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.take.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.nodes.index_of_nil(arr),arr)], 0));\n});\nclojure.core.rrb_vector.rrbt.rebalance_leaves = (function clojure$core$rrb_vector$rrbt$rebalance_leaves(n1,cnt1,n2,cnt2,transferred_leaves){\nvar slc1 = clojure.core.rrb_vector.rrbt.slot_count(n1,(5));\nvar slc2 = clojure.core.rrb_vector.rrbt.slot_count(n2,(5));\nvar a = (slc1 + slc2);\nvar sbc1 = clojure.core.rrb_vector.rrbt.subtree_branch_count(n1,(5));\nvar sbc2 = clojure.core.rrb_vector.rrbt.subtree_branch_count(n2,(5));\nvar p = (sbc1 + sbc2);\nvar e = (a - (cljs.core.quot((p - (1)),(32)) + (1)));\nif((e <= (2))){\nreturn [n1,n2];\n} else {\nif(((sbc1 + sbc2) <= (1024))){\nvar reg_QMARK_ = (cljs.core.mod(p,(32)) === (0));\nvar new_arr = (new Array(((reg_QMARK_)?(32):(33))));\nvar new_n1 = cljs.core.__GT_VectorNode(null,new_arr);\nvar i_31959 = (0);\nvar bs_31960 = cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((32),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.leaf_seq(n1.arr),clojure.core.rrb_vector.rrbt.leaf_seq(n2.arr)));\nwhile(true){\nvar temp__5735__auto___31961 = cljs.core.seq(bs_31960);\nif(temp__5735__auto___31961){\nvar xs__6292__auto___31962 = temp__5735__auto___31961;\nvar block_31963 = cljs.core.first(xs__6292__auto___31962);\nvar a_31964__$1 = (new Array(cljs.core.count(block_31963)));\nvar i_31965__$1 = (0);\nvar xs_31966 = cljs.core.seq(block_31963);\nwhile(true){\nif(xs_31966){\n(a_31964__$1[i_31965__$1] = cljs.core.first(xs_31966));\n\nvar G__31967 = (i_31965__$1 + (1));\nvar G__31968 = cljs.core.next(xs_31966);\ni_31965__$1 = G__31967;\nxs_31966 = G__31968;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_arr[i_31959] = cljs.core.__GT_VectorNode(null,a_31964__$1));\n\nvar G__31969 = (i_31959 + (1));\nvar G__31970 = cljs.core.next(bs_31960);\ni_31959 = G__31969;\nbs_31960 = G__31970;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif((!(reg_QMARK_))){\n(new_arr[(32)] = clojure.core.rrb_vector.nodes.regular_ranges((5),p));\n} else {\n}\n\n(transferred_leaves.val = sbc2);\n\nreturn [new_n1,null];\n} else {\nvar reg_QMARK_ = (cljs.core.mod(p,(32)) === (0));\nvar new_arr1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_arr2 = (new Array(((reg_QMARK_)?(32):(33))));\nvar new_n1 = cljs.core.__GT_VectorNode(null,new_arr1);\nvar new_n2 = cljs.core.__GT_VectorNode(null,new_arr2);\nvar i_31971 = (0);\nvar bs_31972 = cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((32),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.leaf_seq(n1.arr),clojure.core.rrb_vector.rrbt.leaf_seq(n2.arr)));\nwhile(true){\nvar temp__5735__auto___31973 = cljs.core.seq(bs_31972);\nif(temp__5735__auto___31973){\nvar xs__6292__auto___31974 = temp__5735__auto___31973;\nvar block_31975 = cljs.core.first(xs__6292__auto___31974);\nvar a_31976__$1 = (new Array(cljs.core.count(block_31975)));\nvar i_31977__$1 = (0);\nvar xs_31978 = cljs.core.seq(block_31975);\nwhile(true){\nif(xs_31978){\n(a_31976__$1[i_31977__$1] = cljs.core.first(xs_31978));\n\nvar G__31979 = (i_31977__$1 + (1));\nvar G__31980 = cljs.core.next(xs_31978);\ni_31977__$1 = G__31979;\nxs_31978 = G__31980;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif((i_31971 < (32))){\n(new_arr1[i_31971] = cljs.core.__GT_VectorNode(null,a_31976__$1));\n} else {\n(new_arr2[(i_31971 - (32))] = cljs.core.__GT_VectorNode(null,a_31976__$1));\n}\n\nvar G__31981 = (i_31971 + (1));\nvar G__31982 = cljs.core.next(bs_31972);\ni_31971 = G__31981;\nbs_31972 = G__31982;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif((!(reg_QMARK_))){\n(new_arr2[(32)] = clojure.core.rrb_vector.nodes.regular_ranges((5),(p - (1024))));\n} else {\n}\n\n(transferred_leaves.val = ((1024) - sbc1));\n\nreturn [new_n1,new_n2];\n\n}\n}\n});\nclojure.core.rrb_vector.rrbt.child_seq = (function clojure$core$rrb_vector$rrbt$child_seq(node,shift,cnt){\nvar arr = node.arr;\nvar rngs = ((clojure.core.rrb_vector.nodes.regular_QMARK_(node))?clojure.core.rrb_vector.nodes.regular_ranges(shift,cnt):clojure.core.rrb_vector.nodes.node_ranges(node));\nvar cs = (cljs.core.truth_(rngs)?(rngs[(32)]):clojure.core.rrb_vector.nodes.index_of_nil(arr));\nvar cseq = (function clojure$core$rrb_vector$rrbt$child_seq_$_cseq(c,r){\nvar arr__$1 = c.arr;\nvar rngs__$1 = ((clojure.core.rrb_vector.nodes.regular_QMARK_(c))?clojure.core.rrb_vector.nodes.regular_ranges((shift - (5)),r):clojure.core.rrb_vector.nodes.node_ranges(c));\nvar gcs = (cljs.core.truth_(rngs__$1)?(rngs__$1[(32)]):clojure.core.rrb_vector.nodes.index_of_nil(arr__$1));\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.list,cljs.core.take.cljs$core$IFn$_invoke$arity$2(gcs,arr__$1),cljs.core.take.cljs$core$IFn$_invoke$arity$2(gcs,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core._,rngs__$1,cljs.core.cons((0),rngs__$1))));\n});\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cseq,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.take.cljs$core$IFn$_invoke$arity$2(cs,arr),cljs.core.take.cljs$core$IFn$_invoke$arity$2(cs,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core._,rngs,cljs.core.cons((0),rngs)))], 0));\n});\nclojure.core.rrb_vector.rrbt.rebalance = (function clojure$core$rrb_vector$rrbt$rebalance(shift,n1,cnt1,n2,cnt2,transferred_leaves){\nif((n2 == null)){\nreturn [n1,null];\n} else {\nvar slc1 = clojure.core.rrb_vector.rrbt.slot_count(n1,shift);\nvar slc2 = clojure.core.rrb_vector.rrbt.slot_count(n2,shift);\nvar a = (slc1 + slc2);\nvar sbc1 = clojure.core.rrb_vector.rrbt.subtree_branch_count(n1,shift);\nvar sbc2 = clojure.core.rrb_vector.rrbt.subtree_branch_count(n2,shift);\nvar p = (sbc1 + sbc2);\nvar e = (a - (cljs.core.quot((p - (1)),(32)) + (1)));\nif((e <= (2))){\nreturn [n1,n2];\n} else {\nif(((sbc1 + sbc2) <= (1024))){\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_n1 = cljs.core.__GT_VectorNode(null,new_arr);\nvar i_31983 = (0);\nvar bs_31984 = cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((32),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.child_seq(n1,shift,cnt1),clojure.core.rrb_vector.rrbt.child_seq(n2,shift,cnt2)));\nwhile(true){\nvar temp__5735__auto___31985 = cljs.core.seq(bs_31984);\nif(temp__5735__auto___31985){\nvar xs__6292__auto___31986 = temp__5735__auto___31985;\nvar block_31987 = cljs.core.first(xs__6292__auto___31986);\nvar a_31988__$1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar r_31989 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(a_31988__$1[(32)] = r_31989);\n\n(r_31989[(32)] = cljs.core.count(block_31987));\n\nvar i_31990__$1 = (0);\nvar o_31991 = (0);\nvar gcs_31992 = cljs.core.seq(block_31987);\nwhile(true){\nvar temp__5735__auto___31993__$1 = cljs.core.seq(gcs_31992);\nif(temp__5735__auto___31993__$1){\nvar xs__6292__auto___31994__$1 = temp__5735__auto___31993__$1;\nvar vec__31836_31995 = cljs.core.first(xs__6292__auto___31994__$1);\nvar gc_31996 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31836_31995,(0),null);\nvar gcr_31997 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31836_31995,(1),null);\n(a_31988__$1[i_31990__$1] = gc_31996);\n\n(r_31989[i_31990__$1] = (o_31991 + gcr_31997));\n\nvar G__31998 = (i_31990__$1 + (1));\nvar G__31999 = (o_31991 + gcr_31997);\nvar G__32000 = cljs.core.next(gcs_31992);\ni_31990__$1 = G__31998;\no_31991 = G__31999;\ngcs_31992 = G__32000;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_arr[i_31983] = cljs.core.__GT_VectorNode(null,a_31988__$1));\n\n(new_rngs[i_31983] = ((r_31989[((r_31989[(32)]) - (1))]) + (((i_31983 > (0)))?(new_rngs[(i_31983 - (1))]):(0))));\n\n(new_rngs[(32)] = (i_31983 + (1)));\n\nvar G__32001 = (i_31983 + (1));\nvar G__32002 = cljs.core.next(bs_31984);\ni_31983 = G__32001;\nbs_31984 = G__32002;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_arr[(32)] = new_rngs);\n\n(transferred_leaves.val = cnt2);\n\nreturn [new_n1,null];\n} else {\nvar new_arr1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_arr2 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs2 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_n1 = cljs.core.__GT_VectorNode(null,new_arr1);\nvar new_n2 = cljs.core.__GT_VectorNode(null,new_arr2);\nvar i_32003 = (0);\nvar bs_32004 = cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((32),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.child_seq(n1,shift,cnt1),clojure.core.rrb_vector.rrbt.child_seq(n2,shift,cnt2)));\nwhile(true){\nvar temp__5735__auto___32005 = cljs.core.seq(bs_32004);\nif(temp__5735__auto___32005){\nvar xs__6292__auto___32006 = temp__5735__auto___32005;\nvar block_32007 = cljs.core.first(xs__6292__auto___32006);\nvar a_32008__$1 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar r_32009 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(a_32008__$1[(32)] = r_32009);\n\n(r_32009[(32)] = cljs.core.count(block_32007));\n\nvar i_32010__$1 = (0);\nvar o_32011 = (0);\nvar gcs_32012 = cljs.core.seq(block_32007);\nwhile(true){\nvar temp__5735__auto___32013__$1 = cljs.core.seq(gcs_32012);\nif(temp__5735__auto___32013__$1){\nvar xs__6292__auto___32014__$1 = temp__5735__auto___32013__$1;\nvar vec__31839_32015 = cljs.core.first(xs__6292__auto___32014__$1);\nvar gc_32016 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31839_32015,(0),null);\nvar gcr_32017 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31839_32015,(1),null);\n(a_32008__$1[i_32010__$1] = gc_32016);\n\n(r_32009[i_32010__$1] = (o_32011 + gcr_32017));\n\nvar G__32018 = (i_32010__$1 + (1));\nvar G__32019 = (o_32011 + gcr_32017);\nvar G__32020 = cljs.core.next(gcs_32012);\ni_32010__$1 = G__32018;\no_32011 = G__32019;\ngcs_32012 = G__32020;\ncontinue;\n} else {\n}\nbreak;\n}\n\nif((((i_32003 < (32))) && ((((i_32003 * (32)) + cljs.core.count(block_32007)) > sbc1)))){\nvar tbs_32021 = (((i_32003 * (32)) + cljs.core.count(block_32007)) - sbc1);\nvar li_32022 = ((r_32009[(32)]) - (1));\nvar d_32023 = (((tbs_32021 >= (32)))?(r_32009[li_32022]):((r_32009[li_32022]) - (r_32009[(li_32022 - tbs_32021)])));\n(transferred_leaves.val = (transferred_leaves.val + d_32023));\n} else {\n}\n\nvar new_arr_32024 = (((i_32003 < (32)))?new_arr1:new_arr2);\nvar new_rngs_32025 = (((i_32003 < (32)))?new_rngs1:new_rngs2);\nvar i_32026__$1 = cljs.core.mod(i_32003,(32));\n(new_arr_32024[i_32026__$1] = cljs.core.__GT_VectorNode(null,a_32008__$1));\n\n(new_rngs_32025[i_32026__$1] = ((r_32009[((r_32009[(32)]) - (1))]) + (((i_32026__$1 > (0)))?(new_rngs_32025[(i_32026__$1 - (1))]):(0))));\n\n(new_rngs_32025[(32)] = (i_32026__$1 + (1)));\n\nvar G__32027 = (i_32003 + (1));\nvar G__32028 = cljs.core.next(bs_32004);\ni_32003 = G__32027;\nbs_32004 = G__32028;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_arr1[(32)] = new_rngs1);\n\n(new_arr2[(32)] = new_rngs2);\n\nreturn [new_n1,new_n2];\n\n}\n}\n}\n});\nclojure.core.rrb_vector.rrbt.zippath = (function clojure$core$rrb_vector$rrbt$zippath(shift,n1,cnt1,n2,cnt2,transferred_leaves){\nif((shift === (5))){\nreturn clojure.core.rrb_vector.rrbt.rebalance_leaves(n1,cnt1,n2,cnt2,transferred_leaves);\n} else {\nvar c1 = clojure.core.rrb_vector.nodes.last_child(n1);\nvar c2 = clojure.core.rrb_vector.nodes.first_child(n2);\nvar ccnt1 = ((clojure.core.rrb_vector.nodes.regular_QMARK_(n1))?(function (){var m = cljs.core.mod(cnt1,((1) << shift));\nif((m === (0))){\nreturn ((1) << shift);\n} else {\nreturn m;\n}\n})():(function (){var rngs = clojure.core.rrb_vector.nodes.node_ranges(n1);\nvar i = ((rngs[(32)]) - (1));\nif((i === (0))){\nreturn (rngs[(0)]);\n} else {\nreturn ((rngs[i]) - (rngs[(i - (1))]));\n}\n})());\nvar ccnt2 = ((clojure.core.rrb_vector.nodes.regular_QMARK_(n2))?(function (){var m = cljs.core.mod(cnt2,((1) << shift));\nif((m === (0))){\nreturn ((1) << shift);\n} else {\nreturn m;\n}\n})():(clojure.core.rrb_vector.nodes.node_ranges(n2)[(0)]));\nvar next_transferred_leaves = (new cljs.core.Box((0)));\nvar vec__31842 = (function (){var G__31845 = (shift - (5));\nvar G__31846 = c1;\nvar G__31847 = ccnt1;\nvar G__31848 = c2;\nvar G__31849 = ccnt2;\nvar G__31850 = next_transferred_leaves;\nreturn (clojure.core.rrb_vector.rrbt.zippath.cljs$core$IFn$_invoke$arity$6 ? clojure.core.rrb_vector.rrbt.zippath.cljs$core$IFn$_invoke$arity$6(G__31845,G__31846,G__31847,G__31848,G__31849,G__31850) : clojure.core.rrb_vector.rrbt.zippath.call(null,G__31845,G__31846,G__31847,G__31848,G__31849,G__31850));\n})();\nvar new_c1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31842,(0),null);\nvar new_c2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31842,(1),null);\nvar d = next_transferred_leaves.val;\n(transferred_leaves.val = (transferred_leaves.val + d));\n\nreturn clojure.core.rrb_vector.rrbt.rebalance(shift,(((c1 === new_c1))?n1:clojure.core.rrb_vector.nodes.replace_rightmost_child(shift,n1,new_c1,d)),(cnt1 + d),(cljs.core.truth_(new_c2)?(((c2 === new_c2))?n2:clojure.core.rrb_vector.nodes.replace_leftmost_child(shift,n2,cnt2,new_c2,d)):clojure.core.rrb_vector.nodes.remove_leftmost_child(shift,n2)),(cnt2 - d),transferred_leaves);\n}\n});\nclojure.core.rrb_vector.rrbt.squash_nodes = (function clojure$core$rrb_vector$rrbt$squash_nodes(shift,n1,cnt1,n2,cnt2){\nvar arr1 = n1.arr;\nvar arr2 = n2.arr;\nvar li1 = clojure.core.rrb_vector.nodes.index_of_nil(arr1);\nvar li2 = clojure.core.rrb_vector.nodes.index_of_nil(arr2);\nvar slots = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(li1,arr1),cljs.core.take.cljs$core$IFn$_invoke$arity$2(li2,arr2));\nif((cljs.core.count(slots) > (32))){\nreturn [n1,n2];\n} else {\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar rngs1 = cljs.core.take.cljs$core$IFn$_invoke$arity$2(li1,((clojure.core.rrb_vector.nodes.regular_QMARK_(n1))?clojure.core.rrb_vector.nodes.regular_ranges(shift,cnt1):clojure.core.rrb_vector.nodes.node_ranges(n1)));\nvar rngs2 = cljs.core.take.cljs$core$IFn$_invoke$arity$2(li2,((clojure.core.rrb_vector.nodes.regular_QMARK_(n2))?clojure.core.rrb_vector.nodes.regular_ranges(shift,cnt2):clojure.core.rrb_vector.nodes.node_ranges(n2)));\nvar rngs2__$1 = (function (){var r = cljs.core.last(rngs1);\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__31851_SHARP_){\nreturn (p1__31851_SHARP_ + r);\n}),rngs2);\n})();\nvar rngs = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(rngs1,rngs2__$1);\n(new_arr[(32)] = new_rngs);\n\nvar i_32029 = (0);\nvar cs_32030 = cljs.core.seq(slots);\nwhile(true){\nif(cs_32030){\n(new_arr[i_32029] = cljs.core.first(cs_32030));\n\nvar G__32031 = (i_32029 + (1));\nvar G__32032 = cljs.core.next(cs_32030);\ni_32029 = G__32031;\ncs_32030 = G__32032;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar i_32033 = (0);\nvar rngs_32034__$1 = cljs.core.seq(rngs);\nwhile(true){\nif(rngs_32034__$1){\n(new_rngs[i_32033] = cljs.core.first(rngs_32034__$1));\n\nvar G__32035 = (i_32033 + (1));\nvar G__32036 = cljs.core.next(rngs_32034__$1);\ni_32033 = G__32035;\nrngs_32034__$1 = G__32036;\ncontinue;\n} else {\n(new_rngs[(32)] = i_32033);\n}\nbreak;\n}\n\nreturn [cljs.core.__GT_VectorNode(null,new_arr),null];\n}\n});\nclojure.core.rrb_vector.rrbt.peephole_optimization_config = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250),null], null));\nclojure.core.rrb_vector.rrbt.peephole_optimization_count = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0));\nclojure.core.rrb_vector.rrbt.child_nodes = (function clojure$core$rrb_vector$rrbt$child_nodes(node){\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2((32),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(cljs.core.nil_QMARK_),node.arr));\n});\nclojure.core.rrb_vector.rrbt.bounded_grandchildren = (function clojure$core$rrb_vector$rrbt$bounded_grandchildren(children){\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2((33),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(clojure.core.rrb_vector.rrbt.child_nodes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children], 0)));\n});\nclojure.core.rrb_vector.rrbt.last_non_nil_idx = (function clojure$core$rrb_vector$rrbt$last_non_nil_idx(arr){\nvar i = (arr.length - (1));\nwhile(true){\nif((i < (0))){\nreturn i;\n} else {\nif(((arr[i]) == null)){\nvar G__32037 = (i - (1));\ni = G__32037;\ncontinue;\n} else {\nreturn i;\n}\n}\nbreak;\n}\n});\nclojure.core.rrb_vector.rrbt.count_vector_elements_beneath = (function clojure$core$rrb_vector$rrbt$count_vector_elements_beneath(node,shift){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar node__$1 = node;\nvar shift__$1 = shift;\nvar acc = (0);\nwhile(true){\nif((shift__$1 === (0))){\nif((node__$1 == null)){\nreturn acc;\n} else {\nreturn (acc + (32));\n}\n} else {\nvar arr = node__$1.arr;\nvar max_child_idx = clojure.core.rrb_vector.rrbt.last_non_nil_idx(arr);\nvar num_elems_in_full_child = ((1) << shift__$1);\nif((max_child_idx < (0))){\nreturn acc;\n} else {\nvar G__32038 = (arr[max_child_idx]);\nvar G__32039 = (shift__$1 - (5));\nvar G__32040 = (acc + (max_child_idx * num_elems_in_full_child));\nnode__$1 = G__32038;\nshift__$1 = G__32039;\nacc = G__32040;\ncontinue;\n}\n}\nbreak;\n}\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nreturn (rngs[((rngs[(32)]) - (1))]);\n}\n});\nclojure.core.rrb_vector.rrbt.peephole_optimize_root = (function clojure$core$rrb_vector$rrbt$peephole_optimize_root(v){\nvar config = cljs.core.deref(clojure.core.rrb_vector.rrbt.peephole_optimization_config);\nif((v.shift <= (10))){\nreturn v;\n} else {\nvar root = v.root;\nvar children = clojure.core.rrb_vector.rrbt.child_nodes(root);\nvar grandchildren = clojure.core.rrb_vector.rrbt.bounded_grandchildren(children);\nvar num_granchildren_bounded = cljs.core.count(grandchildren);\nvar many_grandchildren_QMARK_ = (num_granchildren_bounded > (32));\nif(many_grandchildren_QMARK_){\nreturn v;\n} else {\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_root = cljs.core.__GT_VectorNode(root.edit,new_arr);\nvar shift = v.shift;\nvar grandchild_shift = (shift - ((2) * (5)));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.peephole_optimization_count,cljs.core.inc);\n\nvar idx_32041 = (0);\nvar remaining_gc_32042 = grandchildren;\nvar elem_sum_32043 = (0);\nwhile(true){\nvar temp__5733__auto___32044 = cljs.core.seq(remaining_gc_32042);\nif(temp__5733__auto___32044){\nvar remaining_gc_32045__$1 = temp__5733__auto___32044;\nvar grandchild_32046 = cljs.core.first(remaining_gc_32045__$1);\nvar num_elems_this_grandchild_32047 = clojure.core.rrb_vector.rrbt.count_vector_elements_beneath(grandchild_32046,grandchild_shift);\nvar next_elem_sum_32048 = (elem_sum_32043 + num_elems_this_grandchild_32047);\n(new_arr[idx_32041] = grandchild_32046);\n\n(new_rngs[idx_32041] = next_elem_sum_32048);\n\nvar G__32049 = (idx_32041 + (1));\nvar G__32050 = cljs.core.rest(remaining_gc_32045__$1);\nvar G__32051 = next_elem_sum_32048;\nidx_32041 = G__32049;\nremaining_gc_32042 = G__32050;\nelem_sum_32043 = G__32051;\ncontinue;\n} else {\n}\nbreak;\n}\n\n(new_rngs[(32)] = num_granchildren_bounded);\n\n(new_arr[(32)] = new_rngs);\n\nvar new_v = (new clojure.core.rrb_vector.rrbt.Vector(v.cnt,(shift - (5)),new_root,v.tail,v.meta,null));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config))){\nvar fexpr__31852_32057 = new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config);\n(fexpr__31852_32057.cljs$core$IFn$_invoke$arity$2 ? fexpr__31852_32057.cljs$core$IFn$_invoke$arity$2(v,new_v) : fexpr__31852_32057.call(null,v,new_v));\n} else {\n}\n\nreturn new_v;\n}\n}\n});\nclojure.core.rrb_vector.rrbt.max_vector_elements = (2147483647);\nclojure.core.rrb_vector.rrbt.shift_too_large_QMARK_ = (function clojure$core$rrb_vector$rrbt$shift_too_large_QMARK_(v){\nreturn (v.shift > (30));\n});\nclojure.core.rrb_vector.rrbt.poor_branching_QMARK_ = (function clojure$core$rrb_vector$rrbt$poor_branching_QMARK_(v){\nvar tail_off = clojure.core.rrb_vector.rrbt._tail_offset(v);\nif((tail_off === (0))){\nreturn false;\n} else {\nvar shift_amount = (v.shift - (5));\nvar max_capacity_divided_by_1024 = ((1) << shift_amount);\nreturn (tail_off < max_capacity_divided_by_1024);\n}\n});\nclojure.core.rrb_vector.rrbt.fallback_config = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250),null], null));\nclojure.core.rrb_vector.rrbt.fallback_to_slow_splice_count1 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0));\nclojure.core.rrb_vector.rrbt.fallback_to_slow_splice_count2 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0));\nclojure.core.rrb_vector.rrbt.fallback_to_slow_splice_if_needed = (function clojure$core$rrb_vector$rrbt$fallback_to_slow_splice_if_needed(v1,v2,splice_result){\nvar config = cljs.core.deref(clojure.core.rrb_vector.rrbt.fallback_config);\nif(((clojure.core.rrb_vector.rrbt.shift_too_large_QMARK_(splice_result)) || (clojure.core.rrb_vector.rrbt.poor_branching_QMARK_(splice_result)))){\n\nif(clojure.core.rrb_vector.rrbt.poor_branching_QMARK_(v1)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.fallback_to_slow_splice_count1,cljs.core.inc);\n\n\nvar new_splice_result = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(v1),v1),v2);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config))){\nvar fexpr__31853_32058 = new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config);\n(fexpr__31853_32058.cljs$core$IFn$_invoke$arity$2 ? fexpr__31853_32058.cljs$core$IFn$_invoke$arity$2(splice_result,new_splice_result) : fexpr__31853_32058.call(null,splice_result,new_splice_result));\n} else {\n}\n\nreturn new_splice_result;\n} else {\nvar new_splice_result = cljs.core.into.cljs$core$IFn$_invoke$arity$2(v1,v2);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.rrbt.fallback_to_slow_splice_count2,cljs.core.inc);\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config))){\nvar fexpr__31854_32059 = new cljs.core.Keyword(null,\"debug-fn\",\"debug-fn\",777839250).cljs$core$IFn$_invoke$arity$1(config);\n(fexpr__31854_32059.cljs$core$IFn$_invoke$arity$2 ? fexpr__31854_32059.cljs$core$IFn$_invoke$arity$2(splice_result,new_splice_result) : fexpr__31854_32059.call(null,splice_result,new_splice_result));\n} else {\n}\n\nreturn new_splice_result;\n}\n} else {\nreturn splice_result;\n}\n});\nclojure.core.rrb_vector.rrbt.splice_rrbts_main = (function clojure$core$rrb_vector$rrbt$splice_rrbts_main(v1,v2){\nif((cljs.core.count(v1) === (0))){\nreturn v2;\n} else {\nif(((cljs.core.count(v1) + cljs.core.count(v2)) > clojure.core.rrb_vector.rrbt.max_vector_elements)){\nvar c1 = cljs.core.count(v1);\nvar c2 = cljs.core.count(v2);\nthrow (new Error([\"Attempted to concatenate two vectors whose total\",\" number of elements is \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((c1 + c2)),\", which is\",\" larger than the maximum number of elements \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.core.rrb_vector.rrbt.max_vector_elements),\" supported in a vector \"].join('')));\n} else {\nif((cljs.core.count(v2) < (33))){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(v1,v2);\n} else {\nvar s1 = v1.shift;\nvar s2 = v2.shift;\nvar r1 = v1.root;\nvar o_QMARK_ = clojure.core.rrb_vector.nodes.overflow_QMARK_(r1,s1,(cljs.core.count(v1) + ((32) - v1.tail.length)));\nvar r1__$1 = ((o_QMARK_)?(function (){var tail = v1.tail;\nvar tail_node = cljs.core.__GT_VectorNode(null,tail);\nvar reg_QMARK_ = ((clojure.core.rrb_vector.nodes.regular_QMARK_(r1)) && ((tail.length === (32))));\nvar arr = (new Array(((reg_QMARK_)?(32):(33))));\n(arr[(0)] = r1);\n\n(arr[(1)] = clojure.core.rrb_vector.nodes.new_path_STAR_(s1,tail_node));\n\nif((!(reg_QMARK_))){\nvar rngs_32072 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(rngs_32072[(32)] = (2));\n\n(rngs_32072[(0)] = (cljs.core.count(v1) - tail.length));\n\n(rngs_32072[(1)] = cljs.core.count(v1));\n\n(arr[(32)] = rngs_32072);\n} else {\n}\n\nreturn cljs.core.__GT_VectorNode(null,arr);\n})():clojure.core.rrb_vector.nodes.fold_tail(r1,s1,clojure.core.rrb_vector.rrbt._tail_offset(v1),v1.tail));\nvar s1__$1 = ((o_QMARK_)?(s1 + (5)):s1);\nvar r2 = v2.root;\nvar s = (function (){var x__4214__auto__ = s1__$1;\nvar y__4215__auto__ = s2;\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nvar r1__$2 = clojure.core.rrb_vector.rrbt.shift_from_to(r1__$1,s1__$1,s);\nvar r2__$1 = clojure.core.rrb_vector.rrbt.shift_from_to(r2,s2,s);\nvar transferred_leaves = (new cljs.core.Box((0)));\nvar vec__31855 = clojure.core.rrb_vector.rrbt.zippath(s,r1__$2,cljs.core.count(v1),r2__$1,(cljs.core.count(v2) - v2.tail.length),transferred_leaves);\nvar n1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31855,(0),null);\nvar n2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31855,(1),null);\nvar d = transferred_leaves.val;\nvar ncnt1 = (cljs.core.count(v1) + d);\nvar ncnt2 = ((cljs.core.count(v2) - v2.tail.length) - d);\nvar vec__31858 = (((n2 === r2__$1))?clojure.core.rrb_vector.rrbt.squash_nodes(s,n1,ncnt1,n2,ncnt2):[n1,n2]);\nvar n1__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31858,(0),null);\nvar n2__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__31858,(1),null);\nvar ncnt1__$1 = (cljs.core.truth_(n2__$1)?ncnt1:(ncnt1 + ncnt2));\nvar ncnt2__$1 = (cljs.core.truth_(n2__$1)?ncnt2:(0));\nif(cljs.core.truth_(n2__$1)){\nvar arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_root = cljs.core.__GT_VectorNode(null,arr);\n(arr[(0)] = n1__$1);\n\n(arr[(1)] = n2__$1);\n\n(arr[(32)] = (function (){var G__31861 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(G__31861[(0)] = ncnt1__$1);\n\n(G__31861[(1)] = (ncnt1__$1 + ncnt2__$1));\n\n(G__31861[(32)] = (2));\n\nreturn G__31861;\n})());\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector((cljs.core.count(v1) + cljs.core.count(v2)),(s + (5)),new_root,v2.tail,null,null));\n} else {\nvar r = n1__$1;\nvar s__$1 = s;\nwhile(true){\nif((((s__$1 > (5))) && (((r.arr[(1)]) == null)))){\nvar G__32098 = (r.arr[(0)]);\nvar G__32099 = (s__$1 - (5));\nr = G__32098;\ns__$1 = G__32099;\ncontinue;\n} else {\nreturn (new clojure.core.rrb_vector.rrbt.Vector((cljs.core.count(v1) + cljs.core.count(v2)),s__$1,r,v2.tail,null,null));\n}\nbreak;\n}\n}\n\n}\n}\n}\n});\nclojure.core.rrb_vector.rrbt.splice_rrbts = (function clojure$core$rrb_vector$rrbt$splice_rrbts(v1,v2){\nvar r1 = clojure.core.rrb_vector.rrbt.splice_rrbts_main(v1,v2);\nvar r2 = clojure.core.rrb_vector.rrbt.peephole_optimize_root(r1);\nreturn clojure.core.rrb_vector.rrbt.fallback_to_slow_splice_if_needed(v1,v2,r2);\n});\n\n/**\n* @constructor\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ITransientCollection}\n * @implements {cljs.core.ITransientVector}\n * @implements {cljs.core.ITransientAssociative}\n * @implements {clojure.core.rrb_vector.rrbt.IVecImpl}\n*/\nclojure.core.rrb_vector.rrbt.Transient = (function (cnt,shift,root,tail,tidx){\nthis.cnt = cnt;\nthis.shift = shift;\nthis.root = root;\nthis.tail = tail;\nthis.tidx = tidx;\nthis.cljs$lang$protocol_mask$partition1$ = 88;\nthis.cljs$lang$protocol_mask$partition0$ = 2;\n});\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (this$,o){\nvar self__ = this;\nvar this$__$1 = this;\nif(self__.root.edit){\nif((self__.tidx < (32))){\n(self__.tail[self__.tidx] = o);\n\n(self__.cnt = (self__.cnt + (1)));\n\n(self__.tidx = (self__.tidx + (1)));\n\nreturn this$__$1;\n} else {\nvar tail_node = cljs.core.__GT_VectorNode(self__.root.edit,self__.tail);\nvar new_tail = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(new_tail[(0)] = o);\n\n(self__.tail = new_tail);\n\n(self__.tidx = (1));\n\nif(clojure.core.rrb_vector.nodes.overflow_QMARK_(self__.root,self__.shift,self__.cnt)){\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(self__.root)){\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar G__31862_32100 = new_arr;\n(G__31862_32100[(0)] = self__.root);\n\n(G__31862_32100[(1)] = clojure.core.rrb_vector.trees.new_path(self__.tail,self__.root.edit,self__.shift,tail_node));\n\n\n(self__.root = cljs.core.__GT_VectorNode(self__.root.edit,new_arr));\n\n(self__.shift = (self__.shift + (5)));\n\n(self__.cnt = (self__.cnt + (1)));\n\nreturn this$__$1;\n} else {\nvar new_arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_rngs = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\nvar new_root = cljs.core.__GT_VectorNode(self__.root.edit,new_arr);\nvar root_total_range = (clojure.core.rrb_vector.nodes.node_ranges(self__.root)[(31)]);\nvar G__31863_32104 = new_arr;\n(G__31863_32104[(0)] = self__.root);\n\n(G__31863_32104[(1)] = clojure.core.rrb_vector.trees.new_path(self__.tail,self__.root.edit,self__.shift,tail_node));\n\n(G__31863_32104[(32)] = new_rngs);\n\n\nvar G__31864_32105 = new_rngs;\n(G__31864_32105[(0)] = root_total_range);\n\n(G__31864_32105[(1)] = (root_total_range + (32)));\n\n(G__31864_32105[(32)] = (2));\n\n\n(self__.root = new_root);\n\n(self__.shift = (self__.shift + (5)));\n\n(self__.cnt = (self__.cnt + (1)));\n\nreturn this$__$1;\n}\n} else {\nvar new_root = clojure.core.rrb_vector.transients.push_tail_BANG_(self__.shift,self__.cnt,self__.root.edit,self__.root,tail_node);\n(self__.root = new_root);\n\n(self__.cnt = (self__.cnt + (1)));\n\nreturn this$__$1;\n}\n}\n} else {\nthrow (new Error(\"conj! after persistent!\"));\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif(self__.root.edit){\n(self__.root.edit = null);\n\nvar trimmed_tail = (new Array(self__.tidx));\ncljs.core.array_copy(self__.tail,(0),trimmed_tail,(0),self__.tidx);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(self__.cnt,self__.shift,self__.root,trimmed_tail,null,null));\n} else {\nthrow (new Error(\"persistent! called twice\"));\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (this$,key,val){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null,key,val);\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = (function (this$,i,val){\nvar self__ = this;\nvar this$__$1 = this;\nif(self__.root.edit){\nif(((((0) <= i)) && ((i < self__.cnt)))){\nvar tail_off = (self__.cnt - self__.tidx);\nif((tail_off <= i)){\n(self__.tail[(i - tail_off)] = val);\n} else {\n(self__.root = clojure.core.rrb_vector.transients.do_assoc_BANG_(self__.shift,self__.root.edit,self__.root,i,val));\n}\n\nreturn this$__$1;\n} else {\nif((i === self__.cnt)){\nreturn this$__$1.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null,val);\n} else {\nreturn cljs.core.vector_index_out_of_bounds(i,self__.cnt);\n\n}\n}\n} else {\nthrow (new Error(\"assoc! after persistent!\"));\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif(self__.root.edit){\nif((self__.cnt === (0))){\nthrow (new Error(\"Can't pop empty vector\"));\n} else {\nif(((1) === self__.cnt)){\n(self__.cnt = (0));\n\n(self__.tidx = (0));\n\n(self__.tail[(0)] = null);\n\nreturn this$__$1;\n} else {\nif((self__.tidx > (1))){\n(self__.cnt = (self__.cnt - (1)));\n\n(self__.tidx = (self__.tidx - (1)));\n\n(self__.tail[self__.tidx] = null);\n\nreturn this$__$1;\n} else {\nvar new_tail_base = this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2(null,(self__.cnt - (2)));\nvar new_tail = clojure.core.rrb_vector.transients.editable_tail(new_tail_base);\nvar new_tidx = new_tail_base.length;\nvar new_root = clojure.core.rrb_vector.transients.pop_tail_BANG_(self__.shift,self__.cnt,self__.root.edit,self__.root);\nif((new_root == null)){\n(self__.cnt = (self__.cnt - (1)));\n\n(self__.root = clojure.core.rrb_vector.transients.ensure_editable(self__.root.edit,clojure.core.rrb_vector.nodes.empty_node));\n\n(self__.tail = new_tail);\n\n(self__.tidx = new_tidx);\n\nreturn this$__$1;\n} else {\nif((((self__.shift > (5))) && (((new_root.arr[(1)]) == null)))){\n(self__.cnt = (self__.cnt - (1)));\n\n(self__.shift = (self__.shift - (5)));\n\n(self__.root = clojure.core.rrb_vector.transients.ensure_editable(self__.root.edit,(new_root.arr[(0)])));\n\n(self__.tail = new_tail);\n\n(self__.tidx = new_tidx);\n\nreturn this$__$1;\n} else {\n(self__.cnt = (self__.cnt - (1)));\n\n(self__.root = new_root);\n\n(self__.tail = new_tail);\n\n(self__.tidx = new_tidx);\n\nreturn this$__$1;\n\n}\n}\n\n}\n}\n}\n} else {\nthrow (new Error(\"count after persistent!\"));\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.cljs$core$ICounted$_count$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nif(self__.root.edit){\nreturn self__.cnt;\n} else {\nthrow (new Error(\"count after persistent!\"));\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (self__.cnt - self__.tidx);\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.prototype.clojure$core$rrb_vector$rrbt$IVecImpl$_array_for$arity$2 = (function (this$,i){\nvar self__ = this;\nvar this$__$1 = this;\nif(((((0) <= i)) && ((i < self__.cnt)))){\nif((i >= this$__$1.clojure$core$rrb_vector$rrbt$IVecImpl$_tail_offset$arity$1(null))){\nreturn self__.tail;\n} else {\nvar i__$1 = i;\nvar node = self__.root;\nvar shift__$1 = self__.shift;\nwhile(true){\nif((shift__$1 === (0))){\nreturn node.arr;\n} else {\nif(clojure.core.rrb_vector.nodes.regular_QMARK_(node)){\nvar node__$1 = (node.arr[((i__$1 >> shift__$1) & (31))]);\nvar shift__$2 = (shift__$1 - (5));\nwhile(true){\nif((shift__$2 === (0))){\nreturn node__$1.arr;\n} else {\nvar G__32120 = (node__$1.arr[((i__$1 >> shift__$2) & (31))]);\nvar G__32121 = (shift__$2 - (5));\nnode__$1 = G__32120;\nshift__$2 = G__32121;\ncontinue;\n}\nbreak;\n}\n} else {\nvar rngs = clojure.core.rrb_vector.nodes.node_ranges(node);\nvar j = (function (){var j = ((i__$1 >> shift__$1) & (31));\nwhile(true){\nif((i__$1 < (rngs[j]))){\nreturn j;\n} else {\nvar G__32122 = (j + (1));\nj = G__32122;\ncontinue;\n}\nbreak;\n}\n})();\nvar i__$2 = (((j > (0)))?(i__$1 - (rngs[(j - (1))])):i__$1);\nvar G__32123 = i__$2;\nvar G__32124 = (node.arr[j]);\nvar G__32125 = (shift__$1 - (5));\ni__$1 = G__32123;\nnode = G__32124;\nshift__$1 = G__32125;\ncontinue;\n}\n}\nbreak;\n}\n}\n} else {\nreturn cljs.core.vector_index_out_of_bounds(i,self__.cnt);\n}\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"shift\",\"shift\",-1657295705,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"root\",\"root\",1191874074,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"tail\",\"tail\",494507963,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"tidx\",\"tidx\",1939123455,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"mutable\",\"mutable\",875778266),true], null))], null);\n}));\n\n(clojure.core.rrb_vector.rrbt.Transient.cljs$lang$type = true);\n\n(clojure.core.rrb_vector.rrbt.Transient.cljs$lang$ctorStr = \"clojure.core.rrb-vector.rrbt/Transient\");\n\n(clojure.core.rrb_vector.rrbt.Transient.cljs$lang$ctorPrWriter = (function (this__4369__auto__,writer__4370__auto__,opt__4371__auto__){\nreturn cljs.core._write(writer__4370__auto__,\"clojure.core.rrb-vector.rrbt/Transient\");\n}));\n\n/**\n * Positional factory function for clojure.core.rrb-vector.rrbt/Transient.\n */\nclojure.core.rrb_vector.rrbt.__GT_Transient = (function clojure$core$rrb_vector$rrbt$__GT_Transient(cnt,shift,root,tail,tidx){\nreturn (new clojure.core.rrb_vector.rrbt.Transient(cnt,shift,root,tail,tidx));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/core/rrb_vector/rrbt.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",33],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$dbg","~$clojure.core.rrb-vector.macros"],"~:excludes",["~#set",["~$push-tail","~$new-path","~$do-assoc","~$pop-tail","~$array-for"]],"~:name","~$clojure.core.rrb-vector.rrbt","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.core.rrb-vector.protocols","^V","~$clojure.core.rrb-vector.nodes","^W","~$clojure.core.rrb-vector.trees","^X","~$clojure.core.rrb-vector.transients","^Y","~$cljs.core","^Z","~$goog","^["],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",["^ ","~$editable-root","^Y","~$push-tail!","^Y","~$do-assoc!","^Y","~$regular?","^W","~$ensure-editable","^Y","^K","^X","~$remove-leftmost-child","^W","~$last-range","^W","~$node-ranges","^W","~$first-child","^W","~$new-path*","^W","^L","^X","~$editable-tail","^Y","^M","^X","~$regular-ranges","^W","~$-slicev","^V","~$fold-tail","^W","~$PSliceableVector","^V","^N","^X","~$index-of-nil","^W","~$overflow?","^W","~$empty-node","^W","~$replace-leftmost-child","^W","~$-splicev","^V","~$last-child","^W","~$PSpliceableVector","^V","~$pop-tail!","^Y","~$replace-rightmost-child","^W"],"^12",["^ ","^H","^H","^Z","^Z"],"~:form",["~#list",["~$ns","^Q",["^1M",["~:refer-clojure","~:exclude",["^O","^K","^N","^L","^M"]]],["^1M",["^11",["^V","~:refer",["^1B","^1@","^1I","^1G"]],["^W","^1Q",["^17","^1E","^1;","^1D","^1:","^1?","^1<","^1H","^19","^1F","^1K","^1A","^1=","^1C"]],["^X","^1Q",["^K","^N","^L","^M"]],["^Y","^1Q",["^18","^14","^1>","^15","^1J","^16"]]]],["^1M",["^12",["^H","^1Q",["^G"]]]]]],"~:flags",["^ ","^11",["^J",[]],"^12",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^V","^W","^X","^Y"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","clojure/core/rrb_vector/rrbt.cljs"],"~:compiled-at",1621517184945,"~:resource-name","clojure/core/rrb_vector/rrbt.cljs","~:warnings",[],"~:source","(ns clojure.core.rrb-vector.rrbt\n  (:refer-clojure :exclude [array-for push-tail pop-tail new-path do-assoc])\n  (:require [clojure.core.rrb-vector.protocols\n             :refer [PSliceableVector -slicev\n                     PSpliceableVector -splicev]]\n            [clojure.core.rrb-vector.nodes\n             :refer [regular? empty-node node-ranges overflow? last-range\n                     regular-ranges first-child last-child remove-leftmost-child\n                     replace-leftmost-child replace-rightmost-child\n                     fold-tail new-path* index-of-nil]]\n            [clojure.core.rrb-vector.trees\n             :refer [push-tail pop-tail new-path do-assoc]]\n            [clojure.core.rrb-vector.transients\n             :refer [ensure-editable editable-root editable-tail push-tail!\n                     pop-tail! do-assoc!]])\n  (:require-macros [clojure.core.rrb-vector.macros :refer [dbg]]))\n\n(def ^:const rrbt-concat-threshold 33)\n(def ^:const max-extra-search-steps 2)\n\n(defprotocol IVecImpl\n  (-tail-offset [v])\n  (-array-for [v i]))\n\n(defprotocol AsRRBT\n  (-as-rrbt [v]))\n\n;;; chunked seqs: can't reuse cljs.core's without tweaks, since rrb\n;;; vectors have a different array-for\n\n(declare rrb-chunked-seq)\n\n(deftype RRBChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts this))\n\n  IWithMeta\n  (-with-meta [coll m]\n    (rrb-chunked-seq vec node i off m))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (rrb-chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (rrb-chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    (with-meta cljs.core.List.EMPTY meta))\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n\n  (-chunked-rest [coll]\n    (let [l (alength node)\n          s (when (< (+ i l) (-count vec))\n              (rrb-chunked-seq vec (+ i l) 0))]\n      (if (nil? s)\n        ()\n        s)))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [l (alength node)\n          s (when (< (+ i l) (-count vec))\n              (rrb-chunked-seq vec (+ i l) 0))]\n      (if (nil? s)\n        nil\n        s)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (ci-reduce (cljs.core/subvec vec (+ i off) (count vec)) f))\n\n  (-reduce [coll f start]\n    (ci-reduce (cljs.core/subvec vec (+ i off) (count vec)) f start)))\n\n(defn rrb-chunked-seq\n  ([vec i off]\n     (RRBChunkedSeq. vec (-array-for vec i) i off nil nil))\n  ([vec node i off]\n     (RRBChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (RRBChunkedSeq. vec node i off meta nil)))\n\n(defn slice-right [node shift end]\n  (if (zero? shift)\n    ;; potentially return a short node, although it would be better to\n    ;; make sure a regular leaf is always left at the right, with any\n    ;; items over the final 32 moved into tail (and then potentially\n    ;; back into the tree should the tail become too long...)\n    (let [arr     (.-arr node)\n          new-arr (make-array end)]\n      (array-copy arr 0 new-arr 0 end)\n      (->VectorNode nil new-arr))\n    (let [reg? (regular? node)\n          rngs (if-not reg? (node-ranges node))\n          i    (bit-and (bit-shift-right (dec end) shift) 0x1f)\n          i    (if reg?\n                 i\n                 (loop [j i]\n                   (if (<= end (aget rngs j))\n                     j\n                     (recur (inc j)))))\n          child-end (if reg?\n                      (let [ce (mod end (bit-shift-left 1 shift))]\n                        (if (zero? ce) (bit-shift-left 1 shift) ce))\n                      (if (pos? i)\n                        (- end (aget rngs (dec i)))\n                        end))\n          arr       (.-arr node)\n          new-child (slice-right (aget arr i) (- shift 5) child-end)\n          regular-child? (if (== shift 5)\n                           (== 32 (alength (.-arr new-child)))\n                           (regular? new-child))\n          new-arr   (make-array (if (and reg? regular-child?) 32 33))\n          new-child-rng  (if regular-child?\n                           (let [m (mod child-end (bit-shift-left 1 shift))]\n                             (if (zero? m) (bit-shift-left 1 shift) m))\n                           (if (== shift 5)\n                             (alength (.-arr new-child))\n                             (last-range new-child)))]\n      (array-copy arr 0 new-arr 0 i)\n      (aset new-arr i new-child)\n      (if-not (and reg? regular-child?)\n        (let [new-rngs (make-array 33)\n              step     (bit-shift-left 1 shift)]\n          (if reg?\n            (dotimes [j i]\n              (aset new-rngs j (* (inc j) step)))\n            (dotimes [j i]\n              (aset new-rngs j (aget rngs j))))\n          (aset new-rngs i (+ (if (pos? i) (aget new-rngs (dec i)) 0)\n                              new-child-rng))\n          (aset new-rngs 32 (inc i))\n          (aset new-arr 32 new-rngs)))\n      (->VectorNode nil new-arr))))\n\n(defn slice-left [node shift start end]\n  (if (zero? shift)\n    ;; potentially return a short node\n    (let [arr     (.-arr node)\n          new-len (- (alength arr) start)\n          new-arr (make-array new-len)]\n      (array-copy arr start new-arr 0 new-len)\n      (->VectorNode nil new-arr))\n    (let [reg? (regular? node)\n          arr  (.-arr node)\n          rngs (if-not reg? (node-ranges node))\n          i    (bit-and (bit-shift-right start shift) 0x1f)\n          i    (if reg?\n                 i\n                 (loop [j i]\n                   (if (< start (aget rngs j))\n                     j\n                     (recur (inc j)))))\n          len  (if reg?\n                 (loop [i i]\n                   (if (or (== i 32) (nil? (aget arr i)))\n                     i\n                     (recur (inc i))))\n                 (aget rngs 32))\n          child-start (if (pos? i)\n                        (- start\n                           (if reg?\n                             (* i (bit-shift-left 1 shift))\n                             (aget rngs (dec i))))\n                        start)\n          child-end   (if reg?\n                        (min (bit-shift-left 1 shift)\n                             (if (pos? i)\n                               (- end (* i (bit-shift-left 1 shift)))\n                               end))\n                        (let [capped-end (min (aget rngs i) end)]\n                          (if (pos? i)\n                            (- capped-end (aget rngs (dec i)))\n                            capped-end)))\n          new-child   (slice-left (aget arr i)\n                                  (- shift 5)\n                                  child-start\n                                  child-end)\n          new-len     (- len i)\n          new-len     (if (nil? new-child) (dec new-len) new-len)]\n      (cond\n        (zero? new-len)\n        nil\n\n        reg?\n        (let [new-arr (make-array 33)\n              rngs    (make-array 33)\n              rng0    (if (or (nil? new-child)\n                              (== shift 5)\n                              (regular? new-child))\n                        (- (bit-shift-left 1 shift)\n                           (bit-and (bit-shift-right start (- shift 5)) 0x1f))\n                        (last-range new-child))\n              step    (bit-shift-left 1 shift)]\n          (loop [j 0\n                 r rng0]\n            (when (< j new-len)\n              (aset rngs j r)\n              (recur (inc j) (+ r step))))\n          (when (> new-len 1)\n            (aset rngs (dec new-len) (- end start)))\n          (aset rngs 32 new-len)\n          (array-copy arr (if (nil? new-child) (inc i) i)\n                      new-arr 0\n                      new-len)\n          (if-not (nil? new-child)\n            (aset new-arr 0 new-child))\n          (aset new-arr 32 rngs)\n          (->VectorNode (.-edit node) new-arr))\n\n        :else\n        (let [new-arr  (make-array 33)\n              new-rngs (make-array 33)]\n          (loop [j 0 i i]\n            (when (< j new-len)\n              (aset new-rngs j (- (aget rngs i) start))\n              (recur (inc j) (inc i))))\n          (aset new-rngs 32 new-len)\n          (array-copy arr (if (nil? new-child) (inc i) i)\n                      new-arr 0\n                      new-len)\n          (if-not (nil? new-child)\n            (aset new-arr 0 new-child))\n          (aset new-arr 32 new-rngs)\n          (->VectorNode (.-edit node) new-arr))))))\n\n(declare splice-rrbts ->Transient)\n\n(deftype Vector [cnt shift root tail meta ^:mutable __hash]\n  Object\n  (toString [this]\n    (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts this))\n\n  IWithMeta\n  (-with-meta [this meta]\n    (Vector. cnt shift root tail meta __hash))\n\n  IMeta\n  (-meta [this]\n    meta)\n\n  ISequential\n  IEquiv\n  (-equiv [this that]\n    (equiv-sequential this that))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [this]\n    (cond\n      (zero? cnt) nil\n      (zero? (-tail-offset this)) (array-seq tail)\n      :else (rrb-chunked-seq this 0 0)))\n\n  ICounted\n  (-count [_]\n    cnt)\n\n  IIndexed\n  (-nth [this i]\n    (if (and (<= 0 i) (< i cnt))\n      (let [tail-off (- cnt (alength tail))]\n        (if (<= tail-off i)\n          (aget tail (- i tail-off))\n          (loop [i i node root shift shift]\n            (if (zero? shift)\n              (let [arr (.-arr node)]\n                (aget arr (bit-and (bit-shift-right i shift) 0x1f)))\n              (if (regular? node)\n                (let [arr (.-arr node)\n                      idx (bit-and (bit-shift-right i shift) 0x1f)]\n                  (loop [i     i\n                         node  (aget arr idx)\n                         shift (- shift 5)]\n                    (let [arr (.-arr node)\n                          idx (bit-and (bit-shift-right i shift) 0x1f)]\n                      (if (zero? shift)\n                        (aget arr idx)\n                        (recur i (aget arr idx) (- shift 5))))))\n                (let [arr  (.-arr node)\n                      rngs (node-ranges node)\n                      idx  (loop [j (bit-and (bit-shift-right i shift) 0x1f)]\n                             (if (< i (aget rngs j))\n                               j\n                               (recur (inc j))))\n                      i    (if (zero? idx)\n                             i\n                             (- i (aget rngs (dec idx))))]\n                  (recur i (aget arr idx) (- shift 5))))))))\n      (vector-index-out-of-bounds i cnt)))\n\n  (-nth [this i not-found]\n    (if (and (>= i 0) (< i cnt))\n      (-nth this i)\n      not-found))\n\n  IMapEntry\n  (-key [this]\n    (-nth this 0))\n\n  (-val [this]\n    (-nth this 1))\n\n  ICollection\n  (-conj [this val]\n    (if (< (alength tail) 32)\n      (let [tail-len (alength tail)\n            new-tail (make-array (inc tail-len))]\n        (array-copy tail 0 new-tail 0 tail-len)\n        (aset new-tail tail-len val)\n        (Vector. (inc cnt) shift root new-tail meta nil))\n      (let [tail-node (->VectorNode (.-edit root) tail)\n            new-tail  (let [new-arr (make-array 1)]\n                        (aset new-arr 0 val)\n                        new-arr)]\n        (if (overflow? root shift cnt)\n          (if (regular? root)\n            (let [new-arr  (make-array 32)\n                  new-root (->VectorNode (.-edit root) new-arr)]\n              (doto new-arr\n                (aset 0 root)\n                (aset 1 (new-path tail (.-edit root) shift tail-node)))\n              (Vector. (inc cnt) (+ shift 5) new-root new-tail meta nil))\n            (let [new-arr  (make-array 33)\n                  new-rngs (make-array 33)\n                  new-root (->VectorNode (.-edit root) new-arr)\n                  root-total-range (aget (node-ranges root) 31)]\n              (doto new-arr\n                (aset 0  root)\n                (aset 1  (new-path tail (.-edit root) shift tail-node))\n                (aset 32 new-rngs))\n              (doto new-rngs\n                (aset 0  root-total-range)\n                (aset 1  (+ root-total-range 32))\n                (aset 32 2))\n              (Vector. (inc cnt) (+ shift 5) new-root new-tail meta nil)))\n          (Vector. (inc cnt) shift\n                   (push-tail shift cnt (.-edit root) root tail-node)\n                   new-tail\n                   meta\n                   nil)))))\n\n  IEmptyableCollection\n  (-empty [_]\n    (with-meta cljs.core.PersistentVector.EMPTY meta))\n\n  IStack\n  (-peek [this]\n    (when (pos? cnt)\n      (-nth this (dec cnt))))\n\n  (-pop [this]\n    (cond\n      (zero? cnt)\n      (throw (js/Error. \"Can't pop empty vector\"))\n\n      (== 1 cnt)\n      (-with-meta cljs.core.PersistentVector.EMPTY meta)\n\n      (> (alength tail) 1)\n      (let [new-tail (make-array (dec (alength tail)))]\n        (array-copy tail 0 new-tail 0 (alength new-tail))\n        (Vector. (dec cnt) shift root new-tail meta nil))\n\n      :else\n      (let [new-tail (-array-for this (- cnt 2))\n            root-cnt (-tail-offset this)\n            new-root (pop-tail shift root-cnt (.-edit root) root)]\n        (cond\n          (nil? new-root)\n          (Vector. (dec cnt) shift empty-node new-tail meta nil)\n\n          (and (> shift 5)\n               (nil? (aget (.-arr new-root) 1)))\n          (Vector. (dec cnt)\n                   (- shift 5)\n                   (aget (.-arr new-root) 0)\n                   new-tail\n                   meta\n                   nil)\n\n          :else\n          (Vector. (dec cnt) shift new-root new-tail meta nil)))))\n\n  IVector\n  (-assoc-n [this i val]\n    (cond\n      (and (<= 0 i) (< i cnt))\n      (let [tail-off (-tail-offset this)]\n        (if (>= i tail-off)\n          (let [new-tail (make-array (alength tail))\n                idx (- i tail-off)]\n            (array-copy tail 0 new-tail 0 (alength tail))\n            (aset new-tail idx val)\n            (Vector. cnt shift root new-tail meta nil))\n          (Vector. cnt shift (do-assoc shift root i val) tail meta nil)))\n\n      (== i cnt) (-conj this val)\n      :else (vector-index-out-of-bounds i cnt)))\n\n  IReversible\n  (-rseq [this]\n    (if (pos? cnt)\n      (RSeq. this (dec cnt) nil)\n      nil))\n\n  IAssociative\n  (-assoc [this k v]\n    (-assoc-n this k v))\n\n  ILookup\n  (-lookup [this k]\n    (-nth this k nil))\n\n  (-lookup [this k not-found]\n    (-nth this k not-found))\n\n  IFn\n  (-invoke [this k]\n    (-nth this k))\n\n  (-invoke [this k not-found]\n    (-nth this k not-found))\n\n  IReduce\n  (-reduce [this f]\n    (ci-reduce this f))\n\n  (-reduce [this f start]\n    (ci-reduce this f start))\n\n  IKVReduce\n  (-kv-reduce [this f init]\n    (loop [i    0\n           j    0\n           init init\n           arr  (-array-for this i)\n           lim  (dec (alength arr))\n           step (inc lim)]\n      (let [init (f init (+ i j) (aget arr j))]\n        (if (reduced? init)\n          @init\n          (if (< j lim)\n            (recur i (inc j) init arr lim step)\n            (let [i (+ i step)]\n              (if (< i cnt)\n                (let [arr (-array-for this i)\n                      len (alength arr)\n                      lim (dec len)]\n                  (recur i 0 init arr lim len))\n                init)))))))\n\n  IComparable\n  (-compare [this that]\n    (compare-indexed this that))\n\n  IEditableCollection\n  (-as-transient [this]\n    (->Transient cnt\n                 shift\n                 (editable-root root)\n                 (editable-tail tail)\n                 (alength tail)))\n\n  PSliceableVector\n  (-slicev [this start end]\n    (let [new-cnt (- end start)]\n      (cond\n        (or (neg? start) (> end cnt))\n        (throw (js/Error. \"vector index out of bounds\"))\n\n        (== start end)\n        ;; NB. preserves metadata\n        (empty this)\n\n        (> start end)\n        (throw (js/Error. \"start index greater than end index\"))\n\n        :else\n        (let [tail-off (-tail-offset this)]\n          (if (>= start tail-off)\n            (let [new-tail (make-array new-cnt)]\n              (array-copy tail (- start tail-off)\n                          new-tail 0\n                          new-cnt)\n              (Vector. new-cnt 5 empty-node new-tail meta nil))\n            (let [tail-cut? (> end tail-off)\n                  new-root  (if tail-cut?\n                              root\n                              (slice-right root shift end))\n                  new-root  (if (zero? start)\n                              new-root\n                              (slice-left new-root shift start\n                                          (min end tail-off)))\n                  new-tail  (if tail-cut?\n                              (let [new-len  (- end tail-off)\n                                    new-tail (make-array new-len)]\n                                (array-copy tail 0 new-tail 0 new-len)\n                                new-tail)\n                              (-array-for (Vector. new-cnt shift new-root\n                                                   (array) meta nil)\n                                          (dec new-cnt)))\n                  new-root  (if tail-cut?\n                              new-root\n                              (pop-tail shift new-cnt (.-edit new-root)\n                                        new-root))]\n              (if (nil? new-root)\n                (Vector. new-cnt 5 empty-node new-tail meta nil)\n                (loop [r new-root\n                       s shift]\n                  (if (and (> s 5)\n                           (nil? (aget (.-arr r) 1)))\n                    (recur (aget (.-arr r) 0) (- s 5))\n                    (Vector. new-cnt s r new-tail meta nil))))))))))\n\n  PSpliceableVector\n  (-splicev [this that]\n    (splice-rrbts this (-as-rrbt that)))\n\n  IVecImpl\n  (-tail-offset [this]\n    (- cnt (alength tail)))\n\n  (-array-for [this i]\n    (if (and (<= 0 i) (< i cnt))\n      (if (>= i (-tail-offset this))\n        tail\n        (loop [i i node root shift shift]\n          (if (zero? shift)\n            (.-arr node)\n            (if (regular? node)\n              (loop [node  (aget (.-arr node)\n                                 (bit-and (bit-shift-right i shift) 0x1f))\n                     shift (- shift 5)]\n                (if (zero? shift)\n                  (.-arr node)\n                  (recur (aget (.-arr node)\n                               (bit-and (bit-shift-right i shift) 0x1f))\n                         (- shift 5))))\n              (let [rngs (node-ranges node)\n                    j    (loop [j (bit-and (bit-shift-right i shift) 0x1f)]\n                           (if (< i (aget rngs j))\n                             j\n                             (recur (inc j))))\n                    i    (if (pos? j)\n                           (- i (aget rngs (dec j)))\n                           i)]\n                (recur i\n                       (aget (.-arr node) j)\n                       (- shift 5)))))))\n      (vector-index-out-of-bounds i cnt)))\n\n  AsRRBT\n  (-as-rrbt [this]\n    this))\n\n(extend-protocol AsRRBT\n  cljs.core.PersistentVector\n  (-as-rrbt [this]\n    (Vector. (count this) (.-shift this) (.-root this) (.-tail this)\n             (meta this) nil))\n\n  Subvec\n  (-as-rrbt [this]\n    (let [v     (.-v this)\n          start (.-start this)\n          end   (.-end this)]\n      (-slicev (-as-rrbt v) start end))))\n\n(defn shift-from-to [node from to]\n  (cond\n    (== from to)\n    node\n\n    (regular? node)\n    (recur (->VectorNode (.-edit node) (doto (make-array 32) (aset 0 node)))\n           (+ 5 from)\n           to)\n\n    :else\n    (recur (->VectorNode (.-edit node)\n                         (doto (make-array 33)\n                           (aset 0 node)\n                           (aset 32\n                                 (doto (make-array 33)\n                                   (aset 0  (last-range node))\n                                   (aset 32 1)))))\n           (+ 5 from)\n           to)))\n\n(defn slot-count [node shift]\n  (let [arr (.-arr node)]\n    (if (zero? shift)\n      (alength arr)\n      (if (regular? node)\n        (index-of-nil arr)\n        (let [rngs (node-ranges node)]\n          (aget rngs 32))))))\n\n(defn subtree-branch-count [node shift]\n  ;; NB. positive shifts only\n  (let [arr (.-arr node)\n        cs  (- shift 5)]\n    (if (regular? node)\n      (loop [i 0 sbc 0]\n        (if (== i 32)\n          sbc\n          (if-let [child (aget arr i)]\n            (recur (inc i) (+ sbc (slot-count child cs)))\n            sbc)))\n      (let [lim (aget (node-ranges node) 32)]\n        (loop [i 0 sbc 0]\n          (if (== i lim)\n            sbc\n            (let [child (aget arr i)]\n              (recur (inc i) (+ sbc (slot-count child cs))))))))))\n\n(defn leaf-seq [arr]\n  (mapcat #(.-arr %) (take (index-of-nil arr) arr)))\n\n(defn rebalance-leaves\n  [n1 cnt1 n2 cnt2 transferred-leaves]\n  (let [slc1 (slot-count n1 5)\n        slc2 (slot-count n2 5)\n        a    (+ slc1 slc2)\n        sbc1 (subtree-branch-count n1 5)\n        sbc2 (subtree-branch-count n2 5)\n        p    (+ sbc1 sbc2)\n        e    (- a (inc (quot (dec p) 32)))]\n    (cond\n      (<= e max-extra-search-steps)\n      (array n1 n2)\n\n      (<= (+ sbc1 sbc2) 1024)\n      (let [reg?    (zero? (mod p 32))\n            new-arr (make-array (if reg? 32 33))\n            new-n1  (->VectorNode nil new-arr)]\n        (loop [i  0\n               bs (partition-all 32\n                                 (concat (leaf-seq (.-arr n1))\n                                         (leaf-seq (.-arr n2))))]\n          (when-first [block bs]\n            (let [a (make-array (count block))]\n              (loop [i 0 xs (seq block)]\n                (when xs\n                  (aset a i (first xs))\n                  (recur (inc i) (next xs))))\n              (aset new-arr i (->VectorNode nil a))\n              (recur (inc i) (next bs)))))\n        (if-not reg?\n          (aset new-arr 32 (regular-ranges 5 p)))\n        (set! (.-val transferred-leaves) sbc2)\n        (array new-n1 nil))\n\n      :else\n      (let [reg?     (zero? (mod p 32))\n            new-arr1 (make-array 32)\n            new-arr2 (make-array (if reg? 32 33))\n            new-n1   (->VectorNode nil new-arr1)\n            new-n2   (->VectorNode nil new-arr2)]\n        (loop [i  0\n               bs (partition-all 32\n                                 (concat (leaf-seq (.-arr n1))\n                                         (leaf-seq (.-arr n2))))]\n          (when-first [block bs]\n            (let [a (make-array (count block))]\n              (loop [i 0 xs (seq block)]\n                (when xs\n                  (aset a i (first xs))\n                  (recur (inc i) (next xs))))\n              (if (< i 32)\n                (aset new-arr1 i (->VectorNode nil a))\n                (aset new-arr2 (- i 32) (->VectorNode nil a)))\n              (recur (inc i) (next bs)))))\n        (if-not reg?\n          (aset new-arr2 32 (regular-ranges 5 (- p 1024))))\n        (set! (.-val transferred-leaves) (- 1024 sbc1))\n        (array new-n1 new-n2)))))\n\n(defn child-seq [node shift cnt]\n  (let [arr  (.-arr node)\n        rngs (if (regular? node)\n               (regular-ranges shift cnt)\n               (node-ranges node))\n        cs   (if rngs (aget rngs 32) (index-of-nil arr))\n        cseq (fn cseq [c r]\n               (let [arr  (.-arr c)\n                     rngs (if (regular? c)\n                            (regular-ranges (- shift 5) r)\n                            (node-ranges c))\n                     gcs  (if rngs (aget rngs 32) (index-of-nil arr))]\n                 (map list\n                      (take gcs arr)\n                      (take gcs (map - rngs (cons 0 rngs))))))]\n    (mapcat cseq (take cs arr) (take cs (map - rngs (cons 0 rngs))))))\n\n(defn rebalance\n  [shift n1 cnt1 n2 cnt2 transferred-leaves]\n  (if (nil? n2)\n    (array n1 nil)\n    (let [slc1 (slot-count n1 shift)\n          slc2 (slot-count n2 shift)\n          a    (+ slc1 slc2)\n          sbc1 (subtree-branch-count n1 shift)\n          sbc2 (subtree-branch-count n2 shift)\n          p    (+ sbc1 sbc2)\n          e    (- a (inc (quot (dec p) 32)))]\n      (cond\n        (<= e max-extra-search-steps)\n        (array n1 n2)\n\n        (<= (+ sbc1 sbc2) 1024)\n        (let [new-arr  (make-array 33)\n              new-rngs (make-array 33)\n              new-n1   (->VectorNode nil new-arr)]\n          (loop [i  0\n                 bs (partition-all 32\n                                   (concat (child-seq n1 shift cnt1)\n                                           (child-seq n2 shift cnt2)))]\n            (when-first [block bs]\n              (let [a (make-array 33)\n                    r (make-array 33)]\n                (aset a 32 r)\n                (aset r 32 (count block))\n                (loop [i 0 o 0 gcs (seq block)]\n                  (when-first [[gc gcr] gcs]\n                    (aset a i gc)\n                    (aset r i (+ o gcr))\n                    (recur (inc i) (+ o gcr) (next gcs))))\n                (aset new-arr i (->VectorNode nil a))\n                (aset new-rngs i\n                      (+ (aget r (dec (aget r 32)))\n                         (if (pos? i) (aget new-rngs (dec i)) 0)))\n                (aset new-rngs 32 (inc i))\n                (recur (inc i) (next bs)))))\n          (aset new-arr 32 new-rngs)\n          (set! (.-val transferred-leaves) cnt2)\n          (array new-n1 nil))\n\n        :else\n        (let [new-arr1  (make-array 33)\n              new-arr2  (make-array 33)\n              new-rngs1 (make-array 33)\n              new-rngs2 (make-array 33)\n              new-n1    (->VectorNode nil new-arr1)\n              new-n2    (->VectorNode nil new-arr2)]\n          (loop [i  0\n                 bs (partition-all 32\n                                   (concat (child-seq n1 shift cnt1)\n                                           (child-seq n2 shift cnt2)))]\n            (when-first [block bs]\n              (let [a (make-array 33)\n                    r (make-array 33)]\n                (aset a 32 r)\n                (aset r 32 (count block))\n                (loop [i 0 o 0 gcs (seq block)]\n                  (when-first [[gc gcr] gcs]\n                    (aset a i gc)\n                    (aset r i (+ o gcr))\n                    (recur (inc i) (+ o gcr) (next gcs))))\n                (if (and (< i 32) (> (+ (* i 32) (count block)) sbc1))\n                  (let [tbs (- (+ (* i 32) (count block)) sbc1)\n                        li  (dec (aget r 32))\n                        d   (if (>= tbs 32)\n                              (aget r li)\n                              (- (aget r li) (aget r (- li tbs))))]\n                    (set! (.-val transferred-leaves)\n                          (+ (.-val transferred-leaves) d))))\n                (let [new-arr  (if (< i 32) new-arr1 new-arr2)\n                      new-rngs (if (< i 32) new-rngs1 new-rngs2)\n                      i        (mod i 32)]\n                  (aset new-arr i (->VectorNode nil a))\n                  (aset new-rngs i\n                        (+ (aget r (dec (aget r 32)))\n                           (if (pos? i) (aget new-rngs (dec i)) 0)))\n                  (aset new-rngs 32 (inc i)))\n                (recur (inc i) (next bs)))))\n          (aset new-arr1 32 new-rngs1)\n          (aset new-arr2 32 new-rngs2)\n          (array new-n1 new-n2))))))\n\n(defn zippath\n  [shift n1 cnt1 n2 cnt2 transferred-leaves]\n  (if (== shift 5)\n    (rebalance-leaves n1 cnt1 n2 cnt2 transferred-leaves)\n    (let [c1 (last-child n1)\n          c2 (first-child n2)\n          ccnt1 (if (regular? n1)\n                  (let [m (mod cnt1 (bit-shift-left 1 shift))]\n                    (if (zero? m) (bit-shift-left 1 shift) m))\n                  (let [rngs (node-ranges n1)\n                        i    (dec (aget rngs 32))]\n                    (if (zero? i)\n                      (aget rngs 0)\n                      (- (aget rngs i) (aget rngs (dec i))))))\n          ccnt2 (if (regular? n2)\n                  (let [m (mod cnt2 (bit-shift-left 1 shift))]\n                    (if (zero? m) (bit-shift-left 1 shift) m))\n                  (aget (node-ranges n2) 0))\n          next-transferred-leaves (Box. 0)\n          [new-c1 new-c2] (zippath (- shift 5) c1 ccnt1 c2 ccnt2\n                                   next-transferred-leaves)\n          d (.-val next-transferred-leaves)]\n      (set! (.-val transferred-leaves) (+ (.-val transferred-leaves) d))\n      (rebalance shift\n                 (if (identical? c1 new-c1)\n                   n1\n                   (replace-rightmost-child shift n1 new-c1 d))\n                 (+ cnt1 d)\n                 (if new-c2\n                   (if (identical? c2 new-c2)\n                     n2\n                     (replace-leftmost-child shift n2 cnt2 new-c2 d))\n                   (remove-leftmost-child shift n2))\n                 (- cnt2 d)\n                 transferred-leaves))))\n\n(defn squash-nodes [shift n1 cnt1 n2 cnt2]\n  (let [arr1  (.-arr n1)\n        arr2  (.-arr n2)\n        li1   (index-of-nil arr1)\n        li2   (index-of-nil arr2)\n        slots (concat (take li1 arr1) (take li2 arr2))]\n    (if (> (count slots) 32)\n      (array n1 n2)\n      (let [new-rngs (make-array 33)\n            new-arr  (make-array 33)\n            rngs1    (take li1 (if (regular? n1)\n                                 (regular-ranges shift cnt1)\n                                 (node-ranges n1)))\n            rngs2    (take li2 (if (regular? n2)\n                                 (regular-ranges shift cnt2)\n                                 (node-ranges n2)))\n            rngs2    (let [r (last rngs1)]\n                       (map #(+ % r) rngs2))\n            rngs     (concat rngs1 rngs2)]\n        (aset new-arr 32 new-rngs)\n        (loop [i 0 cs (seq slots)]\n          (when cs\n            (aset new-arr i (first cs))\n            (recur (inc i) (next cs))))\n        (loop [i 0 rngs (seq rngs)]\n          (if rngs\n            (do (aset new-rngs i (first rngs))\n                (recur (inc i) (next rngs)))\n            (aset new-rngs 32 i)))\n        (array (->VectorNode nil new-arr) nil)))))\n\n(def peephole-optimization-config (atom {:debug-fn nil}))\n(def peephole-optimization-count (atom 0))\n\n;; TBD: Transducer versions of child-nodes and bounded-grandchildren\n;; are included here for when we are willing to rely upon Clojure\n;; 1.7.0 as the minimum version supported by the core.rrb-vector\n;; library.  They are faster.\n\n#_(defn child-nodes [node]\n  (into [] (comp (take-while (complement nil?))\n                 (take 32))\n        (.-arr node)))\n\n(defn child-nodes [node]\n  (->> (.-arr node)\n       (take-while (complement nil?))\n       (take 32)))\n\n;; (take 33) is just a technique to avoid generating more\n;; grandchildren than necessary.  If there are at least 33, we do not\n;; care how many there are.\n#_(defn bounded-grandchildren [children]\n  (into [] (comp (map child-nodes)\n                 cat\n                 (take 33))\n        children))\n\n(defn bounded-grandchildren [children]\n  (->> children\n       (mapcat child-nodes)\n       (take 33)))\n\n;; TBD: Do functions like last-non-nil-idx and\n;; count-vector-elements-beneath already exist elsewhere in this\n;; library?  It seems like they might.\n\n;; A regular tree node is guaranteed to have only 32-way branching at\n;; all nodes, except perhaps along the right spine, where it can be\n;; partial.  From a regular tree node down, all leaf arrays\n;; (containing vector elements directly) are restricted to contain a\n;; full 32 vector elements.  This code relies on these invariants to\n;; quickly calculate the number of vector elements beneath a regular\n;; node in O(log N) time.\n\n(defn last-non-nil-idx [arr]\n  (loop [i (dec (alength arr))]\n    (if (neg? i)\n      i\n      (if (nil? (aget arr i))\n        (recur (dec i))\n        i))))\n\n(defn count-vector-elements-beneath [node shift]\n  (if (regular? node)\n    (loop [node node\n           shift shift\n           acc 0]\n      (if (zero? shift)\n        (if (nil? node)\n          acc\n          ;; The +32 is for the regular leaf node reached at shift 0\n          (+ acc 32))\n        (let [arr (.-arr node)\n              max-child-idx (last-non-nil-idx arr)\n              num-elems-in-full-child (bit-shift-left 1 shift)]\n          (if (< max-child-idx 0)\n            acc\n            (recur (aget arr max-child-idx)\n                   (- shift 5)\n                   (+ acc (* max-child-idx num-elems-in-full-child)))))))\n    ;; irregular case\n    (let [rngs (node-ranges node)]\n      (aget rngs (dec (aget rngs 32))))))\n\n(defn peephole-optimize-root [v]\n  (let [config @peephole-optimization-config]\n    (if (<= (.-shift v) 10)\n      ;; Tree depth cannot be reduced if shift <= 5.\n      ;; TBD: If shift=10, the grandchildren nodes need to be handled\n      ;; by an am array manager for primitive vectors, which I haven't\n      ;; written code for yet below, but so far this peephole\n      ;; optimizer seems to be working sufficiently well without\n      ;; handling that case.\n      v\n      (let [root (.-root v)\n            children (child-nodes root)\n            grandchildren (bounded-grandchildren children)\n            num-granchildren-bounded (count grandchildren)\n            many-grandchildren? (> num-granchildren-bounded 32)]\n        (if many-grandchildren?\n          ;; If it is possible to reduce tree depth, it requires going\n          ;; deeper than just to the grandchildren, which is beyond\n          ;; what this peephole optimizer is intended to do.\n          v\n          ;; Create a new root node that points directly at the\n          ;; grandchildren, since there are few enough of them.\n          (let [new-arr  (make-array 33)\n                new-rngs (make-array 33)\n                new-root (->VectorNode (.-edit root) new-arr)\n                shift    (.-shift v)\n                grandchild-shift (- shift (* 2 5))]\n            (swap! peephole-optimization-count inc)\n            (loop [idx 0\n                   remaining-gc grandchildren\n                   elem-sum 0]\n              (if-let [remaining-gc (seq remaining-gc)]\n                (let [grandchild (first remaining-gc)\n                      num-elems-this-grandchild (count-vector-elements-beneath\n                                                 grandchild grandchild-shift)\n                      next-elem-sum (+ elem-sum num-elems-this-grandchild)]\n                  (aset new-arr idx grandchild)\n                  (aset new-rngs idx next-elem-sum)\n                  (recur (inc idx) (rest remaining-gc) next-elem-sum))))\n            (aset new-rngs 32 num-granchildren-bounded)\n            (aset new-arr 32 new-rngs)\n            (let [new-v (Vector. (.-cnt v) (- shift 5)\n                                 new-root (.-tail v) (.-meta v) nil)]\n              (when (:debug-fn config)\n                ((:debug-fn config) v new-v))\n              new-v)))))))\n\n;; TBD: I do not know if this implementation actually supports this\n;; many elements in one vector.  What is the limit?  I picked this\n;; number simply to match what I believe is the upper limit for the\n;; Clojure implementation.\n(def max-vector-elements 2147483647)\n\n;; Larger shift values than 64 definitely break assumptions all over\n;; the RRB vector implementation, e.g. (bit-shift-right 255 65)\n;; returns the same result as (bit-shift-right 255 1), I believe\n;; because the shift amount argument is effectively modulo'd by 64.\n;; Larger shift values than 30 are unlikely to make sense, given that\n;; the maximum number of vector elements supported is somewhere near\n;; 2^31-1.\n\n(defn shift-too-large? [v]\n  (> (.-shift v) 30))\n\n;; The maximum number of vector elements in a tree, not counting any\n;; elements in the tail, with a given shift value is:\n;;\n;; (bit-shift-left 1 (+ shift 5))\n;;\n;; It is perfectly normal to have vectors with a root tree node with\n;; only 1 non-nil child, so at a fraction 1/32 of maximum capacity.  I\n;; do not know the exact minimum fraction that RRB vectors as\n;; implemented here should allow, but I suspect it is well over\n;; 1/1024.\n\n(defn poor-branching? [v]\n  (let [tail-off (-tail-offset v)]\n    (if (zero? tail-off)\n      false\n      (let [shift-amount (- (.-shift v) 5)\n            max-capacity-divided-by-1024 (bit-shift-left 1 shift-amount)]\n        (< tail-off max-capacity-divided-by-1024)))))\n\n;; Note 3:\n\n;; Consider measuring several ways in ClojureScript to create a\n;; regular persistent vector from another one, to see which is\n;; fastest, and use it here.\n\n;; TBD: Is there any promise about what metadata catvec returns?\n;; Always the same as on the first argument?\n\n(def fallback-config (atom {:debug-fn nil}))\n(def fallback-to-slow-splice-count1 (atom 0))\n(def fallback-to-slow-splice-count2 (atom 0))\n\n(defn fallback-to-slow-splice-if-needed [v1 v2 splice-result]\n  (let [config @fallback-config]\n    (if (or (shift-too-large? splice-result)\n            (poor-branching? splice-result))\n      (do\n        (dbg (str \"splice-rrbts result had shift \" (.-shift splice-result)\n                  \" and \" (-tail-offset splice-result) \" elements not counting\"\n                  \" the tail. Falling back to slower method of concatenation.\"))\n        (if (poor-branching? v1)\n          ;; The v1 we started with was not good, either.\n          (do\n            (swap! fallback-to-slow-splice-count1 inc)\n            (dbg (str \"splice-rrbts first arg had shift \" (.-shift v1)\n                      \" and \" (-tail-offset v1) \" elements not counting\"\n                      \" the tail.  Building the result from scratch.\"))\n            ;: See Note 3\n            (let [new-splice-result (-> (empty v1) (into v1) (into v2))]\n              (when (:debug-fn config)\n                ((:debug-fn config) splice-result new-splice-result))\n              new-splice-result))\n          ;; Assume that v1 is balanced enough that we can use into to\n          ;; add all elements of v2 to it, without problems.  TBD:\n          ;; That assumption might be incorrect.  Consider checking\n          ;; the result of this, too, and fall back again to the true\n          ;; case above?\n          (let [new-splice-result (into v1 v2)]\n            (swap! fallback-to-slow-splice-count2 inc)\n            (when (:debug-fn config)\n              ((:debug-fn config) splice-result new-splice-result))\n            new-splice-result)))\n      ;; else the fast result is good\n      splice-result)))\n\n(defn splice-rrbts-main [v1 v2]\n  (cond\n    (zero? (count v1)) v2\n    (> (+ (count v1) (count v2)) max-vector-elements)\n    (let [c1 (count v1), c2 (count v2)]\n      (throw (js/Error.\n              (str \"Attempted to concatenate two vectors whose total\"\n                   \" number of elements is \" (+ c1 c2) \", which is\"\n                   \" larger than the maximum number of elements \"\n                   max-vector-elements \" supported in a vector \"))))\n    (< (count v2) rrbt-concat-threshold) (into v1 v2)\n    :else\n    (let [s1 (.-shift v1)\n          s2 (.-shift v2)\n          r1 (.-root v1)\n          o? (overflow? r1 s1 (+ (count v1) (- 32 (alength (.-tail v1)))))\n          r1 (if o?\n               (let [tail      (.-tail v1)\n                     tail-node (->VectorNode nil tail)\n                     reg?      (and (regular? r1) (== (alength tail) 32))\n                     arr       (make-array (if reg? 32 33))]\n                 (aset arr 0 r1)\n                 (aset arr 1 (new-path* s1 tail-node))\n                 (if-not reg?\n                   (let [rngs (make-array 33)]\n                     (aset rngs 32 2)\n                     (aset rngs 0 (- (count v1) (alength tail)))\n                     (aset rngs 1 (count v1))\n                     (aset arr 32 rngs)))\n                 (->VectorNode nil arr))\n               (fold-tail r1 s1\n                          (-tail-offset v1)\n                          (.-tail v1)))\n          s1 (if o? (+ s1 5) s1)\n          r2 (.-root v2)\n          s  (max s1 s2)\n          r1 (shift-from-to r1 s1 s)\n          r2 (shift-from-to r2 s2 s)\n          transferred-leaves (Box. 0)\n          [n1 n2] (zippath s\n                           r1 (count v1)\n                           r2 (- (count v2) (alength (.-tail v2)))\n                           transferred-leaves)\n          d (.-val transferred-leaves)\n          ncnt1   (+ (count v1) d)\n          ncnt2   (- (count v2) (alength (.-tail v2)) d)\n          [n1 n2] (if (identical? n2 r2)\n                    (squash-nodes s n1 ncnt1 n2 ncnt2)\n                    (array n1 n2))\n          ncnt1   (if n2\n                    ncnt1\n                    (+ ncnt1 ncnt2))\n          ncnt2   (if n2\n                    ncnt2\n                    0)]\n      (if n2\n        (let [arr      (make-array 33)\n              new-root (->VectorNode nil arr)]\n          (aset arr 0 n1)\n          (aset arr 1 n2)\n          (aset arr 32 (doto (make-array 33)\n                         (aset 0 ncnt1)\n                         (aset 1 (+ ncnt1 ncnt2))\n                         (aset 32 2)))\n          (Vector. (+ (count v1) (count v2)) (+ s 5) new-root (.-tail v2)\n                   nil nil))\n        (loop [r n1\n               s s]\n          (if (and (> s 5)\n                   (nil? (aget (.-arr r) 1)))\n            (recur (aget (.-arr r) 0) (- s 5))\n            (Vector. (+ (count v1) (count v2)) s r (.-tail v2)\n                     nil nil)))))))\n\n(defn splice-rrbts [v1 v2]\n  (let [r1 (splice-rrbts-main v1 v2)\n        r2 (peephole-optimize-root r1)]\n    (fallback-to-slow-splice-if-needed v1 v2 r2)))\n\n(deftype Transient [^:mutable cnt\n                    ^:mutable shift\n                    ^:mutable root\n                    ^:mutable tail\n                    ^:mutable tidx]\n  ITransientCollection\n  (-conj! [this o]\n    (if ^boolean (.-edit root)\n      (if (< tidx 32)\n        (do (aset tail tidx o)\n            (set! cnt  (inc cnt))\n            (set! tidx (inc tidx))\n            this)\n        (let [tail-node (->VectorNode (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (set! tidx 1)\n          (if (overflow? root shift cnt)\n            (if (regular? root)\n              (let [new-arr (make-array 32)]\n                (doto new-arr\n                  (aset 0 root)\n                  (aset 1 (new-path tail (.-edit root) shift tail-node)))\n                (set! root  (->VectorNode (.-edit root) new-arr))\n                (set! shift (+ shift 5))\n                (set! cnt   (inc cnt))\n                this)\n              (let [new-arr  (make-array 33)\n                    new-rngs (make-array 33)\n                    new-root (->VectorNode (.-edit root) new-arr)\n                    root-total-range (aget (node-ranges root) 31)]\n                (doto new-arr\n                  (aset 0  root)\n                  (aset 1  (new-path tail (.-edit root) shift tail-node))\n                  (aset 32 new-rngs))\n                (doto new-rngs\n                  (aset 0  root-total-range)\n                  (aset 1  (+ root-total-range 32))\n                  (aset 32 2))\n                (set! root  new-root)\n                (set! shift (+ shift 5))\n                (set! cnt   (inc cnt))\n                this))\n            (let [new-root (push-tail! shift cnt (.-edit root) root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              this))))\n      (throw (js/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [this]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [trimmed-tail (make-array tidx)]\n            (array-copy tail 0 trimmed-tail 0 tidx)\n            (Vector. cnt shift root trimmed-tail nil nil)))\n      (throw (js/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [this key val]\n    (-assoc-n! this key val))\n\n  ITransientVector\n  (-assoc-n! [this i val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 i) (< i cnt))\n        (let [tail-off (- cnt tidx)]\n          (if (<= tail-off i)\n            (aset tail (- i tail-off) val)\n            (set! root (do-assoc! shift (.-edit root) root i val)))\n          this)\n\n        (== i cnt) (-conj! this val)\n\n        :else (vector-index-out-of-bounds i cnt))\n      (throw (js/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [this]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt)\n        (throw (js/Error. \"Can't pop empty vector\"))\n\n        (== 1 cnt)\n        (do (set! cnt  0)\n            (set! tidx 0)\n            (aset tail 0 nil)\n            this)\n\n        (> tidx 1)\n        (do (set! cnt  (dec cnt))\n            (set! tidx (dec tidx))\n            (aset tail tidx nil)\n            this)\n\n        :else\n        (let [new-tail-base (-array-for this (- cnt 2))\n              new-tail      (editable-tail new-tail-base)\n              new-tidx      (alength new-tail-base)\n              new-root      (pop-tail! shift cnt (.-edit root) root)]\n          (cond\n            (nil? new-root)\n            (do (set! cnt  (dec cnt))\n                (set! root (ensure-editable (.-edit root) empty-node))\n                (set! tail new-tail)\n                (set! tidx new-tidx)\n                this)\n\n            (and (> shift 5)\n                 (nil? (aget (.-arr new-root) 1)))\n            (do (set! cnt   (dec cnt))\n                (set! shift (- shift 5))\n                (set! root  (ensure-editable (.-edit root)\n                                             (aget (.-arr new-root) 0)))\n                (set! tail  new-tail)\n                (set! tidx  new-tidx)\n                this)\n\n            :else\n            (do (set! cnt  (dec cnt))\n                (set! root new-root)\n                (set! tail new-tail)\n                (set! tidx new-tidx)\n                this))))\n      (throw (js/Error. \"count after persistent!\"))))\n\n  ICounted\n  (-count [this]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js/Error. \"count after persistent!\"))))\n\n  IVecImpl\n  (-tail-offset [this]\n    (- cnt tidx))\n\n  (-array-for [this i]\n    (if (and (<= 0 i) (< i cnt))\n      (if (>= i (-tail-offset this))\n        tail\n        (loop [i i node root shift shift]\n          (if (zero? shift)\n            (.-arr node)\n            (if (regular? node)\n              (loop [node  (aget (.-arr node)\n                                 (bit-and (bit-shift-right i shift) 0x1f))\n                     shift (- shift 5)]\n                (if (zero? shift)\n                  (.-arr node)\n                  (recur (aget (.-arr node)\n                               (bit-and (bit-shift-right i shift) 0x1f))\n                         (- shift 5))))\n              (let [rngs (node-ranges node)\n                    j    (loop [j (bit-and (bit-shift-right i shift) 0x1f)]\n                           (if (< i (aget rngs j))\n                             j\n                             (recur (inc j))))\n                    i    (if (pos? j)\n                           (- i (aget rngs (dec j)))\n                           i)]\n                (recur i\n                       (aget (.-arr node) j)\n                       (- shift 5)))))))\n      (vector-index-out-of-bounds i cnt))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.core.rrb-vector.rrbt/rrbt-concat-threshold","clojure.core.rrb-vector.rrbt/max-extra-search-steps","clojure$core$rrb-vector$rrbt$IVecImpl$_tail_offset$dyn","x__4428__auto__","m__4429__auto__","clojure.core.rrb-vector.rrbt/-tail-offset","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","clojure$core$rrb-vector$rrbt$IVecImpl$_array_for$dyn","clojure.core.rrb-vector.rrbt/-array-for","clojure.core.rrb-vector.rrbt/IVecImpl","v","i","clojure$core$rrb-vector$rrbt$AsRRBT$_as_rrbt$dyn","clojure.core.rrb-vector.rrbt/-as-rrbt","clojure.core.rrb-vector.rrbt/AsRRBT","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","clojure.core.rrb-vector.rrbt/RRBChunkedSeq","clojure.core.rrb-vector.rrbt/->RRBChunkedSeq","vec","node","off","meta","__hash","coll","cljs.core/pr-str*","this","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","m","clojure.core.rrb-vector.rrbt/rrb-chunked-seq","other","cljs.core/equiv-sequential","s","G__31795","G__31796","G__31797","G__31798","G__31791","G__31792","G__31793","G__31794","o","cljs.core/cons","cljs.core/with-meta","cljs.core/List","cljs.core.array_chunk","l","cljs.core/-count","G__31799","G__31800","G__31801","G__31802","G__31803","G__31804","h__4238__auto__","cljs.core/hash-ordered-coll","f","cljs.core.ci_reduce","cljs.core.subvec","cljs.core/count","start","var_args","G__31806","js/Error","clojure.core.rrb-vector.rrbt/slice-right","shift","end","arr","new-arr","js/Array","cljs.core/array-copy","cljs.core/->VectorNode","reg?","clojure.core.rrb-vector.nodes/regular?","rngs","clojure.core.rrb-vector.nodes/node-ranges","j","child-end","ce","cljs.core/mod","new-child","G__31807","G__31808","G__31809","regular-child?","new-child-rng","clojure.core.rrb-vector.nodes/last-range","new-rngs","step","n__4613__auto__","clojure.core.rrb-vector.rrbt/slice-left","new-len","len","child-start","x__4217__auto__","y__4218__auto__","capped-end","G__31810","G__31811","G__31812","G__31813","rng0","r","cljs.core/PROTOCOL_SENTINEL","unused__10297__auto__","self__","G__31829","args31814","cljs.core/aclone","clojure.core.rrb-vector.rrbt/Vector","clojure.core.rrb-vector.rrbt/->Vector","cnt","root","tail","that","cljs.core.array_seq","clojure.core.rrb_vector.rrbt.rrb_chunked_seq","_","tail-off","idx","cljs.core/vector-index-out-of-bounds","not-found","val","tail-len","new-tail","tail-node","clojure.core.rrb-vector.nodes/overflow?","new-root","G__31826","clojure.core.rrb-vector.trees/new-path","root-total-range","G__31827","G__31828","clojure.core.rrb-vector.trees/push-tail","cljs.core/PersistentVector","cljs.core/-with-meta","root-cnt","clojure.core.rrb-vector.trees/pop-tail","clojure.core.rrb-vector.nodes/empty-node","clojure.core.rrb-vector.trees/do-assoc","cljs.core/RSeq","k","init","lim","G__31818","G__31819","G__31820","cljs.core/deref","cljs.core/reduced?","cljs.core.compare_indexed","G__31821","G__31822","G__31823","G__31824","G__31825","clojure.core.rrb-vector.rrbt/->Transient","clojure.core.rrb-vector.transients/editable-root","clojure.core.rrb-vector.transients/editable-tail","new-cnt","cljs.core/empty","tail-cut?","G__31830","G__31831","clojure.core.rrb-vector.rrbt/splice-rrbts","cljs.core/meta","cljs.core/Subvec","clojure.core.rrb-vector.protocols/-slicev","clojure.core.rrb-vector.rrbt/shift-from-to","from","to","G__31832","G__31833","G__31834","clojure.core.rrb-vector.rrbt/slot-count","clojure.core.rrb-vector.nodes/index-of-nil","clojure.core.rrb-vector.rrbt/subtree-branch-count","cs","sbc","temp__5733__auto__","child","clojure.core.rrb-vector.rrbt/leaf-seq","p1__31835#","cljs.core.mapcat","cljs.core.take","clojure.core.rrb-vector.rrbt/rebalance-leaves","n1","cnt1","n2","cnt2","transferred-leaves","slc1","slc2","a","sbc1","sbc2","p","e","cljs.core/quot","new-n1","bs","cljs.core.partition_all","cljs.core.concat","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","block","xs","cljs.core/next","clojure.core.rrb-vector.nodes/regular-ranges","new-arr1","new-arr2","new-n2","clojure.core.rrb-vector.rrbt/child-seq","cseq","c","gcs","cljs.core.map","cljs.core/list","cljs.core/-","clojure.core.rrb-vector.rrbt/rebalance","vec__31836","cljs.core.nth","gc","gcr","new-rngs1","new-rngs2","vec__31839","tbs","li","d","clojure.core.rrb-vector.rrbt/zippath","vec__31842","c1","clojure.core.rrb-vector.nodes/last-child","c2","clojure.core.rrb-vector.nodes/first-child","ccnt1","ccnt2","next-transferred-leaves","cljs.core/Box","new-c1","new-c2","G__31845","G__31846","G__31847","G__31848","G__31849","G__31850","clojure.core.rrb-vector.nodes/replace-rightmost-child","clojure.core.rrb-vector.nodes/replace-leftmost-child","clojure.core.rrb-vector.nodes/remove-leftmost-child","clojure.core.rrb-vector.rrbt/squash-nodes","arr1","arr2","li1","li2","slots","rngs1","rngs2","cljs.core/last","p1__31851#","clojure.core.rrb-vector.rrbt/peephole-optimization-config","cljs.core.atom","clojure.core.rrb-vector.rrbt/peephole-optimization-count","clojure.core.rrb-vector.rrbt/child-nodes","cljs.core.take_while","cljs.core/complement","cljs.core/nil?","clojure.core.rrb-vector.rrbt/bounded-grandchildren","children","clojure.core.rrb-vector.rrbt/last-non-nil-idx","clojure.core.rrb-vector.rrbt/count-vector-elements-beneath","acc","max-child-idx","num-elems-in-full-child","clojure.core.rrb-vector.rrbt/peephole-optimize-root","config","grandchildren","num-granchildren-bounded","many-grandchildren?","grandchild-shift","cljs.core.swap_BANG_","cljs.core/inc","remaining-gc","elem-sum","grandchild","num-elems-this-grandchild","next-elem-sum","cljs.core/rest","new-v","fexpr__31852","clojure.core.rrb-vector.rrbt/max-vector-elements","clojure.core.rrb-vector.rrbt/shift-too-large?","clojure.core.rrb-vector.rrbt/poor-branching?","shift-amount","max-capacity-divided-by-1024","clojure.core.rrb-vector.rrbt/fallback-config","clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-count1","clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-count2","clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-if-needed","v1","v2","splice-result","new-splice-result","cljs.core.into","fexpr__31853","fexpr__31854","clojure.core.rrb-vector.rrbt/splice-rrbts-main","vec__31855","vec__31858","s1","s2","r1","o?","clojure.core.rrb-vector.nodes/new-path*","clojure.core.rrb-vector.nodes/fold-tail","r2","x__4214__auto__","y__4215__auto__","ncnt1","ncnt2","G__31861","clojure.core.rrb-vector.rrbt/Transient","tidx","G__31862","G__31863","G__31864","clojure.core.rrb-vector.transients/push-tail!","trimmed-tail","key","clojure.core.rrb-vector.transients/do-assoc!","new-tail-base","new-tidx","clojure.core.rrb-vector.transients/pop-tail!","clojure.core.rrb-vector.transients/ensure-editable"]],"~:used-vars",["^J",["~$clojure.core.rrb-vector.rrbt/slice-left","~$cljs.core/mapcat","~$clojure.core.rrb-vector.nodes/empty-node","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$clojure.core.rrb-vector.rrbt/leaf-seq","~$clojure.core.rrb-vector.nodes/overflow?","~$clojure.core.rrb-vector.rrbt/last-non-nil-idx","~$clojure.core.rrb-vector.rrbt/fallback-config","~$clojure.core.rrb-vector.rrbt/->Vector","~$cljs.core/ci-reduce","~$clojure.core.rrb-vector.rrbt/count-vector-elements-beneath","~$clojure.core.rrb-vector.rrbt/child-seq","~$clojure.core.rrb-vector.rrbt/squash-nodes","~$clojure.core.rrb-vector.rrbt/slice-right","~$cljs.core/pr-sequential-writer","~$clojure.core.rrb-vector.rrbt/-tail-offset","~$clojure.core.rrb-vector.rrbt/Transient","~$clojure.core.rrb-vector.rrbt/poor-branching?","~$cljs.core/take-while","~$clojure.core.rrb-vector.rrbt/rrbt-concat-threshold","~$cljs.core/-write","~$cljs.core/pr-writer","~$clojure.core.rrb-vector.transients/do-assoc!","~$clojure.core.rrb-vector.rrbt/rebalance","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/-assoc-n!","~$clojure.core.rrb-vector.rrbt/->RRBChunkedSeq","~$cljs.core/take","~$cljs.core/aclone","~$clojure.core.rrb-vector.nodes/replace-rightmost-child","~$clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-if-needed","~$cljs.core/atom","~$clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-count2","~$cljs.core/Subvec","~$cljs.core/-with-meta","~$cljs.core/pr-str*","~$clojure.core.rrb-vector.rrbt/AsRRBT","~$clojure.core.rrb-vector.nodes/last-range","~$clojure.core.rrb-vector.nodes/replace-leftmost-child","~$cljs.core/compare-indexed","~$clojure.core.rrb-vector.protocols/-slicev","~$clojure.core.rrb-vector.rrbt/splice-rrbts","~$clojure.core.rrb-vector.trees/push-tail","~$cljs.core/-","~$cljs.core/into","~$cljs.core/array-seq","~$cljs.core/array-chunk","~$cljs.core/-conj","~$cljs.core/with-meta","~$cljs.core/map","~$clojure.core.rrb-vector.transients/ensure-editable","~$cljs.core/-assoc-n","~$cljs.core/PersistentVector","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/swap!","~$clojure.core.rrb-vector.rrbt/max-vector-elements","~$cljs.core/-chunked-next","~$cljs.core/equiv-sequential","~$clojure.core.rrb-vector.rrbt/shift-too-large?","~$clojure.core.rrb-vector.rrbt/peephole-optimization-count","~$clojure.core.rrb-vector.rrbt/splice-rrbts-main","~$clojure.core.rrb-vector.nodes/remove-leftmost-child","~$cljs.core/-nth","~$clojure.core.rrb-vector.rrbt/fallback-to-slow-splice-count1","~$clojure.core.rrb-vector.rrbt/->Transient","~$cljs.core/RSeq","~$clojure.core.rrb-vector.trees/new-path","~$clojure.core.rrb-vector.trees/do-assoc","~$clojure.core.rrb-vector.rrbt/shift-from-to","~$cljs.core/subvec","~$clojure.core.rrb-vector.rrbt/peephole-optimization-config","~$clojure.core.rrb-vector.nodes/regular?","~$cljs.core/reduced?","~$cljs.core/nil?","~$cljs.core/meta","~$clojure.core.rrb-vector.rrbt/zippath","~$clojure.core.rrb-vector.rrbt/rrb-chunked-seq","~$clojure.core.rrb-vector.rrbt/slot-count","~$cljs.core/next","~$cljs.core/->VectorNode","~$clojure.core.rrb-vector.rrbt/child-nodes","~$clojure.core.rrb-vector.rrbt/subtree-branch-count","~$clojure.core.rrb-vector.rrbt/-array-for","~$cljs.core/not","~$cljs.core/complement","~$clojure.core.rrb-vector.rrbt/-as-rrbt","~$cljs.core/cons","~$clojure.core.rrb-vector.rrbt/Vector","~$clojure.core.rrb-vector.rrbt/peephole-optimize-root","~$clojure.core.rrb-vector.rrbt/rebalance-leaves","~$cljs.core/-conj!","~$clojure.core.rrb-vector.rrbt/bounded-grandchildren","~$cljs.core/first","~$clojure.core.rrb-vector.nodes/regular-ranges","~$clojure.core.rrb-vector.rrbt/RRBChunkedSeq","~$clojure.core.rrb-vector.nodes/index-of-nil","~$cljs.core/array-copy","~$cljs.core/vector-index-out-of-bounds","~$js/Error","~$clojure.core.rrb-vector.rrbt/IVecImpl","~$cljs.core/inc","~$cljs.core/-chunked-rest","~$clojure.core.rrb-vector.rrbt/max-extra-search-steps"]]],"~:cache-keys",["~#cmap",[["^1V","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1V","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","~$goog.array","~$goog.asserts"]]],["^1V","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1V","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4S"]]],["^1V","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P"]]],["^1V","clojure/core/rrb_vector/rrbt.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^Z","^V","^W","^X","^Y"]]],["^1V","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","clojure/core/rrb_vector/trees.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^Z","^W"]]],["^1V","clojure/core/rrb_vector/nodes.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^Z"]]],["^1V","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","clojure/core/rrb_vector/transients.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^Z","^W","^X"]]],["^1V","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P"]]],"~:SHADOW-TIMESTAMP",[1615899884000,1615899884000,1614681766000],["^1V","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","~$goog.reflect"]]],["^1V","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","~$goog.html.trustedtypes","^4V","^4W","^4X","^4Y"]]],["^1V","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","~$goog.html.SafeUrl","^4X","^4Y","^4S"]]],["^1V","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^51","^4U","~$goog.html.uncheckedconversions","^4X","^4S"]]],["^1V","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1V","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","~$goog.dom.TagName","~$goog.dom.tags","^55","^56","~$goog.html.SafeStyleSheet","^51","^4U","^50","^4V","^4W","~$goog.labs.userAgent.browser","^4R","^4X","^4Y","^4S"]]],["^1V","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4R"]]],["^1V","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1V","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",[]]],["^1V","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4R"]]],["^1V","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","~$goog.dom.safe","^57","^4X","^4S"]]],["^1V","clojure/core/rrb_vector/protocols.cljs"],["aafb7677ec1e9f344fc834bbbdb91e8ba02af474","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^Z"]]],["^1V","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4S"]]],["^1V","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","^53","~$goog.math"]]],["^1V","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","^54","^55","^56","^5<","^51","^4U","^4X","^4S"]]],["^1V","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^["]]],["^1V","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","~$goog.math.Long","~$goog.math.Integer","^5@","^4R","^4O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1V","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","^50","^4X","^4Y"]]],["^1V","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","^56","^4R","^4X","^4Y","^4S"]]],["^1V","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4["]]],["^1V","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4O","^4P","^5@"]]],["^1V","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4J",["^ ","^4K",null,"^4L",["^J",[]],"^4M",["^[","^4P","^4Y"]]]]],"~:clj-info",["^ ","jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/core.rrb-vector/0.1.1/core.rrb-vector-0.1.1.jar!/clojure/core/rrb_vector/macros.clj",1614681769000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1614681765000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1614681766000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1606738673000,"jar:file:/home/dennis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1606738673000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1,"^8",5,"^9",1,"^:",33],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"~:shadow/protocol-prefixes",["^J",["clojure$core$rrb-vector$rrbt$IVecImpl$","clojure$core$rrb-vector$rrbt$AsRRBT$"]],"^F",["^ ","^G","^H"],"^I",["^J",["^K","^L","^M","^N","^O"]],"^P","^Q","^T",null,"^U",["^ ","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^["],"^10",["^J",["^11","^12"]],"~:shadow/js-access-global",["^J",["Error","Array"]],"^13",["^ ","^14","^Y","^15","^Y","^16","^Y","^17","^W","^18","^Y","^K","^X","^19","^W","^1:","^W","^1;","^W","^1<","^W","^1=","^W","^L","^X","^1>","^Y","^M","^X","^1?","^W","^1@","^V","^1A","^W","^1B","^V","^N","^X","^1C","^W","^1D","^W","^1E","^W","^1F","^W","^1G","^V","^1H","^W","^1I","^V","^1J","^Y","^1K","^W"],"~:defs",["^ ","~$shift-from-to",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",619,"^8",7,"^9",619,"^:",20,"~:arglists",["^1M",["~$quote",["^1M",[["~$node","~$from","~$to"]]]]]],"^P","^3Q","^6","clojure/core/rrb_vector/rrbt.cljs","^:",20,"~:method-params",["^1M",[["^6B","^6C","^6D"]]],"~:protocol-impl",null,"~:arglists-meta",["^1M",[null,null]],"^8",1,"~:variadic?",false,"^7",619,"^9",619,"~:max-fixed-arity",3,"~:fn-var",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6C","^6D"]]]]]],"~$peephole-optimization-config",["^ ","^P","^3S","^6","clojure/core/rrb_vector/rrbt.cljs","^7",898,"^8",1,"^9",898,"^:",34,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",898,"^8",6,"^9",898,"^:",34],"~:tag","~$cljs.core/Atom"],"~$peephole-optimization-count",["^ ","^P","^3H","^6","clojure/core/rrb_vector/rrbt.cljs","^7",899,"^8",1,"^9",899,"^:",33,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",899,"^8",6,"^9",899,"^:",33],"^6L","^6M"],"~$splice-rrbts-main",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1101,"^8",7,"^9",1101,"^:",24,"^6@",["^1M",["^6A",["^1M",[["~$v1","~$v2"]]]]]],"^P","^3I","^6","clojure/core/rrb_vector/rrbt.cljs","^:",24,"^6E",["^1M",[["^6P","^6Q"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",1101,"~:ret-tag",["^J",[null,"~$clj","~$any","^48"]],"^9",1101,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6P","^6Q"]]]]]],"~$slot-count",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",640,"^8",7,"^9",640,"^:",17,"^6@",["^1M",["^6A",["^1M",[["^6B","~$shift"]]]]]],"^P","^3Z","^6","clojure/core/rrb_vector/rrbt.cljs","^:",17,"^6E",["^1M",[["^6B","^6V"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",640,"^6R",["^J",["^6T","~$number"]],"^9",640,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V"]]]]]],"~$zippath",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",831,"^8",7,"^9",831,"^:",14,"^6@",["^1M",["^6A",["^1M",[["^6V","~$n1","~$cnt1","~$n2","~$cnt2","~$transferred-leaves"]]]]]],"^P","^3X","^6","clojure/core/rrb_vector/rrbt.cljs","^:",14,"^6E",["^1M",[["^6V","^6Y","^6Z","^6[","^70","^71"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",831,"^6R","~$array","^9",831,"^6I",6,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6V","^6Y","^6Z","^6[","^70","^71"]]]]]],"~$rrb-chunked-seq",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",117,"^8",7,"^9",117,"^:",22,"^6@",["^1M",["^6A",["^1M",[["~$vec","~$i","~$off"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","~$meta"]]]]],"~:top-fn",["^ ","^6H",false,"~:fixed-arity",5,"^6I",5,"^6E",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]],"^6@",["^1M",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]]],"^6G",["^1M",[null,null,null]]]],"^P","^3Y","^6","clojure/core/rrb_vector/rrbt.cljs","^:",22,"^77",["^ ","^6H",false,"^78",5,"^6I",5,"^6E",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]],"^6@",["^1M",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]]],"^6G",["^1M",[null,null,null]]],"^6E",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]],"^6F",null,"^78",5,"^6G",["^1M",[null,null,null]],"^8",1,"^6H",false,"~:methods",[["^ ","^78",3,"^6H",false,"^6L","^4?"],["^ ","^78",4,"^6H",false,"^6L","^4?"],["^ ","^78",5,"^6H",false,"^6L","^4?"]],"^7",117,"^9",117,"^6I",5,"^6J",true,"^6@",["^1M",[["^74","~$i","^75"],["^74","^6B","~$i","^75"],["^74","^6B","~$i","^75","^76"]]]],"~$-as-rrbt",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",26,"^8",4,"^9",26,"^:",12,"~:protocol","^30","~:doc",null,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"^7;","^30","^P","^46","^6","clojure/core/rrb_vector/rrbt.cljs","^:",12,"^6E",["^1M",[["~$v"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",25,"^6R","^6T","^9",26,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]],"^7<",null],"~$child-nodes",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",911,"^8",7,"^9",911,"^:",18,"^6@",["^1M",["^6A",["^1M",[["^6B"]]]]]],"^P","^41","^6","clojure/core/rrb_vector/rrbt.cljs","^:",18,"^6E",["^1M",[["^6B"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",911,"^6R","~$cljs.core/LazySeq","^9",911,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B"]]]]]],"~$AsRRBT",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","clojure/core/rrb_vector/rrbt.cljs","^:",20,"^8",14,"^7",25,"~:protocol-info",["^ ","^79",["^ ","^7:",[["~$v"]]]],"^9",25,"~:sigs",["^ ","~:-as-rrbt",["^ ","^P","^7:","^6@",["^1M",[["~$v"]]],"^7<",null]],"~:jsdoc",["^1M",["@interface"]]],"^7@",true,"^P","^30","^6","clojure/core/rrb_vector/rrbt.cljs","^:",20,"^8",1,"^7",25,"^7A",["^ ","^79",["^ ","^7:",[["~$v"]]]],"~:info",null,"^9",25,"^6L","^6T","^7B",["^ ","^7C",["^ ","^P","^7:","^6@",["^1M",[["~$v"]]],"^7<",null]],"~:impls",["^J",["^2Y","^3@","^48"]],"^7D",["^1M",["@interface"]]],"~$fallback-to-slow-splice-count2",["^ ","^P","^2X","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1066,"^8",1,"^9",1066,"^:",36,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1066,"^8",6,"^9",1066,"^:",36],"^6L","^6M"],"~$bounded-grandchildren",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",925,"^8",7,"^9",925,"^:",28,"^6@",["^1M",["^6A",["^1M",[["~$children"]]]]]],"^P","^4<","^6","clojure/core/rrb_vector/rrbt.cljs","^:",28,"^6E",["^1M",[["^7I"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",925,"^6R","^7>","^9",925,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^7I"]]]]]],"~$max-vector-elements",["^ ","^P","^3D","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1023,"^8",1,"^9",1023,"^:",25,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1023,"^8",6,"^9",1023,"^:",25],"^6L","^6W"],"~$shift-too-large?",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1033,"^8",7,"^9",1033,"^:",23,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"^P","^3G","^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"^6E",["^1M",[["~$v"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",1033,"^6R","~$boolean","^9",1033,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"~$peephole-optimize-root",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",972,"^8",7,"^9",972,"^:",29,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"^P","^49","^6","clojure/core/rrb_vector/rrbt.cljs","^:",29,"^6E",["^1M",[["~$v"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",972,"^6R",["^J",[null,"^48"]],"^9",972,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"~$slice-left",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",178,"^8",7,"^9",178,"^:",17,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","~$start","~$end"]]]]]],"^P","^26","^6","clojure/core/rrb_vector/rrbt.cljs","^:",17,"^6E",["^1M",[["^6B","^6V","^7O","^7P"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",178,"^6R",["^J",["~$cljs.core/VectorNode","~$clj-nil"]],"^9",178,"^6I",4,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","^7O","^7P"]]]]]],"~$->Transient",["^ ","^6?",null,"^5",["^ ","~:protocols",["^J",["~$cljs.core/ICounted","~$cljs.core/ITransientCollection","~$cljs.core/ITransientVector","~$cljs.core/ITransientAssociative","^4D"]],"^6","clojure/core/rrb_vector/rrbt.cljs","^:",19,"^8",10,"~:factory","~:positional","^7",1180,"^9",1180,"^6@",["^1M",["^6A",["^1M",[["~$cnt","^6V","~$root","~$tail","~$tidx"]]]]],"~:skip-protocol-flag",["^J",["^7U","^7V","^7W","^7X"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/Transient."],"^7T",["^J",["^7U","^7V","^7W","^7X","^4D"]],"^P","^3M","^6","clojure/core/rrb_vector/rrbt.cljs","^:",19,"^6E",["^1M",[["^7[","^6V","^80","^81","^82"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7Y","^7Z","^7",1180,"^6R","^2G","^9",1180,"^6I",5,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^7[","^6V","^80","^81","^82"]]]]],"^83",["^J",["^7U","^7V","^7W","^7X"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/Transient."],"~$fallback-to-slow-splice-count1",["^ ","^P","^3L","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1065,"^8",1,"^9",1065,"^:",36,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1065,"^8",6,"^9",1065,"^:",36],"^6L","^6M"],"~$RRBChunkedSeq",["^ ","~:num-fields",6,"^7T",["^J",["~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ASeq","~$cljs.core/ICollection","~$cljs.core/IChunkedNext","~$cljs.core/Object","~$cljs.core/IEmptyableCollection","~$cljs.core/ISeq","~$cljs.core/INext","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/IPrintWithWriter","~$cljs.core/IChunkedSeq","~$cljs.core/ISequential","~$cljs.core/IWithMeta","~$cljs.core/IReduce"]],"^P","^4?","^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"~:type",true,"^8",10,"^7",33,"~:record",false,"^9",33,"^6L","~$function","^83",["^J",["^87","^88","^89","^8:","^8;","^8=","^8>","^8?","^8@","^8A","^8B","^8C","^8D","^8E","^8F"]]],"~$count-vector-elements-beneath",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",950,"^8",7,"^9",950,"^:",36,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V"]]]]]],"^P","^2A","^6","clojure/core/rrb_vector/rrbt.cljs","^:",36,"^6E",["^1M",[["^6B","^6V"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",950,"^6R",["^J",["^6T","^6W"]],"^9",950,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V"]]]]]],"~$subtree-branch-count",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",649,"^8",7,"^9",649,"^:",27,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V"]]]]]],"^P","^42","^6","clojure/core/rrb_vector/rrbt.cljs","^:",27,"^6E",["^1M",[["^6B","^6V"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",649,"^6R","^6W","^9",649,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V"]]]]]],"~$poor-branching?",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1047,"^8",7,"^9",1047,"^:",22,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"^P","^2H","^6","clojure/core/rrb_vector/rrbt.cljs","^:",22,"^6E",["^1M",[["~$v"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",1047,"^6R","^7L","^9",1047,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"~$rrbt-concat-threshold",["^ ","^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",18,"^8",14,"^9",18,"^:",35,"~:const",true],"^P","^2J","^6","clojure/core/rrb_vector/rrbt.cljs","^:",35,"~:const-expr",["^ ","^R","^8N","~:val",33,"~:env",["^ ","~:context","~:expr"],"^1L",33,"^6L","^6W"],"^8",1,"^8N",true,"^7",18,"^9",18,"^6L","^6W"],"~$slice-right",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",125,"^8",7,"^9",125,"^:",18,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","^7P"]]]]]],"^P","^2D","^6","clojure/core/rrb_vector/rrbt.cljs","^:",18,"^6E",["^1M",[["^6B","^6V","^7P"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",125,"^6R","^7Q","^9",125,"^6I",3,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","^7P"]]]]]],"~$max-extra-search-steps",["^ ","^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",19,"^8",14,"^9",19,"^:",36,"^8N",true],"^P","^4G","^6","clojure/core/rrb_vector/rrbt.cljs","^:",36,"^8O",["^ ","^R","^8N","^8P",2,"^8Q",["^ ","^8R","^8S"],"^1L",2,"^6L","^6W"],"^8",1,"^8N",true,"^7",19,"^9",19,"^6L","^6W"],"~$child-seq",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",729,"^8",7,"^9",729,"^:",16,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","^7["]]]]]],"^P","^2B","^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^6E",["^1M",[["^6B","^6V","^7["]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",729,"^6R","^6T","^9",729,"^6I",3,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6B","^6V","^7["]]]]]],"~$IVecImpl",["^ ","^5",["^ ","^7@",true,"^6","clojure/core/rrb_vector/rrbt.cljs","^:",22,"^8",14,"^7",21,"^7A",["^ ","^79",["^ ","~$-tail-offset",[["~$v"]],"~$-array-for",[["~$v","~$i"]]]],"^9",21,"^7B",["^ ","~:-tail-offset",["^ ","^P","^8X","^6@",["^1M",[["~$v"]]],"^7<",null],"~:-array-for",["^ ","^P","^8Y","^6@",["^1M",[["~$v","~$i"]]],"^7<",null]],"^7D",["^1M",["@interface"]]],"^7@",true,"^P","^4D","^6","clojure/core/rrb_vector/rrbt.cljs","^:",22,"^8",1,"^7",21,"^7A",["^ ","^79",["^ ","^8X",[["~$v"]],"^8Y",[["~$v","~$i"]]]],"^7E",null,"^9",21,"^6L","^6T","^7B",["^ ","^8Z",["^ ","^P","^8X","^6@",["^1M",[["~$v"]]],"^7<",null],"^8[",["^ ","^P","^8Y","^6@",["^1M",[["~$v","~$i"]]],"^7<",null]],"^7F",["^J",["^2G","^48"]],"^7D",["^1M",["@interface"]]],"~$fallback-config",["^ ","^P","^2>","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1064,"^8",1,"^9",1064,"^:",21,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1064,"^8",6,"^9",1064,"^:",21],"^6L","^6M"],"~$last-non-nil-idx",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",942,"^8",7,"^9",942,"^:",23,"^6@",["^1M",["^6A",["^1M",[["~$arr"]]]]]],"^P","^2=","^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"^6E",["^1M",[["^92"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",942,"^6R","^6W","^9",942,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^92"]]]]]],"~$->RRBChunkedSeq",["^ ","^6?",null,"^5",["^ ","^7T",["^J",["^87","^88","^89","^8:","^8;","^8<","^8=","^8>","^8?","^8@","^8A","^8B","^8C","^8D","^8E","^8F"]],"^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"^8",10,"^7Y","^7Z","^7",33,"^9",33,"^6@",["^1M",["^6A",["^1M",[["^74","^6B","~$i","^75","^76","~$__hash"]]]]],"^83",["^J",["^87","^88","^89","^8:","^8;","^8=","^8>","^8?","^8@","^8A","^8B","^8C","^8D","^8E","^8F"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/RRBChunkedSeq."],"^7T",["^J",["^87","^88","^89","^8:","^8;","^8<","^8=","^8>","^8?","^8@","^8A","^8B","^8C","^8D","^8E","^8F"]],"^P","^2R","^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"^6E",["^1M",[["^74","^6B","~$i","^75","^76","^94"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7Y","^7Z","^7",33,"^6R","^4?","^9",33,"^6I",6,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^74","^6B","~$i","^75","^76","^94"]]]]],"^83",["^J",["^87","^88","^89","^8:","^8;","^8=","^8>","^8?","^8@","^8A","^8B","^8C","^8D","^8E","^8F"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/RRBChunkedSeq."],"^8X",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",22,"^8",4,"^9",22,"^:",16,"^7;","^4D","^7<",null,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]]],"^7;","^4D","^P","^2F","^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^6E",["^1M",[["~$v"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",21,"^6R","^6T","^9",22,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v"]]]]],"^7<",null],"^8Y",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",23,"^8",4,"^9",23,"^:",14,"^7;","^4D","^7<",null,"^6@",["^1M",["^6A",["^1M",[["~$v","~$i"]]]]]],"^7;","^4D","^P","^43","^6","clojure/core/rrb_vector/rrbt.cljs","^:",14,"^6E",["^1M",[["~$v","~$i"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",21,"^6R","^6T","^9",23,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["~$v","~$i"]]]]],"^7<",null],"~$rebalance-leaves",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",670,"^8",7,"^9",670,"^:",23,"^6@",["^1M",["^6A",["^1M",[["^6Y","^6Z","^6[","^70","^71"]]]]]],"^P","^4:","^6","clojure/core/rrb_vector/rrbt.cljs","^:",23,"^6E",["^1M",[["^6Y","^6Z","^6[","^70","^71"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",670,"^6R","^72","^9",670,"^6I",5,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6Y","^6Z","^6[","^70","^71"]]]]]],"~$Vector",["^ ","^86",6,"^7T",["^J",["~$cljs.core/IIndexed","~$cljs.core/IVector","~$cljs.core/IReversible","~$cljs.core/IKVReduce","^87","^88","~$cljs.core/IFn","^8:","~$cljs.core/IEditableCollection","^8<","^30","^8=","^7U","~$clojure.core.rrb-vector.protocols/PSliceableVector","^8@","^8A","~$cljs.core/IStack","~$cljs.core/IMapEntry","^8B","~$cljs.core/IComparable","^8D","^8E","~$cljs.core/IAssociative","~$clojure.core.rrb-vector.protocols/PSpliceableVector","^4D","~$cljs.core/ILookup","^8F"]],"^P","^48","^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^8G",true,"^8",10,"^7",271,"^8H",false,"^9",271,"^6L","^8I","^83",["^J",["^97","^98","^99","^9:","^87","^88","^9;","^8:","^9<","^8=","^7U","^8@","^8A","^9>","^9?","^8B","^9@","^8D","^8E","^9A","^9C","^8F"]]],"~$rebalance",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",746,"^8",7,"^9",746,"^:",16,"^6@",["^1M",["^6A",["^1M",[["^6V","^6Y","^6Z","^6[","^70","^71"]]]]]],"^P","^2N","^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^6E",["^1M",[["^6V","^6Y","^6Z","^6[","^70","^71"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",746,"^6R","^72","^9",746,"^6I",6,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6V","^6Y","^6Z","^6[","^70","^71"]]]]]],"~$fallback-to-slow-splice-if-needed",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1068,"^8",7,"^9",1068,"^:",40,"^6@",["^1M",["^6A",["^1M",[["^6P","^6Q","~$splice-result"]]]]]],"^P","^2V","^6","clojure/core/rrb_vector/rrbt.cljs","^:",40,"^6E",["^1M",[["^6P","^6Q","^9F"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",1068,"^6R",["^J",[null,"^6S","^6T"]],"^9",1068,"^6I",3,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6P","^6Q","^9F"]]]]]],"~$leaf-seq",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",667,"^8",7,"^9",667,"^:",15,"^6@",["^1M",["^6A",["^1M",[["^92"]]]]]],"^P","^2;","^6","clojure/core/rrb_vector/rrbt.cljs","^:",15,"^6E",["^1M",[["^92"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",667,"^6R","^6T","^9",667,"^6I",1,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^92"]]]]]],"~$squash-nodes",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",867,"^8",7,"^9",867,"^:",19,"^6@",["^1M",["^6A",["^1M",[["^6V","^6Y","^6Z","^6[","^70"]]]]]],"^P","^2C","^6","clojure/core/rrb_vector/rrbt.cljs","^:",19,"^6E",["^1M",[["^6V","^6Y","^6Z","^6[","^70"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",867,"^6R","^72","^9",867,"^6I",5,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6V","^6Y","^6Z","^6[","^70"]]]]]],"~$Transient",["^ ","^86",5,"^7T",["^J",["^7U","^7V","^7W","^7X","^4D"]],"^P","^2G","^6","clojure/core/rrb_vector/rrbt.cljs","^:",19,"^8G",true,"^8",10,"^7",1180,"^8H",false,"^9",1180,"^6L","^8I","^83",["^J",["^7U","^7V","^7W","^7X"]]],"~$splice-rrbts",["^ ","^6?",null,"^5",["^ ","^6","clojure/core/rrb_vector/rrbt.cljs","^7",1175,"^8",7,"^9",1175,"^:",19,"^6@",["^1M",["^6A",["^1M",[["^6P","^6Q"]]]]]],"^P","^35","^6","clojure/core/rrb_vector/rrbt.cljs","^:",19,"^6E",["^1M",[["^6P","^6Q"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7",1175,"^6R",["^J",[null,"^6S","^6T"]],"^9",1175,"^6I",2,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^6P","^6Q"]]]]]],"~$->Vector",["^ ","^6?",null,"^5",["^ ","^7T",["^J",["^97","^98","^99","^9:","^87","^88","^9;","^8:","^9<","^8<","^30","^8=","^7U","^9=","^8@","^8A","^9>","^9?","^8B","^9@","^8D","^8E","^9A","^9B","^4D","^9C","^8F"]],"^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^8",10,"^7Y","^7Z","^7",271,"^9",271,"^6@",["^1M",["^6A",["^1M",[["^7[","^6V","^80","^81","^76","^94"]]]]],"^83",["^J",["^97","^98","^99","^9:","^87","^88","^9;","^8:","^9<","^8=","^7U","^8@","^8A","^9>","^9?","^8B","^9@","^8D","^8E","^9A","^9C","^8F"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/Vector."],"^7T",["^J",["^97","^98","^99","^9:","^87","^88","^9;","^8:","^9<","^8<","^30","^8=","^7U","^9=","^8@","^8A","^9>","^9?","^8B","^9@","^8D","^8E","^9A","^9B","^4D","^9C","^8F"]],"^P","^2?","^6","clojure/core/rrb_vector/rrbt.cljs","^:",16,"^6E",["^1M",[["^7[","^6V","^80","^81","^76","^94"]]],"^6F",null,"^6G",["^1M",[null,null]],"^8",1,"^6H",false,"^7Y","^7Z","^7",271,"^6R","^48","^9",271,"^6I",6,"^6J",true,"^6@",["^1M",["^6A",["^1M",[["^7[","^6V","^80","^81","^76","^94"]]]]],"^83",["^J",["^97","^98","^99","^9:","^87","^88","^9;","^8:","^9<","^8=","^7U","^8@","^8A","^9>","^9?","^8B","^9@","^8D","^8E","^9A","^9C","^8F"]],"^7<","Positional factory function for clojure.core.rrb-vector.rrbt/Vector."]],"^12",["^ ","^H","^H","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^10",["^J",["~$i","~:else","^6V","^94","^76","^74","~:debug-fn","^7[","^6B","~:mutable","^80","^81","^75","^82"]],"~:order",["^74","^6B","~$i","^75","^76","^94","^9O","^9M","^7[","^6V","^80","^81","^9N","^82"]],"^1R",["^ ","^11",["^J",[]],"^12",["^J",[]]],"^1S",["^ "],"^1T",["^[","^Z","^V","^W","^X","^Y"]],"^S","^Q","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^4I",[["^9S","~:static-fns"],true,["^9S","~:shadow-tweaks"],null,["^9S","~:source-map-inline"],null,["^9S","~:elide-asserts"],false,["^9S","~:optimize-constants"],null,["^9S","^1Y"],null,["^9S","~:external-config"],null,["^9S","~:tooling-config"],null,["^9S","~:emit-constants"],null,["^9S","~:load-tests"],null,["^9S","~:form-size-threshold"],null,["^9S","~:data-readers"],null,["^9S","~:infer-externs"],"~:auto",["^9S","^1["],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9S","~:fn-invoke-direct"],null,["^9S","~:source-map"],"/dev/null"]]]